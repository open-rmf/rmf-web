systems:
  # websocket server for the dashboard
  client:
    type: websocket_server
    port: 50001
    cert: {{pwd}}/soss.crt
    key: {{pwd}}/soss.key
    authentication: { policies: [{ secret: rmf, algo: HS256 }] }

  # ROS2 node
  ros2: { type: ros2 }

routes:
  client_to_ros2: { from: client, to: ros2 }
  ros2_to_client: { from: ros2, to: client }
  ros2_service: { server: ros2, clients: client }

topics:
  door_states: { type: 'rmf_door_msgs/DoorState', route: ros2_to_client }
  door_requests: { type: 'rmf_door_msgs/DoorRequest', route: client_to_ros2 }
  adapter_door_requests: { type: 'rmf_door_msgs/DoorRequest', route: client_to_ros2 }
  lift_states: { type: 'rmf_lift_msgs/LiftState', route: ros2_to_client }
  lift_requests: { type: 'rmf_lift_msgs/LiftRequest', route: client_to_ros2 }
  adapter_lift_requests: { type: 'rmf_lift_msgs/LiftRequest', route: client_to_ros2 }
  fleet_states: { type: 'rmf_fleet_msgs/FleetState', route: ros2_to_client }
  dispenser_states: { type: 'rmf_dispenser_msgs/DispenserState', route: ros2_to_client }
  loop_requests: { type: 'rmf_task_msgs/Loop', route: client_to_ros2 }
  delivery_requests: { type: 'rmf_task_msgs/Delivery', route: client_to_ros2 }

services:
  get_building_map: { type: 'building_map_msgs/GetBuildingMap', route: ros2_service }
