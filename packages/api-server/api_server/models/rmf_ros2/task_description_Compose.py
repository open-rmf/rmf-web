# generated by datamodel-codegen:
#   filename:  task_description_Compose.json

from __future__ import annotations

from typing import Any, List, Optional

from pydantic import BaseModel, Field


class Activity(BaseModel):
    category: str = Field(..., description="The category of this phase's activity.")
    description: Any = Field(
        ...,
        description="A description of the activity. This must match a schema supported by a fleet for the category of this activity.",
    )


class Phase(BaseModel):
    activity: Activity
    on_cancel: Optional[List[Activity]] = Field(
        None,
        description="A list of activities to perform if the task is canceled during this phase. Each activity is given its own phase which can be skipped but not canceled.",
    )


class ComposeTaskDescription(BaseModel):
    category: Optional[str] = Field(
        None,
        description="Specify the category for this composed task, as the operators should see it.",
    )
    detail: Optional[str] = Field(
        None,
        description="Specify the detail for this composed task, as the operators should see it.",
    )
    phases: List[Phase] = Field(
        ...,
        description="List the phases of the task in the order that they should be performed.",
        ge=1.0,
    )
