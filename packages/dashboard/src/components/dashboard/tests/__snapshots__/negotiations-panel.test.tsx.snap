// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`matches snapshot 1`] = `
<Memo()
  conflicts={
    Object {
      "0": Object {
        "participantIdsToNames": Object {
          "1": "tinyrobot1",
          "2": "tinyrobot2",
        },
        "participantIdsToStatus": Object {
          "1": Object {
            "base": Object {
              "defunct": false,
              "forfeited": false,
              "rejected": true,
              "sequence": Array [
                1,
              ],
            },
            "hasTerminal": true,
            "terminal": Object {
              "defunct": false,
              "forfeited": false,
              "rejected": false,
              "sequence": Array [
                2,
                1,
              ],
            },
          },
          "2": Object {
            "base": Object {
              "defunct": false,
              "forfeited": true,
              "rejected": false,
              "sequence": Array [
                2,
              ],
            },
            "hasTerminal": false,
            "terminal": Object {
              "defunct": true,
              "forfeited": false,
              "rejected": false,
              "sequence": Array [
                1,
                2,
              ],
            },
          },
        },
        "resolved": 1,
      },
    }
  }
  negotiationStatusUpdateTS={0}
  setNegotiationTrajStore={[MockFunction]}
>
  <WithStyles(ForwardRef(Typography))
    component="span"
    variant="body1"
  >
    <ForwardRef(Typography)
      classes={
        Object {
          "alignCenter": "MuiTypography-alignCenter",
          "alignJustify": "MuiTypography-alignJustify",
          "alignLeft": "MuiTypography-alignLeft",
          "alignRight": "MuiTypography-alignRight",
          "body1": "MuiTypography-body1",
          "body2": "MuiTypography-body2",
          "button": "MuiTypography-button",
          "caption": "MuiTypography-caption",
          "colorError": "MuiTypography-colorError",
          "colorInherit": "MuiTypography-colorInherit",
          "colorPrimary": "MuiTypography-colorPrimary",
          "colorSecondary": "MuiTypography-colorSecondary",
          "colorTextPrimary": "MuiTypography-colorTextPrimary",
          "colorTextSecondary": "MuiTypography-colorTextSecondary",
          "displayBlock": "MuiTypography-displayBlock",
          "displayInline": "MuiTypography-displayInline",
          "gutterBottom": "MuiTypography-gutterBottom",
          "h1": "MuiTypography-h1",
          "h2": "MuiTypography-h2",
          "h3": "MuiTypography-h3",
          "h4": "MuiTypography-h4",
          "h5": "MuiTypography-h5",
          "h6": "MuiTypography-h6",
          "noWrap": "MuiTypography-noWrap",
          "overline": "MuiTypography-overline",
          "paragraph": "MuiTypography-paragraph",
          "root": "MuiTypography-root",
          "srOnly": "MuiTypography-srOnly",
          "subtitle1": "MuiTypography-subtitle1",
          "subtitle2": "MuiTypography-subtitle2",
        }
      }
      component="span"
      variant="body1"
    >
      <span
        className="MuiTypography-root MuiTypography-body1"
      >
        <div
          className="makeStyles-buttonGroupDiv-11"
        >
          <WithStyles(ForwardRef(ButtonGroup))
            fullWidth={true}
          >
            <ForwardRef(ButtonGroup)
              classes={
                Object {
                  "contained": "MuiButtonGroup-contained",
                  "disableElevation": "MuiButtonGroup-disableElevation",
                  "disabled": "Mui-disabled",
                  "fullWidth": "MuiButtonGroup-fullWidth",
                  "grouped": "MuiButtonGroup-grouped",
                  "groupedContained": "MuiButtonGroup-groupedContained",
                  "groupedContainedHorizontal": "MuiButtonGroup-groupedContainedHorizontal",
                  "groupedContainedPrimary": "MuiButtonGroup-groupedContainedPrimary",
                  "groupedContainedSecondary": "MuiButtonGroup-groupedContainedSecondary",
                  "groupedContainedVertical": "MuiButtonGroup-groupedContainedVertical",
                  "groupedHorizontal": "MuiButtonGroup-groupedHorizontal",
                  "groupedOutlined": "MuiButtonGroup-groupedOutlined",
                  "groupedOutlinedHorizontal": "MuiButtonGroup-groupedOutlinedHorizontal",
                  "groupedOutlinedPrimary": "MuiButtonGroup-groupedOutlinedPrimary",
                  "groupedOutlinedSecondary": "MuiButtonGroup-groupedOutlinedSecondary",
                  "groupedOutlinedVertical": "MuiButtonGroup-groupedOutlinedVertical",
                  "groupedText": "MuiButtonGroup-groupedText",
                  "groupedTextHorizontal": "MuiButtonGroup-groupedTextHorizontal",
                  "groupedTextPrimary": "MuiButtonGroup-groupedTextPrimary",
                  "groupedTextSecondary": "MuiButtonGroup-groupedTextSecondary",
                  "groupedTextVertical": "MuiButtonGroup-groupedTextVertical",
                  "groupedVertical": "MuiButtonGroup-groupedVertical",
                  "root": "MuiButtonGroup-root",
                  "vertical": "MuiButtonGroup-vertical",
                }
              }
              fullWidth={true}
            >
              <div
                className="MuiButtonGroup-root MuiButtonGroup-fullWidth"
                role="group"
              >
                <WithStyles(ForwardRef(Button))
                  className="MuiButtonGroup-grouped MuiButtonGroup-groupedHorizontal MuiButtonGroup-groupedOutlined MuiButtonGroup-groupedOutlinedHorizontal MuiButtonGroup-groupedOutlined"
                  color="default"
                  disableElevation={false}
                  disableFocusRipple={false}
                  disableRipple={false}
                  disabled={false}
                  fullWidth={true}
                  id="reset-button"
                  key=".0"
                  onClick={[Function]}
                  size="medium"
                  variant="outlined"
                >
                  <ForwardRef(Button)
                    className="MuiButtonGroup-grouped MuiButtonGroup-groupedHorizontal MuiButtonGroup-groupedOutlined MuiButtonGroup-groupedOutlinedHorizontal MuiButtonGroup-groupedOutlined"
                    classes={
                      Object {
                        "colorInherit": "MuiButton-colorInherit",
                        "contained": "MuiButton-contained",
                        "containedPrimary": "MuiButton-containedPrimary",
                        "containedSecondary": "MuiButton-containedSecondary",
                        "containedSizeLarge": "MuiButton-containedSizeLarge",
                        "containedSizeSmall": "MuiButton-containedSizeSmall",
                        "disableElevation": "MuiButton-disableElevation",
                        "disabled": "Mui-disabled",
                        "endIcon": "MuiButton-endIcon",
                        "focusVisible": "Mui-focusVisible",
                        "fullWidth": "MuiButton-fullWidth",
                        "iconSizeLarge": "MuiButton-iconSizeLarge",
                        "iconSizeMedium": "MuiButton-iconSizeMedium",
                        "iconSizeSmall": "MuiButton-iconSizeSmall",
                        "label": "MuiButton-label",
                        "outlined": "MuiButton-outlined",
                        "outlinedPrimary": "MuiButton-outlinedPrimary",
                        "outlinedSecondary": "MuiButton-outlinedSecondary",
                        "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                        "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                        "root": "MuiButton-root",
                        "sizeLarge": "MuiButton-sizeLarge",
                        "sizeSmall": "MuiButton-sizeSmall",
                        "startIcon": "MuiButton-startIcon",
                        "text": "MuiButton-text",
                        "textPrimary": "MuiButton-textPrimary",
                        "textSecondary": "MuiButton-textSecondary",
                        "textSizeLarge": "MuiButton-textSizeLarge",
                        "textSizeSmall": "MuiButton-textSizeSmall",
                      }
                    }
                    color="default"
                    disableElevation={false}
                    disableFocusRipple={false}
                    disableRipple={false}
                    disabled={false}
                    fullWidth={true}
                    id="reset-button"
                    onClick={[Function]}
                    size="medium"
                    variant="outlined"
                  >
                    <WithStyles(ForwardRef(ButtonBase))
                      className="MuiButton-root MuiButton-outlined MuiButtonGroup-grouped MuiButtonGroup-groupedHorizontal MuiButtonGroup-groupedOutlined MuiButtonGroup-groupedOutlinedHorizontal MuiButtonGroup-groupedOutlined MuiButton-fullWidth"
                      component="button"
                      disableRipple={false}
                      disabled={false}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible"
                      id="reset-button"
                      onClick={[Function]}
                      type="button"
                    >
                      <ForwardRef(ButtonBase)
                        className="MuiButton-root MuiButton-outlined MuiButtonGroup-grouped MuiButtonGroup-groupedHorizontal MuiButtonGroup-groupedOutlined MuiButtonGroup-groupedOutlinedHorizontal MuiButtonGroup-groupedOutlined MuiButton-fullWidth"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "focusVisible": "Mui-focusVisible",
                            "root": "MuiButtonBase-root",
                          }
                        }
                        component="button"
                        disableRipple={false}
                        disabled={false}
                        focusRipple={true}
                        focusVisibleClassName="Mui-focusVisible"
                        id="reset-button"
                        onClick={[Function]}
                        type="button"
                      >
                        <button
                          className="MuiButtonBase-root MuiButton-root MuiButton-outlined MuiButtonGroup-grouped MuiButtonGroup-groupedHorizontal MuiButtonGroup-groupedOutlined MuiButtonGroup-groupedOutlinedHorizontal MuiButtonGroup-groupedOutlined MuiButton-fullWidth"
                          disabled={false}
                          id="reset-button"
                          onBlur={[Function]}
                          onClick={[Function]}
                          onDragLeave={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          onMouseDown={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                          tabIndex={0}
                          type="button"
                        >
                          <span
                            className="MuiButton-label"
                          >
                            <ForwardRef>
                              <WithStyles(ForwardRef(SvgIcon))>
                                <ForwardRef(SvgIcon)
                                  classes={
                                    Object {
                                      "colorAction": "MuiSvgIcon-colorAction",
                                      "colorDisabled": "MuiSvgIcon-colorDisabled",
                                      "colorError": "MuiSvgIcon-colorError",
                                      "colorPrimary": "MuiSvgIcon-colorPrimary",
                                      "colorSecondary": "MuiSvgIcon-colorSecondary",
                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                      "root": "MuiSvgIcon-root",
                                    }
                                  }
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="MuiSvgIcon-root"
                                    focusable="false"
                                    viewBox="0 0 24 24"
                                  >
                                    <path
                                      d="M13 3c-4.97 0-9 4.03-9 9H1l3.89 3.89.07.14L9 12H6c0-3.87 3.13-7 7-7s7 3.13 7 7-3.13 7-7 7c-1.93 0-3.68-.79-4.94-2.06l-1.42 1.42C8.27 19.99 10.51 21 13 21c4.97 0 9-4.03 9-9s-4.03-9-9-9zm-1 5v5l4.28 2.54.72-1.21-3.5-2.08V8H12z"
                                    />
                                  </svg>
                                </ForwardRef(SvgIcon)>
                              </WithStyles(ForwardRef(SvgIcon))>
                            </ForwardRef>
                            Reset
                          </span>
                          <WithStyles(memo)
                            center={false}
                          >
                            <ForwardRef(TouchRipple)
                              center={false}
                              classes={
                                Object {
                                  "child": "MuiTouchRipple-child",
                                  "childLeaving": "MuiTouchRipple-childLeaving",
                                  "childPulsate": "MuiTouchRipple-childPulsate",
                                  "ripple": "MuiTouchRipple-ripple",
                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                  "rippleVisible": "MuiTouchRipple-rippleVisible",
                                  "root": "MuiTouchRipple-root",
                                }
                              }
                            >
                              <span
                                className="MuiTouchRipple-root"
                              >
                                <TransitionGroup
                                  childFactory={[Function]}
                                  component={null}
                                  exit={true}
                                />
                              </span>
                            </ForwardRef(TouchRipple)>
                          </WithStyles(memo)>
                        </button>
                      </ForwardRef(ButtonBase)>
                    </WithStyles(ForwardRef(ButtonBase))>
                  </ForwardRef(Button)>
                </WithStyles(ForwardRef(Button))>
                <WithStyles(ForwardRef(Button))
                  className="MuiButtonGroup-grouped MuiButtonGroup-groupedHorizontal MuiButtonGroup-groupedOutlined MuiButtonGroup-groupedOutlinedHorizontal MuiButtonGroup-groupedOutlined"
                  color="default"
                  disableElevation={false}
                  disableFocusRipple={false}
                  disableRipple={false}
                  disabled={false}
                  fullWidth={true}
                  id="clear-button"
                  key=".1"
                  onClick={[Function]}
                  size="medium"
                  variant="outlined"
                >
                  <ForwardRef(Button)
                    className="MuiButtonGroup-grouped MuiButtonGroup-groupedHorizontal MuiButtonGroup-groupedOutlined MuiButtonGroup-groupedOutlinedHorizontal MuiButtonGroup-groupedOutlined"
                    classes={
                      Object {
                        "colorInherit": "MuiButton-colorInherit",
                        "contained": "MuiButton-contained",
                        "containedPrimary": "MuiButton-containedPrimary",
                        "containedSecondary": "MuiButton-containedSecondary",
                        "containedSizeLarge": "MuiButton-containedSizeLarge",
                        "containedSizeSmall": "MuiButton-containedSizeSmall",
                        "disableElevation": "MuiButton-disableElevation",
                        "disabled": "Mui-disabled",
                        "endIcon": "MuiButton-endIcon",
                        "focusVisible": "Mui-focusVisible",
                        "fullWidth": "MuiButton-fullWidth",
                        "iconSizeLarge": "MuiButton-iconSizeLarge",
                        "iconSizeMedium": "MuiButton-iconSizeMedium",
                        "iconSizeSmall": "MuiButton-iconSizeSmall",
                        "label": "MuiButton-label",
                        "outlined": "MuiButton-outlined",
                        "outlinedPrimary": "MuiButton-outlinedPrimary",
                        "outlinedSecondary": "MuiButton-outlinedSecondary",
                        "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                        "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                        "root": "MuiButton-root",
                        "sizeLarge": "MuiButton-sizeLarge",
                        "sizeSmall": "MuiButton-sizeSmall",
                        "startIcon": "MuiButton-startIcon",
                        "text": "MuiButton-text",
                        "textPrimary": "MuiButton-textPrimary",
                        "textSecondary": "MuiButton-textSecondary",
                        "textSizeLarge": "MuiButton-textSizeLarge",
                        "textSizeSmall": "MuiButton-textSizeSmall",
                      }
                    }
                    color="default"
                    disableElevation={false}
                    disableFocusRipple={false}
                    disableRipple={false}
                    disabled={false}
                    fullWidth={true}
                    id="clear-button"
                    onClick={[Function]}
                    size="medium"
                    variant="outlined"
                  >
                    <WithStyles(ForwardRef(ButtonBase))
                      className="MuiButton-root MuiButton-outlined MuiButtonGroup-grouped MuiButtonGroup-groupedHorizontal MuiButtonGroup-groupedOutlined MuiButtonGroup-groupedOutlinedHorizontal MuiButtonGroup-groupedOutlined MuiButton-fullWidth"
                      component="button"
                      disableRipple={false}
                      disabled={false}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible"
                      id="clear-button"
                      onClick={[Function]}
                      type="button"
                    >
                      <ForwardRef(ButtonBase)
                        className="MuiButton-root MuiButton-outlined MuiButtonGroup-grouped MuiButtonGroup-groupedHorizontal MuiButtonGroup-groupedOutlined MuiButtonGroup-groupedOutlinedHorizontal MuiButtonGroup-groupedOutlined MuiButton-fullWidth"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "focusVisible": "Mui-focusVisible",
                            "root": "MuiButtonBase-root",
                          }
                        }
                        component="button"
                        disableRipple={false}
                        disabled={false}
                        focusRipple={true}
                        focusVisibleClassName="Mui-focusVisible"
                        id="clear-button"
                        onClick={[Function]}
                        type="button"
                      >
                        <button
                          className="MuiButtonBase-root MuiButton-root MuiButton-outlined MuiButtonGroup-grouped MuiButtonGroup-groupedHorizontal MuiButtonGroup-groupedOutlined MuiButtonGroup-groupedOutlinedHorizontal MuiButtonGroup-groupedOutlined MuiButton-fullWidth"
                          disabled={false}
                          id="clear-button"
                          onBlur={[Function]}
                          onClick={[Function]}
                          onDragLeave={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          onMouseDown={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                          tabIndex={0}
                          type="button"
                        >
                          <span
                            className="MuiButton-label"
                          >
                            <ForwardRef>
                              <WithStyles(ForwardRef(SvgIcon))>
                                <ForwardRef(SvgIcon)
                                  classes={
                                    Object {
                                      "colorAction": "MuiSvgIcon-colorAction",
                                      "colorDisabled": "MuiSvgIcon-colorDisabled",
                                      "colorError": "MuiSvgIcon-colorError",
                                      "colorPrimary": "MuiSvgIcon-colorPrimary",
                                      "colorSecondary": "MuiSvgIcon-colorSecondary",
                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                      "root": "MuiSvgIcon-root",
                                    }
                                  }
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="MuiSvgIcon-root"
                                    focusable="false"
                                    viewBox="0 0 24 24"
                                  >
                                    <path
                                      d="M5 13h14v-2H5v2zm-2 4h14v-2H3v2zM7 7v2h14V7H7z"
                                    />
                                  </svg>
                                </ForwardRef(SvgIcon)>
                              </WithStyles(ForwardRef(SvgIcon))>
                            </ForwardRef>
                            Clear
                          </span>
                          <WithStyles(memo)
                            center={false}
                          >
                            <ForwardRef(TouchRipple)
                              center={false}
                              classes={
                                Object {
                                  "child": "MuiTouchRipple-child",
                                  "childLeaving": "MuiTouchRipple-childLeaving",
                                  "childPulsate": "MuiTouchRipple-childPulsate",
                                  "ripple": "MuiTouchRipple-ripple",
                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                  "rippleVisible": "MuiTouchRipple-rippleVisible",
                                  "root": "MuiTouchRipple-root",
                                }
                              }
                            >
                              <span
                                className="MuiTouchRipple-root"
                              >
                                <TransitionGroup
                                  childFactory={[Function]}
                                  component={null}
                                  exit={true}
                                />
                              </span>
                            </ForwardRef(TouchRipple)>
                          </WithStyles(memo)>
                        </button>
                      </ForwardRef(ButtonBase)>
                    </WithStyles(ForwardRef(ButtonBase))>
                  </ForwardRef(Button)>
                </WithStyles(ForwardRef(Button))>
                <WithStyles(ForwardRef(Button))
                  className="MuiButtonGroup-grouped MuiButtonGroup-groupedHorizontal MuiButtonGroup-groupedOutlined MuiButtonGroup-groupedOutlinedHorizontal MuiButtonGroup-groupedOutlined"
                  color="default"
                  disableElevation={false}
                  disableFocusRipple={false}
                  disableRipple={false}
                  disabled={false}
                  fullWidth={true}
                  id="restore-button"
                  key=".2"
                  onClick={[Function]}
                  size="medium"
                  variant="outlined"
                >
                  <ForwardRef(Button)
                    className="MuiButtonGroup-grouped MuiButtonGroup-groupedHorizontal MuiButtonGroup-groupedOutlined MuiButtonGroup-groupedOutlinedHorizontal MuiButtonGroup-groupedOutlined"
                    classes={
                      Object {
                        "colorInherit": "MuiButton-colorInherit",
                        "contained": "MuiButton-contained",
                        "containedPrimary": "MuiButton-containedPrimary",
                        "containedSecondary": "MuiButton-containedSecondary",
                        "containedSizeLarge": "MuiButton-containedSizeLarge",
                        "containedSizeSmall": "MuiButton-containedSizeSmall",
                        "disableElevation": "MuiButton-disableElevation",
                        "disabled": "Mui-disabled",
                        "endIcon": "MuiButton-endIcon",
                        "focusVisible": "Mui-focusVisible",
                        "fullWidth": "MuiButton-fullWidth",
                        "iconSizeLarge": "MuiButton-iconSizeLarge",
                        "iconSizeMedium": "MuiButton-iconSizeMedium",
                        "iconSizeSmall": "MuiButton-iconSizeSmall",
                        "label": "MuiButton-label",
                        "outlined": "MuiButton-outlined",
                        "outlinedPrimary": "MuiButton-outlinedPrimary",
                        "outlinedSecondary": "MuiButton-outlinedSecondary",
                        "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                        "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                        "root": "MuiButton-root",
                        "sizeLarge": "MuiButton-sizeLarge",
                        "sizeSmall": "MuiButton-sizeSmall",
                        "startIcon": "MuiButton-startIcon",
                        "text": "MuiButton-text",
                        "textPrimary": "MuiButton-textPrimary",
                        "textSecondary": "MuiButton-textSecondary",
                        "textSizeLarge": "MuiButton-textSizeLarge",
                        "textSizeSmall": "MuiButton-textSizeSmall",
                      }
                    }
                    color="default"
                    disableElevation={false}
                    disableFocusRipple={false}
                    disableRipple={false}
                    disabled={false}
                    fullWidth={true}
                    id="restore-button"
                    onClick={[Function]}
                    size="medium"
                    variant="outlined"
                  >
                    <WithStyles(ForwardRef(ButtonBase))
                      className="MuiButton-root MuiButton-outlined MuiButtonGroup-grouped MuiButtonGroup-groupedHorizontal MuiButtonGroup-groupedOutlined MuiButtonGroup-groupedOutlinedHorizontal MuiButtonGroup-groupedOutlined MuiButton-fullWidth"
                      component="button"
                      disableRipple={false}
                      disabled={false}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible"
                      id="restore-button"
                      onClick={[Function]}
                      type="button"
                    >
                      <ForwardRef(ButtonBase)
                        className="MuiButton-root MuiButton-outlined MuiButtonGroup-grouped MuiButtonGroup-groupedHorizontal MuiButtonGroup-groupedOutlined MuiButtonGroup-groupedOutlinedHorizontal MuiButtonGroup-groupedOutlined MuiButton-fullWidth"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "focusVisible": "Mui-focusVisible",
                            "root": "MuiButtonBase-root",
                          }
                        }
                        component="button"
                        disableRipple={false}
                        disabled={false}
                        focusRipple={true}
                        focusVisibleClassName="Mui-focusVisible"
                        id="restore-button"
                        onClick={[Function]}
                        type="button"
                      >
                        <button
                          className="MuiButtonBase-root MuiButton-root MuiButton-outlined MuiButtonGroup-grouped MuiButtonGroup-groupedHorizontal MuiButtonGroup-groupedOutlined MuiButtonGroup-groupedOutlinedHorizontal MuiButtonGroup-groupedOutlined MuiButton-fullWidth"
                          disabled={false}
                          id="restore-button"
                          onBlur={[Function]}
                          onClick={[Function]}
                          onDragLeave={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          onMouseDown={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                          tabIndex={0}
                          type="button"
                        >
                          <span
                            className="MuiButton-label"
                          >
                            <ForwardRef>
                              <WithStyles(ForwardRef(SvgIcon))>
                                <ForwardRef(SvgIcon)
                                  classes={
                                    Object {
                                      "colorAction": "MuiSvgIcon-colorAction",
                                      "colorDisabled": "MuiSvgIcon-colorDisabled",
                                      "colorError": "MuiSvgIcon-colorError",
                                      "colorPrimary": "MuiSvgIcon-colorPrimary",
                                      "colorSecondary": "MuiSvgIcon-colorSecondary",
                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                      "root": "MuiSvgIcon-root",
                                    }
                                  }
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="MuiSvgIcon-root"
                                    focusable="false"
                                    viewBox="0 0 24 24"
                                  >
                                    <path
                                      d="M19 4h-3.5l-1-1h-5l-1 1H5v2h14zM6 7v12c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6zm8 7v4h-4v-4H8l4-4 4 4h-2z"
                                    />
                                  </svg>
                                </ForwardRef(SvgIcon)>
                              </WithStyles(ForwardRef(SvgIcon))>
                            </ForwardRef>
                            Restore
                          </span>
                          <WithStyles(memo)
                            center={false}
                          >
                            <ForwardRef(TouchRipple)
                              center={false}
                              classes={
                                Object {
                                  "child": "MuiTouchRipple-child",
                                  "childLeaving": "MuiTouchRipple-childLeaving",
                                  "childPulsate": "MuiTouchRipple-childPulsate",
                                  "ripple": "MuiTouchRipple-ripple",
                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                  "rippleVisible": "MuiTouchRipple-rippleVisible",
                                  "root": "MuiTouchRipple-root",
                                }
                              }
                            >
                              <span
                                className="MuiTouchRipple-root"
                              >
                                <TransitionGroup
                                  childFactory={[Function]}
                                  component={null}
                                  exit={true}
                                />
                              </span>
                            </ForwardRef(TouchRipple)>
                          </WithStyles(memo)>
                        </button>
                      </ForwardRef(ButtonBase)>
                    </WithStyles(ForwardRef(ButtonBase))>
                  </ForwardRef(Button)>
                </WithStyles(ForwardRef(Button))>
              </div>
            </ForwardRef(ButtonGroup)>
          </WithStyles(ForwardRef(ButtonGroup))>
        </div>
        <WithStyles(ForwardRef(TreeView))
          className="makeStyles-root-1"
          defaultCollapseIcon={<Memo(ExpandMoreIcon) />}
          defaultExpandIcon={<Memo(ChevronRightIcon) />}
          defaultExpanded={
            Array [
              "root",
            ]
          }
          expanded={Array []}
          onNodeSelect={[Function]}
          onNodeToggle={[Function]}
          selected=""
        >
          <ForwardRef(TreeView)
            className="makeStyles-root-1"
            classes={
              Object {
                "root": "MuiTreeView-root",
              }
            }
            defaultCollapseIcon={<Memo(ExpandMoreIcon) />}
            defaultExpandIcon={<Memo(ChevronRightIcon) />}
            defaultExpanded={
              Array [
                "root",
              ]
            }
            expanded={Array []}
            onNodeSelect={[Function]}
            onNodeToggle={[Function]}
            selected=""
          >
            <ul
              aria-multiselectable={false}
              className="MuiTreeView-root makeStyles-root-1"
              role="tree"
            >
              <WithStyles(ForwardRef(TreeItem))
                classes={
                  Object {
                    "expanded": "makeStyles-expanded-10",
                    "label": "makeStyles-finished-2 makeStyles-labelContent-9",
                    "root": "makeStyles-treeChildren-8",
                  }
                }
                data-component="TreeItem"
                key="conflict0"
                label="Conflict #0, Participants: tinyrobot1, tinyrobot2"
                nodeId="conflict0"
              >
                <ForwardRef(TreeItem)
                  classes={
                    Object {
                      "content": "MuiTreeItem-content",
                      "expanded": "Mui-expanded makeStyles-expanded-10",
                      "group": "MuiTreeItem-group",
                      "iconContainer": "MuiTreeItem-iconContainer",
                      "label": "MuiTreeItem-label makeStyles-finished-2 makeStyles-labelContent-9",
                      "root": "MuiTreeItem-root makeStyles-treeChildren-8",
                      "selected": "Mui-selected",
                    }
                  }
                  data-component="TreeItem"
                  label="Conflict #0, Participants: tinyrobot1, tinyrobot2"
                  nodeId="conflict0"
                >
                  <li
                    aria-expanded={false}
                    className="MuiTreeItem-root makeStyles-treeChildren-8"
                    data-component="TreeItem"
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    role="treeitem"
                    tabIndex={0}
                  >
                    <div
                      className="MuiTreeItem-content"
                      onClick={[Function]}
                      onMouseDown={[Function]}
                    >
                      <div
                        className="MuiTreeItem-iconContainer"
                      >
                        <ForwardRef>
                          <WithStyles(ForwardRef(SvgIcon))>
                            <ForwardRef(SvgIcon)
                              classes={
                                Object {
                                  "colorAction": "MuiSvgIcon-colorAction",
                                  "colorDisabled": "MuiSvgIcon-colorDisabled",
                                  "colorError": "MuiSvgIcon-colorError",
                                  "colorPrimary": "MuiSvgIcon-colorPrimary",
                                  "colorSecondary": "MuiSvgIcon-colorSecondary",
                                  "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                  "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                  "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                  "root": "MuiSvgIcon-root",
                                }
                              }
                            >
                              <svg
                                aria-hidden={true}
                                className="MuiSvgIcon-root"
                                focusable="false"
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                />
                              </svg>
                            </ForwardRef(SvgIcon)>
                          </WithStyles(ForwardRef(SvgIcon))>
                        </ForwardRef>
                      </div>
                      <WithStyles(ForwardRef(Typography))
                        className="MuiTreeItem-label makeStyles-finished-2 makeStyles-labelContent-9"
                        component="div"
                      >
                        <ForwardRef(Typography)
                          className="MuiTreeItem-label makeStyles-finished-2 makeStyles-labelContent-9"
                          classes={
                            Object {
                              "alignCenter": "MuiTypography-alignCenter",
                              "alignJustify": "MuiTypography-alignJustify",
                              "alignLeft": "MuiTypography-alignLeft",
                              "alignRight": "MuiTypography-alignRight",
                              "body1": "MuiTypography-body1",
                              "body2": "MuiTypography-body2",
                              "button": "MuiTypography-button",
                              "caption": "MuiTypography-caption",
                              "colorError": "MuiTypography-colorError",
                              "colorInherit": "MuiTypography-colorInherit",
                              "colorPrimary": "MuiTypography-colorPrimary",
                              "colorSecondary": "MuiTypography-colorSecondary",
                              "colorTextPrimary": "MuiTypography-colorTextPrimary",
                              "colorTextSecondary": "MuiTypography-colorTextSecondary",
                              "displayBlock": "MuiTypography-displayBlock",
                              "displayInline": "MuiTypography-displayInline",
                              "gutterBottom": "MuiTypography-gutterBottom",
                              "h1": "MuiTypography-h1",
                              "h2": "MuiTypography-h2",
                              "h3": "MuiTypography-h3",
                              "h4": "MuiTypography-h4",
                              "h5": "MuiTypography-h5",
                              "h6": "MuiTypography-h6",
                              "noWrap": "MuiTypography-noWrap",
                              "overline": "MuiTypography-overline",
                              "paragraph": "MuiTypography-paragraph",
                              "root": "MuiTypography-root",
                              "srOnly": "MuiTypography-srOnly",
                              "subtitle1": "MuiTypography-subtitle1",
                              "subtitle2": "MuiTypography-subtitle2",
                            }
                          }
                          component="div"
                        >
                          <div
                            className="MuiTypography-root MuiTreeItem-label makeStyles-finished-2 makeStyles-labelContent-9 MuiTypography-body1"
                          >
                            Conflict #0, Participants: tinyrobot1, tinyrobot2
                          </div>
                        </ForwardRef(Typography)>
                      </WithStyles(ForwardRef(Typography))>
                    </div>
                    <WithStyles(ForwardRef(Collapse))
                      className="MuiTreeItem-group"
                      component="ul"
                      in={false}
                      role="group"
                      unmountOnExit={true}
                    >
                      <ForwardRef(Collapse)
                        className="MuiTreeItem-group"
                        classes={
                          Object {
                            "container": "MuiCollapse-container",
                            "entered": "MuiCollapse-entered",
                            "hidden": "MuiCollapse-hidden",
                            "wrapper": "MuiCollapse-wrapper",
                            "wrapperInner": "MuiCollapse-wrapperInner",
                          }
                        }
                        component="ul"
                        in={false}
                        role="group"
                        unmountOnExit={true}
                      >
                        <Transition
                          addEndListener={[Function]}
                          appear={false}
                          enter={true}
                          exit={true}
                          in={false}
                          mountOnEnter={false}
                          onEnter={[Function]}
                          onEntered={[Function]}
                          onEntering={[Function]}
                          onExit={[Function]}
                          onExited={[Function]}
                          onExiting={[Function]}
                          role="group"
                          timeout={300}
                          unmountOnExit={true}
                        />
                      </ForwardRef(Collapse)>
                    </WithStyles(ForwardRef(Collapse))>
                  </li>
                </ForwardRef(TreeItem)>
              </WithStyles(ForwardRef(TreeItem))>
            </ul>
          </ForwardRef(TreeView)>
        </WithStyles(ForwardRef(TreeView))>
      </span>
    </ForwardRef(Typography)>
  </WithStyles(ForwardRef(Typography))>
</Memo()>
`;
