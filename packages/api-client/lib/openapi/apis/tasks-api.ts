/* tslint:disable */
/* eslint-disable */
/**
 * RMF API Server
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CancelTask } from '../models';
import { HTTPValidationError } from '../models';
import { ModelObject } from '../models';
import { SubmitTask } from '../models';
import { SubmitTaskResponse } from '../models';
import { Task } from '../models';
import { TaskSummary } from '../models';
/**
 * TasksApi - axios parameter creator
 * @export
 */
export const TasksApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Cancel Task
     * @param {CancelTask} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelTaskTasksCancelTaskPost: async (
      body: CancelTask,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling cancelTaskTasksCancelTaskPost.',
        );
      }
      const localVarPath = `/tasks/cancel_task`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || '';

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * **Available in socket.io**
     * @summary Get Task Summary
     * @param {string} task_id task_id with &#x27;/&#x27; replaced with &#x27;__&#x27;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTaskSummaryTasksTaskIdSummaryGet: async (
      task_id: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'task_id' is not null or undefined
      if (task_id === null || task_id === undefined) {
        throw new RequiredError(
          'task_id',
          'Required parameter task_id was null or undefined when calling getTaskSummaryTasksTaskIdSummaryGet.',
        );
      }
      const localVarPath = `/tasks/{task_id}/summary`.replace(
        `{${'task_id'}}`,
        encodeURIComponent(String(task_id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get Tasks
     * @param {string} [task_id] comma separated list of task ids
     * @param {string} [fleet_name] comma separated list of fleet names
     * @param {Date} [submission_time_since]
     * @param {Date} [start_time_since]
     * @param {Date} [end_time_since]
     * @param {string} [robot_name] comma separated list of robot names
     * @param {string} [state] comma separated list of states
     * @param {string} [task_type] comma separated list of task types
     * @param {number} [priority]
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {string} [order_by] common separated list of fields to order by, prefix with &#x27;-&#x27; to sort descendingly.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTasksTasksGet: async (
      task_id?: string,
      fleet_name?: string,
      submission_time_since?: Date,
      start_time_since?: Date,
      end_time_since?: Date,
      robot_name?: string,
      state?: string,
      task_type?: string,
      priority?: number,
      limit?: number,
      offset?: number,
      order_by?: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/tasks`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (task_id !== undefined) {
        localVarQueryParameter['task_id'] = task_id;
      }

      if (fleet_name !== undefined) {
        localVarQueryParameter['fleet_name'] = fleet_name;
      }

      if (submission_time_since !== undefined) {
        localVarQueryParameter['submission_time_since'] =
          (submission_time_since as any) instanceof Date
            ? (submission_time_since as any).toISOString()
            : submission_time_since;
      }

      if (start_time_since !== undefined) {
        localVarQueryParameter['start_time_since'] =
          (start_time_since as any) instanceof Date
            ? (start_time_since as any).toISOString()
            : start_time_since;
      }

      if (end_time_since !== undefined) {
        localVarQueryParameter['end_time_since'] =
          (end_time_since as any) instanceof Date
            ? (end_time_since as any).toISOString()
            : end_time_since;
      }

      if (robot_name !== undefined) {
        localVarQueryParameter['robot_name'] = robot_name;
      }

      if (state !== undefined) {
        localVarQueryParameter['state'] = state;
      }

      if (task_type !== undefined) {
        localVarQueryParameter['task_type'] = task_type;
      }

      if (priority !== undefined) {
        localVarQueryParameter['priority'] = priority;
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter['offset'] = offset;
      }

      if (order_by !== undefined) {
        localVarQueryParameter['order_by'] = order_by;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Submit Task
     * @param {SubmitTask} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitTaskTasksSubmitTaskPost: async (
      body: SubmitTask,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling submitTaskTasksSubmitTaskPost.',
        );
      }
      const localVarPath = `/tasks/submit_task`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        query.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || '';

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * TasksApi - functional programming interface
 * @export
 */
export const TasksApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Cancel Task
     * @param {CancelTask} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async cancelTaskTasksCancelTaskPost(
      body: CancelTask,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelObject>> {
      const localVarAxiosArgs = await TasksApiAxiosParamCreator(
        configuration,
      ).cancelTaskTasksCancelTaskPost(body, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * **Available in socket.io**
     * @summary Get Task Summary
     * @param {string} task_id task_id with &#x27;/&#x27; replaced with &#x27;__&#x27;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTaskSummaryTasksTaskIdSummaryGet(
      task_id: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskSummary>> {
      const localVarAxiosArgs = await TasksApiAxiosParamCreator(
        configuration,
      ).getTaskSummaryTasksTaskIdSummaryGet(task_id, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get Tasks
     * @param {string} [task_id] comma separated list of task ids
     * @param {string} [fleet_name] comma separated list of fleet names
     * @param {Date} [submission_time_since]
     * @param {Date} [start_time_since]
     * @param {Date} [end_time_since]
     * @param {string} [robot_name] comma separated list of robot names
     * @param {string} [state] comma separated list of states
     * @param {string} [task_type] comma separated list of task types
     * @param {number} [priority]
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {string} [order_by] common separated list of fields to order by, prefix with &#x27;-&#x27; to sort descendingly.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTasksTasksGet(
      task_id?: string,
      fleet_name?: string,
      submission_time_since?: Date,
      start_time_since?: Date,
      end_time_since?: Date,
      robot_name?: string,
      state?: string,
      task_type?: string,
      priority?: number,
      limit?: number,
      offset?: number,
      order_by?: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Task>>> {
      const localVarAxiosArgs = await TasksApiAxiosParamCreator(configuration).getTasksTasksGet(
        task_id,
        fleet_name,
        submission_time_since,
        start_time_since,
        end_time_since,
        robot_name,
        state,
        task_type,
        priority,
        limit,
        offset,
        order_by,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Submit Task
     * @param {SubmitTask} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async submitTaskTasksSubmitTaskPost(
      body: SubmitTask,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubmitTaskResponse>> {
      const localVarAxiosArgs = await TasksApiAxiosParamCreator(
        configuration,
      ).submitTaskTasksSubmitTaskPost(body, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * TasksApi - factory interface
 * @export
 */
export const TasksApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  return {
    /**
     *
     * @summary Cancel Task
     * @param {CancelTask} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelTaskTasksCancelTaskPost(body: CancelTask, options?: any): AxiosPromise<ModelObject> {
      return TasksApiFp(configuration)
        .cancelTaskTasksCancelTaskPost(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * **Available in socket.io**
     * @summary Get Task Summary
     * @param {string} task_id task_id with &#x27;/&#x27; replaced with &#x27;__&#x27;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTaskSummaryTasksTaskIdSummaryGet(task_id: string, options?: any): AxiosPromise<TaskSummary> {
      return TasksApiFp(configuration)
        .getTaskSummaryTasksTaskIdSummaryGet(task_id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get Tasks
     * @param {string} [task_id] comma separated list of task ids
     * @param {string} [fleet_name] comma separated list of fleet names
     * @param {Date} [submission_time_since]
     * @param {Date} [start_time_since]
     * @param {Date} [end_time_since]
     * @param {string} [robot_name] comma separated list of robot names
     * @param {string} [state] comma separated list of states
     * @param {string} [task_type] comma separated list of task types
     * @param {number} [priority]
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {string} [order_by] common separated list of fields to order by, prefix with &#x27;-&#x27; to sort descendingly.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTasksTasksGet(
      task_id?: string,
      fleet_name?: string,
      submission_time_since?: Date,
      start_time_since?: Date,
      end_time_since?: Date,
      robot_name?: string,
      state?: string,
      task_type?: string,
      priority?: number,
      limit?: number,
      offset?: number,
      order_by?: string,
      options?: any,
    ): AxiosPromise<Array<Task>> {
      return TasksApiFp(configuration)
        .getTasksTasksGet(
          task_id,
          fleet_name,
          submission_time_since,
          start_time_since,
          end_time_since,
          robot_name,
          state,
          task_type,
          priority,
          limit,
          offset,
          order_by,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Submit Task
     * @param {SubmitTask} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitTaskTasksSubmitTaskPost(
      body: SubmitTask,
      options?: any,
    ): AxiosPromise<SubmitTaskResponse> {
      return TasksApiFp(configuration)
        .submitTaskTasksSubmitTaskPost(body, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * TasksApi - object-oriented interface
 * @export
 * @class TasksApi
 * @extends {BaseAPI}
 */
export class TasksApi extends BaseAPI {
  /**
   *
   * @summary Cancel Task
   * @param {CancelTask} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TasksApi
   */
  public cancelTaskTasksCancelTaskPost(body: CancelTask, options?: any) {
    return TasksApiFp(this.configuration)
      .cancelTaskTasksCancelTaskPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * **Available in socket.io**
   * @summary Get Task Summary
   * @param {string} task_id task_id with &#x27;/&#x27; replaced with &#x27;__&#x27;
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TasksApi
   */
  public getTaskSummaryTasksTaskIdSummaryGet(task_id: string, options?: any) {
    return TasksApiFp(this.configuration)
      .getTaskSummaryTasksTaskIdSummaryGet(task_id, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get Tasks
   * @param {string} [task_id] comma separated list of task ids
   * @param {string} [fleet_name] comma separated list of fleet names
   * @param {Date} [submission_time_since]
   * @param {Date} [start_time_since]
   * @param {Date} [end_time_since]
   * @param {string} [robot_name] comma separated list of robot names
   * @param {string} [state] comma separated list of states
   * @param {string} [task_type] comma separated list of task types
   * @param {number} [priority]
   * @param {number} [limit]
   * @param {number} [offset]
   * @param {string} [order_by] common separated list of fields to order by, prefix with &#x27;-&#x27; to sort descendingly.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TasksApi
   */
  public getTasksTasksGet(
    task_id?: string,
    fleet_name?: string,
    submission_time_since?: Date,
    start_time_since?: Date,
    end_time_since?: Date,
    robot_name?: string,
    state?: string,
    task_type?: string,
    priority?: number,
    limit?: number,
    offset?: number,
    order_by?: string,
    options?: any,
  ) {
    return TasksApiFp(this.configuration)
      .getTasksTasksGet(
        task_id,
        fleet_name,
        submission_time_since,
        start_time_since,
        end_time_since,
        robot_name,
        state,
        task_type,
        priority,
        limit,
        offset,
        order_by,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Submit Task
   * @param {SubmitTask} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TasksApi
   */
  public submitTaskTasksSubmitTaskPost(body: SubmitTask, options?: any) {
    return TasksApiFp(this.configuration)
      .submitTaskTasksSubmitTaskPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
