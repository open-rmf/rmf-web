/* This is a generated file, do not edit */

{% for pkg in msg.package_dependencies() %}
import * as {{ pkg }} from '../../{{ pkg }}';
{% endfor %}

export class {{ msg.name }} {
  static readonly FullTypeName = '{{ msg.type_name }}';

{% for const in msg.constants %}
  static readonly {{ const.name }} = {{ const.value }};
{% endfor %}

{% for m in msg.members %}
{% if m.type.is_typed_array %}
  {{ m.name }}: {{ m.type.type }} | number[];
{% else %}
  {{ m.name }}: {{ m.type.type }};
{% endif %}
{% endfor %}

  constructor(fields: Partial<{{ msg.name }}> = {}) {
{% for m in msg.members %}
    this.{{ m.name }} = fields.{{ m.name }} || {{ m.type.default_value }};
{% endfor %}
  }

  static validate(obj: Record<string, unknown>): void {
{% for m in msg.members %}
{% if m.type.is_array %}
{% if m.type.is_typed_array %}
    if (!(obj['{{ m.name }}'] instanceof {{ m.type.type }}) && !Array.isArray(obj['{{ m.name }}'])) {
      throw new Error('expected "{{ m.name }}" to be "{{ m.type.type }}" or an array');
    }
{% else %}
    if (!Array.isArray(obj['{{ m.name }}'])) {
      throw new Error('expected "{{ m.name }}" to be an array');
    }
{% endif %}
{% if m.type.is_bounded %}
    if (obj['{{ m.name }}'].length > {{ m.type.array_size }}) {
      throw new Error('"{{ m.name }}" exceeds the upper bound of {{ m.type.array_size }}')
    }
{% elif m.type.array_size %}
    if (obj['{{ m.name }}'].length != {{ m.type.array_size }}) {
      throw new Error('"{{ m.name }}" must have length of {{ m.type.array_size }}');
    }
{% endif %}
{% if m.type.is_typed_array %}
    if (Array.isArray(obj['{{ m.name }}'])) {
      for (const [i, v] of obj['{{ m.name }}'].entries()) {
        if (typeof v !== 'number') {
          throw new Error(`expected index ${i} of "{{ m.name }}" to be "number"`);
        }
      }
    } else if (!(obj['{{ m.name }}'] instanceof {{ m.type.type }})) {
      throw new Error('"{{ m.name }}" must be either an array of number or {{ m.type.type }}');
    }
{% else %}
{% if m.type.elem_type.is_primitive %}
    for (const [i, v] of obj['{{ m.name }}'].entries()) {
      if (typeof v !== '{{ m.type.elem_type.type }}') {
        throw new Error(`expected index ${i} of "{{ m.name }}" to be "{{ m.type.elem_type.type }}"`);
      }
    }
{% else %}
    for (const [i, v] of obj['{{ m.name }}'].entries()) {
      try {
        {{ m.type.elem_type.type }}.validate(v)
      } catch (e) {
        throw new Error(`in index ${i} of "{{ m.name }}":\n  ` + (e as Error).message);
      }
    }
{% endif %}
{% endif %}
{% else %}
{% if m.type.is_primitive %}
    if (typeof obj['{{ m.name }}'] !== '{{ m.type.type }}') {
      throw new Error('expected "{{ m.name }}" to be "{{ m.type.type }}"');
    }
{% else %}
    try {
      {{ m.type.type }}.validate(obj['{{ m.name }}'] as Record<string, unknown>);
    } catch (e) {
      throw new Error('in "{{ m.name }}":\n  ' + (e as Error).message);
    }
{% endif %}
{% endif %}
{% endfor %}
  }
}

export default {{ msg.name }};
