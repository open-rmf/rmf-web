// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`matches snapshot 1`] = `
<NegotiationsPanel
  conflicts={
    Object {
      "0": Object {
        "participantIdsToNames": Object {
          "1": "tinyrobot1",
          "2": "tinyrobot2",
        },
        "participantIdsToStatus": Object {
          "1": Object {
            "base": Object {
              "defunct": false,
              "forfeited": false,
              "rejected": true,
              "sequence": Array [
                1,
              ],
            },
            "hasTerminal": true,
            "terminal": Object {
              "defunct": false,
              "forfeited": false,
              "rejected": false,
              "sequence": Array [
                2,
                1,
              ],
            },
          },
          "2": Object {
            "base": Object {
              "defunct": false,
              "forfeited": true,
              "rejected": false,
              "sequence": Array [
                2,
              ],
            },
            "hasTerminal": false,
            "terminal": Object {
              "defunct": true,
              "forfeited": false,
              "rejected": false,
              "sequence": Array [
                1,
                2,
              ],
            },
          },
        },
        "resolved": 1,
      },
    }
  }
>
  <WithStyles(ForwardRef(Typography))
    component="span"
    variant="body1"
  >
    <ForwardRef(Typography)
      classes={
        Object {
          "alignCenter": "MuiTypography-alignCenter",
          "alignJustify": "MuiTypography-alignJustify",
          "alignLeft": "MuiTypography-alignLeft",
          "alignRight": "MuiTypography-alignRight",
          "body1": "MuiTypography-body1",
          "body2": "MuiTypography-body2",
          "button": "MuiTypography-button",
          "caption": "MuiTypography-caption",
          "colorError": "MuiTypography-colorError",
          "colorInherit": "MuiTypography-colorInherit",
          "colorPrimary": "MuiTypography-colorPrimary",
          "colorSecondary": "MuiTypography-colorSecondary",
          "colorTextPrimary": "MuiTypography-colorTextPrimary",
          "colorTextSecondary": "MuiTypography-colorTextSecondary",
          "displayBlock": "MuiTypography-displayBlock",
          "displayInline": "MuiTypography-displayInline",
          "gutterBottom": "MuiTypography-gutterBottom",
          "h1": "MuiTypography-h1",
          "h2": "MuiTypography-h2",
          "h3": "MuiTypography-h3",
          "h4": "MuiTypography-h4",
          "h5": "MuiTypography-h5",
          "h6": "MuiTypography-h6",
          "noWrap": "MuiTypography-noWrap",
          "overline": "MuiTypography-overline",
          "paragraph": "MuiTypography-paragraph",
          "root": "MuiTypography-root",
          "srOnly": "MuiTypography-srOnly",
          "subtitle1": "MuiTypography-subtitle1",
          "subtitle2": "MuiTypography-subtitle2",
        }
      }
      component="span"
      variant="body1"
    >
      <span
        className="MuiTypography-root MuiTypography-body1"
      >
        <WithStyles(ForwardRef(TreeView))
          defaultCollapseIcon={<UNDEFINED />}
          defaultExpandIcon={<UNDEFINED />}
          defaultExpanded={
            Array [
              "root",
            ]
          }
          onNodeSelect={[Function]}
        >
          <ForwardRef(TreeView)
            classes={
              Object {
                "root": "MuiTreeView-root",
              }
            }
            defaultCollapseIcon={<UNDEFINED />}
            defaultExpandIcon={<UNDEFINED />}
            defaultExpanded={
              Array [
                "root",
              ]
            }
            onNodeSelect={[Function]}
          >
            <ul
              aria-multiselectable={false}
              className="MuiTreeView-root"
              role="tree"
            >
              <WithStyles(ForwardRef(TreeItem))
                classes={
                  Object {
                    "label": "makeStyles-finished-2",
                    "selected": "makeStyles-finished-2",
                  }
                }
                data-component="TreeItem"
                key="conflict0"
                label="Conflict #0, Participants: tinyrobot1, tinyrobot2"
                nodeId="conflict0"
              >
                <ForwardRef(TreeItem)
                  classes={
                    Object {
                      "content": "MuiTreeItem-content",
                      "expanded": "Mui-expanded",
                      "group": "MuiTreeItem-group",
                      "iconContainer": "MuiTreeItem-iconContainer",
                      "label": "MuiTreeItem-label makeStyles-finished-2",
                      "root": "MuiTreeItem-root",
                      "selected": "Mui-selected makeStyles-finished-2",
                    }
                  }
                  data-component="TreeItem"
                  label="Conflict #0, Participants: tinyrobot1, tinyrobot2"
                  nodeId="conflict0"
                >
                  <li
                    aria-expanded={false}
                    className="MuiTreeItem-root"
                    data-component="TreeItem"
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    role="treeitem"
                    tabIndex={0}
                  >
                    <div
                      className="MuiTreeItem-content"
                      onClick={[Function]}
                      onMouseDown={[Function]}
                    >
                      <div
                        className="MuiTreeItem-iconContainer"
                      >
                        <ForwardRef>
                          <WithStyles(ForwardRef(SvgIcon))>
                            <ForwardRef(SvgIcon)
                              classes={
                                Object {
                                  "colorAction": "MuiSvgIcon-colorAction",
                                  "colorDisabled": "MuiSvgIcon-colorDisabled",
                                  "colorError": "MuiSvgIcon-colorError",
                                  "colorPrimary": "MuiSvgIcon-colorPrimary",
                                  "colorSecondary": "MuiSvgIcon-colorSecondary",
                                  "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                  "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                  "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                  "root": "MuiSvgIcon-root",
                                }
                              }
                            >
                              <svg
                                aria-hidden={true}
                                className="MuiSvgIcon-root"
                                focusable="false"
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                />
                              </svg>
                            </ForwardRef(SvgIcon)>
                          </WithStyles(ForwardRef(SvgIcon))>
                        </ForwardRef>
                      </div>
                      <WithStyles(ForwardRef(Typography))
                        className="MuiTreeItem-label makeStyles-finished-2"
                        component="div"
                      >
                        <ForwardRef(Typography)
                          className="MuiTreeItem-label makeStyles-finished-2"
                          classes={
                            Object {
                              "alignCenter": "MuiTypography-alignCenter",
                              "alignJustify": "MuiTypography-alignJustify",
                              "alignLeft": "MuiTypography-alignLeft",
                              "alignRight": "MuiTypography-alignRight",
                              "body1": "MuiTypography-body1",
                              "body2": "MuiTypography-body2",
                              "button": "MuiTypography-button",
                              "caption": "MuiTypography-caption",
                              "colorError": "MuiTypography-colorError",
                              "colorInherit": "MuiTypography-colorInherit",
                              "colorPrimary": "MuiTypography-colorPrimary",
                              "colorSecondary": "MuiTypography-colorSecondary",
                              "colorTextPrimary": "MuiTypography-colorTextPrimary",
                              "colorTextSecondary": "MuiTypography-colorTextSecondary",
                              "displayBlock": "MuiTypography-displayBlock",
                              "displayInline": "MuiTypography-displayInline",
                              "gutterBottom": "MuiTypography-gutterBottom",
                              "h1": "MuiTypography-h1",
                              "h2": "MuiTypography-h2",
                              "h3": "MuiTypography-h3",
                              "h4": "MuiTypography-h4",
                              "h5": "MuiTypography-h5",
                              "h6": "MuiTypography-h6",
                              "noWrap": "MuiTypography-noWrap",
                              "overline": "MuiTypography-overline",
                              "paragraph": "MuiTypography-paragraph",
                              "root": "MuiTypography-root",
                              "srOnly": "MuiTypography-srOnly",
                              "subtitle1": "MuiTypography-subtitle1",
                              "subtitle2": "MuiTypography-subtitle2",
                            }
                          }
                          component="div"
                        >
                          <div
                            className="MuiTypography-root MuiTreeItem-label makeStyles-finished-2 MuiTypography-body1"
                          >
                            Conflict #0, Participants: tinyrobot1, tinyrobot2
                          </div>
                        </ForwardRef(Typography)>
                      </WithStyles(ForwardRef(Typography))>
                    </div>
                    <WithStyles(ForwardRef(Collapse))
                      className="MuiTreeItem-group"
                      component="ul"
                      in={false}
                      role="group"
                      unmountOnExit={true}
                    >
                      <ForwardRef(Collapse)
                        className="MuiTreeItem-group"
                        classes={
                          Object {
                            "container": "MuiCollapse-container",
                            "entered": "MuiCollapse-entered",
                            "hidden": "MuiCollapse-hidden",
                            "wrapper": "MuiCollapse-wrapper",
                            "wrapperInner": "MuiCollapse-wrapperInner",
                          }
                        }
                        component="ul"
                        in={false}
                        role="group"
                        unmountOnExit={true}
                      >
                        <Transition
                          addEndListener={[Function]}
                          appear={false}
                          enter={true}
                          exit={true}
                          in={false}
                          mountOnEnter={false}
                          onEnter={[Function]}
                          onEntered={[Function]}
                          onEntering={[Function]}
                          onExit={[Function]}
                          onExited={[Function]}
                          onExiting={[Function]}
                          role="group"
                          timeout={300}
                          unmountOnExit={true}
                        />
                      </ForwardRef(Collapse)>
                    </WithStyles(ForwardRef(Collapse))>
                  </li>
                </ForwardRef(TreeItem)>
              </WithStyles(ForwardRef(TreeItem))>
            </ul>
          </ForwardRef(TreeView)>
        </WithStyles(ForwardRef(TreeView))>
      </span>
    </ForwardRef(Typography)>
  </WithStyles(ForwardRef(Typography))>
</NegotiationsPanel>
`;
