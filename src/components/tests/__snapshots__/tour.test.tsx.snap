// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Dashboard Tour renders commands panel step (9/12) 1`] = `
<Memo()
  tourProps={
    Object {
      "OmniPanelViewIndex": Object {
        "0": "MainMenu",
        "1": "Doors",
        "2": "Lifts",
        "3": "Robots",
        "4": "Dispensers",
        "5": "Commands",
        "6": "Negotiations",
        "Commands": 5,
        "Dispensers": 4,
        "Doors": 1,
        "Lifts": 2,
        "MainMenu": 0,
        "Negotiations": 6,
        "Robots": 3,
      },
      "doorSpotlight": Object {
        "value": "main_door",
      },
      "setDoorSpotlight": [MockFunction],
      "setTourSettingsAndOmniPanel": [MockFunction] {
        "calls": Array [
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
      "setTourShowOmniPanel": [MockFunction] {
        "calls": Array [
          Array [
            0,
          ],
          Array [
            0,
          ],
          Array [
            0,
          ],
          Array [
            1,
          ],
          Array [
            0,
          ],
          Array [
            1,
          ],
          Array [
            0,
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
      "setTourState": [MockFunction],
      "tourState": true,
    }
  }
>
  <Tour
    accentColor="#3f51b5"
    badgeContent={[Function]}
    closeWithMask={false}
    disableFocusLock={false}
    disableInteraction={false}
    disableKeyboardNavigation={
      Array [
        "right",
        "left",
      ]
    }
    isOpen={true}
    maskSpace={10}
    onRequestClose={[Function]}
    rounded={5}
    scrollDuration={1}
    showButtons={false}
    showCloseButton={true}
    showNavigation={false}
    showNavigationNumber={false}
    showNumber={true}
    startAt={0}
    steps={
      Array [
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "[class=\\"leaflet-control-zoom leaflet-bar leaflet-control\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "[class= \\"leaflet-control-layers leaflet-control\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "[class=\\"leaflet-image-layer leaflet-zoom-animated\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[id=\\"toggle-omnipanel-btn\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-component=\\"MainMenu\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-item=\\"Doors\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-name=\\"main_door\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-item= \\"Commands\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-component=\\"LoopForm\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[id=\\"show-settings-btn\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": ".MuiDrawer-paper",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
      ]
    }
    updateDelay={1}
  >
    <Portal>
      <Portal
        containerInfo={
          <div
            id="___reactour"
          >
            <div
              class="sc-dnqmqq kWwJhA"
            >
              <svg
                height="768"
                width="1024"
                xmlns="http://www.w3.org/2000/svg"
              >
                <defs>
                  <mask
                    id="mask-main"
                  >
                    <rect
                      fill="white"
                      height="768"
                      width="1024"
                      x="0"
                      y="0"
                    />
                    <rect
                      fill="black"
                      height="20"
                      width="20"
                      x="502"
                      y="768"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="501"
                      y="767"
                    />
                    <circle
                      cx="507"
                      cy="773"
                      fill="black"
                      r="5"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="518"
                      y="767"
                    />
                    <circle
                      cx="517"
                      cy="773"
                      fill="black"
                      r="5"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="501"
                      y="784"
                    />
                    <circle
                      cx="507"
                      cy="783"
                      fill="black"
                      r="5"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="518"
                      y="784"
                    />
                    <circle
                      cx="517"
                      cy="783"
                      fill="black "
                      r="5"
                    />
                  </mask>
                  <clippath
                    id="clip-path"
                  >
                    <rect
                      height="768"
                      width="1024"
                      x="0"
                      y="0"
                    />
                    <rect
                      height="20"
                      width="502"
                      x="0"
                      y="768"
                    />
                    <rect
                      height="20"
                      width="522"
                      x="522"
                      y="768"
                    />
                    <rect
                      height="0"
                      width="1024"
                      x="0"
                      y="788"
                    />
                  </clippath>
                </defs>
                <rect
                  fill="currentColor"
                  height="768"
                  mask="url(#mask-main)"
                  width="1024"
                  x="0"
                  y="0"
                />
                <rect
                  clip-path="url(#clip-path)"
                  fill="currentColor"
                  height="768"
                  pointer-events="auto"
                  width="1024"
                  x="0"
                  y="0"
                />
                <rect
                  class="reactour__mask--disable-interaction undefined"
                  display="none"
                  fill="transparent"
                  height="20"
                  pointer-events="auto"
                  width="20"
                  x="502"
                  y="768"
                />
              </svg>
            </div>
            <div
              data-focus-guard="true"
              style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
              tabindex="0"
            />
            <div
              data-focus-guard="true"
              style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
              tabindex="1"
            />
            <div
              data-focus-lock-disabled="false"
            >
              <div
                class="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                role="dialog"
                style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                tabindex="-1"
              >
                <div
                  class="MuiBox-root MuiBox-root-28"
                  id="stepNode"
                >
                  <h6
                    class="MuiTypography-root MuiTypography-h6"
                  >
                    The Commands Panel allows you to send different types of requests that will be handled by RoMi.
                  </h6>
                  <div
                    class="MuiBox-root MuiBox-root-30"
                  >
                    <button
                      class="MuiButtonBase-root MuiIconButton-root"
                      id="tour-back-btn"
                      tabindex="0"
                      type="button"
                    >
                      <span
                        class="MuiIconButton-label"
                      >
                        <svg
                          aria-hidden="true"
                          class="MuiSvgIcon-root makeStyles-navigation-29"
                          focusable="false"
                          viewBox="0 0 24 24"
                        >
                          <path
                            d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                          />
                        </svg>
                      </span>
                      <span
                        class="MuiTouchRipple-root"
                      />
                    </button>
                    <button
                      class="MuiButtonBase-root MuiIconButton-root"
                      id="tour-next-btn"
                      tabindex="0"
                      type="button"
                    >
                      <span
                        class="MuiIconButton-label"
                      >
                        <svg
                          aria-hidden="true"
                          class="MuiSvgIcon-root makeStyles-navigation-29"
                          focusable="false"
                          viewBox="0 0 24 24"
                        >
                          <path
                            d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                          />
                        </svg>
                      </span>
                      <span
                        class="MuiTouchRipple-root"
                      />
                    </button>
                  </div>
                </div>
                <span
                  class="sc-EHOje doXVdu"
                  data-tour-elem="badge"
                >
                  9 of 12
                </span>
                <button
                  class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                >
                  <svg
                    viewBox="0 0 9.1 9.1"
                  >
                    <path
                      d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                      fill="currentColor"
                    />
                  </svg>
                </button>
              </div>
            </div>
            <div
              data-focus-guard="true"
              style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
              tabindex="0"
            />
          </div>
        }
      >
        <GlobalStyleComponent />
        <ReactourResizeObserver
          refresh={[Function]}
          step={
            Object {
              "action": undefined,
              "content": [Function],
              "selector": "[data-name=\\"main_door\\"]",
              "style": Object {
                "backgroundColor": "#7986cb",
                "borderRadius": "5px",
                "color": "#fff",
              },
            }
          }
        />
        <ReactourMutationObserver
          refresh={[Function]}
          step={
            Object {
              "action": undefined,
              "content": [Function],
              "selector": "[data-name=\\"main_door\\"]",
              "style": Object {
                "backgroundColor": "#7986cb",
                "borderRadius": "5px",
                "color": "#fff",
              },
            }
          }
        />
        <SvgMask
          disableInteraction={false}
          disableInteractionClassName="reactour__mask--disable-interaction undefined"
          forwardRef={[Function]}
          onClick={[Function]}
          padding={10}
          rounded={5}
          targetHeight={0}
          targetLeft={512}
          targetTop={778}
          targetWidth={0}
          windowHeight={768}
          windowWidth={1024}
        >
          <styled.div
            onClick={[Function]}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-dnqmqq",
                    "isStatic": false,
                    "lastClassName": "kWwJhA",
                    "rules": Array [
                      "
  opacity: ",
                      [Function],
                      ";
  color: ",
                      [Function],
                      ";
  width: 100%;
  left: 0;
  top: 0;
  height: 100%;
  position: fixed;
  z-index: 99999;
  pointer-events: none;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-dnqmqq",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
            >
              <div
                className="sc-dnqmqq kWwJhA"
                onClick={[Function]}
              >
                <svg
                  height={768}
                  width={1024}
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <defs>
                    <mask
                      id="mask-main"
                    >
                      <rect
                        fill="white"
                        height={768}
                        width={1024}
                        x={0}
                        y={0}
                      />
                      <rect
                        fill="black"
                        height={20}
                        width={20}
                        x={502}
                        y={768}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={501}
                        y={767}
                      />
                      <circle
                        cx={507}
                        cy={773}
                        fill="black"
                        r={5}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={518}
                        y={767}
                      />
                      <circle
                        cx={517}
                        cy={773}
                        fill="black"
                        r={5}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={501}
                        y={784}
                      />
                      <circle
                        cx={507}
                        cy={783}
                        fill="black"
                        r={5}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={518}
                        y={784}
                      />
                      <circle
                        cx={517}
                        cy={783}
                        fill="black "
                        r={5}
                      />
                    </mask>
                    <clipPath
                      id="clip-path"
                    >
                      <rect
                        height={768}
                        width={1024}
                        x={0}
                        y={0}
                      />
                      <rect
                        height={20}
                        width={502}
                        x={0}
                        y={768}
                      />
                      <rect
                        height={20}
                        width={522}
                        x={522}
                        y={768}
                      />
                      <rect
                        height={0}
                        width={1024}
                        x={0}
                        y={788}
                      />
                    </clipPath>
                  </defs>
                  <rect
                    fill="currentColor"
                    height={768}
                    mask="url(#mask-main)"
                    width={1024}
                    x={0}
                    y={0}
                  />
                  <rect
                    clipPath="url(#clip-path)"
                    fill="currentColor"
                    height={768}
                    pointerEvents="auto"
                    width={1024}
                    x={0}
                    y={0}
                  />
                  <rect
                    className="reactour__mask--disable-interaction undefined"
                    display="none"
                    fill="transparent"
                    height={20}
                    pointerEvents="auto"
                    width={20}
                    x={502}
                    y={768}
                  />
                </svg>
              </div>
            </StyledComponent>
          </styled.div>
        </SvgMask>
        <ForwardRef
          disabled={false}
        >
          <ForwardRef
            as="div"
            autoFocus={true}
            disabled={false}
            lockProps={Object {}}
            noFocusGuards={false}
            persistentFocus={false}
            returnFocus={false}
            sideCar={[Function]}
          >
            <div
              data-focus-guard={true}
              key="guard-first"
              style={
                Object {
                  "height": "0px",
                  "left": "1px",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "fixed",
                  "top": "1px",
                  "width": "1px",
                }
              }
              tabIndex={0}
            />
            <div
              data-focus-guard={true}
              key="guard-nearest"
              style={
                Object {
                  "height": "0px",
                  "left": "1px",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "fixed",
                  "top": "1px",
                  "width": "1px",
                }
              }
              tabIndex={1}
            />
            <SideEffect(FocusWatcher)
              autoFocus={true}
              disabled={false}
              id={Object {}}
              observed={
                <div
                  data-focus-lock-disabled="false"
                >
                  <div
                    class="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                    role="dialog"
                    style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                    tabindex="-1"
                  >
                    <div
                      class="MuiBox-root MuiBox-root-28"
                      id="stepNode"
                    >
                      <h6
                        class="MuiTypography-root MuiTypography-h6"
                      >
                        The Commands Panel allows you to send different types of requests that will be handled by RoMi.
                      </h6>
                      <div
                        class="MuiBox-root MuiBox-root-30"
                      >
                        <button
                          class="MuiButtonBase-root MuiIconButton-root"
                          id="tour-back-btn"
                          tabindex="0"
                          type="button"
                        >
                          <span
                            class="MuiIconButton-label"
                          >
                            <svg
                              aria-hidden="true"
                              class="MuiSvgIcon-root makeStyles-navigation-29"
                              focusable="false"
                              viewBox="0 0 24 24"
                            >
                              <path
                                d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                              />
                            </svg>
                          </span>
                          <span
                            class="MuiTouchRipple-root"
                          />
                        </button>
                        <button
                          class="MuiButtonBase-root MuiIconButton-root"
                          id="tour-next-btn"
                          tabindex="0"
                          type="button"
                        >
                          <span
                            class="MuiIconButton-label"
                          >
                            <svg
                              aria-hidden="true"
                              class="MuiSvgIcon-root makeStyles-navigation-29"
                              focusable="false"
                              viewBox="0 0 24 24"
                            >
                              <path
                                d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                              />
                            </svg>
                          </span>
                          <span
                            class="MuiTouchRipple-root"
                          />
                        </button>
                      </div>
                    </div>
                    <span
                      class="sc-EHOje doXVdu"
                      data-tour-elem="badge"
                    >
                      9 of 12
                    </span>
                    <button
                      class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                    >
                      <svg
                        viewBox="0 0 9.1 9.1"
                      >
                        <path
                          d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                          fill="currentColor"
                        />
                      </svg>
                    </button>
                  </div>
                </div>
              }
              onActivation={[Function]}
              onDeactivation={[Function]}
              persistentFocus={false}
              returnFocus={[Function]}
              shards={Array []}
              sideCar={
                Object {
                  "assignMedium": [Function],
                  "assignSyncMedium": [Function],
                  "options": Object {
                    "async": true,
                    "ssr": false,
                  },
                  "read": [Function],
                  "useMedium": [Function],
                }
              }
            >
              <FocusWatcher
                autoFocus={true}
                disabled={false}
                id={Object {}}
                observed={
                  <div
                    data-focus-lock-disabled="false"
                  >
                    <div
                      class="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                      role="dialog"
                      style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                      tabindex="-1"
                    >
                      <div
                        class="MuiBox-root MuiBox-root-28"
                        id="stepNode"
                      >
                        <h6
                          class="MuiTypography-root MuiTypography-h6"
                        >
                          The Commands Panel allows you to send different types of requests that will be handled by RoMi.
                        </h6>
                        <div
                          class="MuiBox-root MuiBox-root-30"
                        >
                          <button
                            class="MuiButtonBase-root MuiIconButton-root"
                            id="tour-back-btn"
                            tabindex="0"
                            type="button"
                          >
                            <span
                              class="MuiIconButton-label"
                            >
                              <svg
                                aria-hidden="true"
                                class="MuiSvgIcon-root makeStyles-navigation-29"
                                focusable="false"
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                />
                              </svg>
                            </span>
                            <span
                              class="MuiTouchRipple-root"
                            />
                          </button>
                          <button
                            class="MuiButtonBase-root MuiIconButton-root"
                            id="tour-next-btn"
                            tabindex="0"
                            type="button"
                          >
                            <span
                              class="MuiIconButton-label"
                            >
                              <svg
                                aria-hidden="true"
                                class="MuiSvgIcon-root makeStyles-navigation-29"
                                focusable="false"
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                />
                              </svg>
                            </span>
                            <span
                              class="MuiTouchRipple-root"
                            />
                          </button>
                        </div>
                      </div>
                      <span
                        class="sc-EHOje doXVdu"
                        data-tour-elem="badge"
                      >
                        9 of 12
                      </span>
                      <button
                        class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                      >
                        <svg
                          viewBox="0 0 9.1 9.1"
                        >
                          <path
                            d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                            fill="currentColor"
                          />
                        </svg>
                      </button>
                    </div>
                  </div>
                }
                onActivation={[Function]}
                onDeactivation={[Function]}
                persistentFocus={false}
                returnFocus={[Function]}
                shards={Array []}
                sideCar={
                  Object {
                    "assignMedium": [Function],
                    "assignSyncMedium": [Function],
                    "options": Object {
                      "async": true,
                      "ssr": false,
                    },
                    "read": [Function],
                    "useMedium": [Function],
                  }
                }
              />
            </SideEffect(FocusWatcher)>
            <div
              data-focus-lock-disabled={false}
              onBlur={[Function]}
              onFocus={[Function]}
            >
              <styled.div
                accentColor="#3f51b5"
                className="reactour__helper reactour__helper--is-open"
                current={7}
                defaultStyles={true}
                helperHeight={0}
                helperPosition="center"
                helperWidth={0}
                padding={10}
                role="dialog"
                rounded={5}
                style={
                  Object {
                    "backgroundColor": "#7986cb",
                    "borderRadius": "5px",
                    "color": "#fff",
                  }
                }
                tabIndex={-1}
                targetBottom={393}
                targetHeight={0}
                targetLeft={512}
                targetRight={521}
                targetTop={778}
                targetWidth={0}
                windowHeight={768}
                windowWidth={1024}
              >
                <StyledComponent
                  accentColor="#3f51b5"
                  className="reactour__helper reactour__helper--is-open"
                  current={7}
                  defaultStyles={true}
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-ifAKCX",
                        "isStatic": false,
                        "lastClassName": "jBzNhS",
                        "rules": Array [
                          "
  --reactour-accent: ",
                          [Function],
                          ";
  ",
                          [Function],
                          "
  position: fixed;
  transition: transform 0.3s;
  top: 0;
  left: 0;
  z-index: 1000000;

  transform: ",
                          [Function],
                          ";
",
                        ],
                      },
                      "displayName": "styled.div",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-ifAKCX",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={
                    Object {
                      "current": <div
                        class="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                        role="dialog"
                        style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                        tabindex="-1"
                      >
                        <div
                          class="MuiBox-root MuiBox-root-28"
                          id="stepNode"
                        >
                          <h6
                            class="MuiTypography-root MuiTypography-h6"
                          >
                            The Commands Panel allows you to send different types of requests that will be handled by RoMi.
                          </h6>
                          <div
                            class="MuiBox-root MuiBox-root-30"
                          >
                            <button
                              class="MuiButtonBase-root MuiIconButton-root"
                              id="tour-back-btn"
                              tabindex="0"
                              type="button"
                            >
                              <span
                                class="MuiIconButton-label"
                              >
                                <svg
                                  aria-hidden="true"
                                  class="MuiSvgIcon-root makeStyles-navigation-29"
                                  focusable="false"
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                  />
                                </svg>
                              </span>
                              <span
                                class="MuiTouchRipple-root"
                              />
                            </button>
                            <button
                              class="MuiButtonBase-root MuiIconButton-root"
                              id="tour-next-btn"
                              tabindex="0"
                              type="button"
                            >
                              <span
                                class="MuiIconButton-label"
                              >
                                <svg
                                  aria-hidden="true"
                                  class="MuiSvgIcon-root makeStyles-navigation-29"
                                  focusable="false"
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                  />
                                </svg>
                              </span>
                              <span
                                class="MuiTouchRipple-root"
                              />
                            </button>
                          </div>
                        </div>
                        <span
                          class="sc-EHOje doXVdu"
                          data-tour-elem="badge"
                        >
                          9 of 12
                        </span>
                        <button
                          class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                        >
                          <svg
                            viewBox="0 0 9.1 9.1"
                          >
                            <path
                              d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                              fill="currentColor"
                            />
                          </svg>
                        </button>
                      </div>,
                    }
                  }
                  helperHeight={0}
                  helperPosition="center"
                  helperWidth={0}
                  padding={10}
                  role="dialog"
                  rounded={5}
                  style={
                    Object {
                      "backgroundColor": "#7986cb",
                      "borderRadius": "5px",
                      "color": "#fff",
                    }
                  }
                  tabIndex={-1}
                  targetBottom={393}
                  targetHeight={0}
                  targetLeft={512}
                  targetRight={521}
                  targetTop={778}
                  targetWidth={0}
                  windowHeight={768}
                  windowWidth={1024}
                >
                  <div
                    className="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                    role="dialog"
                    style={
                      Object {
                        "backgroundColor": "#7986cb",
                        "borderRadius": "5px",
                        "color": "#fff",
                      }
                    }
                    tabIndex={-1}
                  >
                    <Styled(MuiBox)
                      id="stepNode"
                    >
                      <div
                        className="MuiBox-root MuiBox-root-28"
                        id="stepNode"
                      >
                        <WithStyles(ForwardRef(Typography))
                          variant="h6"
                        >
                          <ForwardRef(Typography)
                            classes={
                              Object {
                                "alignCenter": "MuiTypography-alignCenter",
                                "alignJustify": "MuiTypography-alignJustify",
                                "alignLeft": "MuiTypography-alignLeft",
                                "alignRight": "MuiTypography-alignRight",
                                "body1": "MuiTypography-body1",
                                "body2": "MuiTypography-body2",
                                "button": "MuiTypography-button",
                                "caption": "MuiTypography-caption",
                                "colorError": "MuiTypography-colorError",
                                "colorInherit": "MuiTypography-colorInherit",
                                "colorPrimary": "MuiTypography-colorPrimary",
                                "colorSecondary": "MuiTypography-colorSecondary",
                                "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                "displayBlock": "MuiTypography-displayBlock",
                                "displayInline": "MuiTypography-displayInline",
                                "gutterBottom": "MuiTypography-gutterBottom",
                                "h1": "MuiTypography-h1",
                                "h2": "MuiTypography-h2",
                                "h3": "MuiTypography-h3",
                                "h4": "MuiTypography-h4",
                                "h5": "MuiTypography-h5",
                                "h6": "MuiTypography-h6",
                                "noWrap": "MuiTypography-noWrap",
                                "overline": "MuiTypography-overline",
                                "paragraph": "MuiTypography-paragraph",
                                "root": "MuiTypography-root",
                                "srOnly": "MuiTypography-srOnly",
                                "subtitle1": "MuiTypography-subtitle1",
                                "subtitle2": "MuiTypography-subtitle2",
                              }
                            }
                            variant="h6"
                          >
                            <h6
                              className="MuiTypography-root MuiTypography-h6"
                            >
                              Here is an example of what you will see when a door tab is expanded
                            </h6>
                          </ForwardRef(Typography)>
                        </WithStyles(ForwardRef(Typography))>
                        <Memo()
                          goTo={[Function]}
                          handleBackClick={[Function]}
                          handleNextClick={[Function]}
                          step={8}
                        >
                          <Styled(MuiBox)>
                            <div
                              className="MuiBox-root MuiBox-root-30"
                            >
                              <WithStyles(ForwardRef(IconButton))
                                id="tour-back-btn"
                                onClick={[Function]}
                              >
                                <ForwardRef(IconButton)
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit",
                                      "colorPrimary": "MuiIconButton-colorPrimary",
                                      "colorSecondary": "MuiIconButton-colorSecondary",
                                      "disabled": "Mui-disabled",
                                      "edgeEnd": "MuiIconButton-edgeEnd",
                                      "edgeStart": "MuiIconButton-edgeStart",
                                      "label": "MuiIconButton-label",
                                      "root": "MuiIconButton-root",
                                      "sizeSmall": "MuiIconButton-sizeSmall",
                                    }
                                  }
                                  id="tour-back-btn"
                                  onClick={[Function]}
                                >
                                  <WithStyles(ForwardRef(ButtonBase))
                                    centerRipple={true}
                                    className="MuiIconButton-root"
                                    disabled={false}
                                    focusRipple={true}
                                    id="tour-back-btn"
                                    onClick={[Function]}
                                  >
                                    <ForwardRef(ButtonBase)
                                      centerRipple={true}
                                      className="MuiIconButton-root"
                                      classes={
                                        Object {
                                          "disabled": "Mui-disabled",
                                          "focusVisible": "Mui-focusVisible",
                                          "root": "MuiButtonBase-root",
                                        }
                                      }
                                      disabled={false}
                                      focusRipple={true}
                                      id="tour-back-btn"
                                      onClick={[Function]}
                                    >
                                      <button
                                        className="MuiButtonBase-root MuiIconButton-root"
                                        disabled={false}
                                        id="tour-back-btn"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragLeave={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex={0}
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label"
                                        >
                                          <ForwardRef
                                            className="makeStyles-navigation-29"
                                          >
                                            <WithStyles(ForwardRef(SvgIcon))
                                              className="makeStyles-navigation-29"
                                            >
                                              <ForwardRef(SvgIcon)
                                                className="makeStyles-navigation-29"
                                                classes={
                                                  Object {
                                                    "colorAction": "MuiSvgIcon-colorAction",
                                                    "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                    "colorError": "MuiSvgIcon-colorError",
                                                    "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                    "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                    "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                    "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                    "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                    "root": "MuiSvgIcon-root",
                                                  }
                                                }
                                              >
                                                <svg
                                                  aria-hidden={true}
                                                  className="MuiSvgIcon-root makeStyles-navigation-29"
                                                  focusable="false"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <path
                                                    d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                                  />
                                                </svg>
                                              </ForwardRef(SvgIcon)>
                                            </WithStyles(ForwardRef(SvgIcon))>
                                          </ForwardRef>
                                        </span>
                                        <WithStyles(memo)
                                          center={true}
                                        >
                                          <ForwardRef(TouchRipple)
                                            center={true}
                                            classes={
                                              Object {
                                                "child": "MuiTouchRipple-child",
                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                "ripple": "MuiTouchRipple-ripple",
                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                "root": "MuiTouchRipple-root",
                                              }
                                            }
                                          >
                                            <span
                                              className="MuiTouchRipple-root"
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                component={null}
                                                exit={true}
                                              />
                                            </span>
                                          </ForwardRef(TouchRipple)>
                                        </WithStyles(memo)>
                                      </button>
                                    </ForwardRef(ButtonBase)>
                                  </WithStyles(ForwardRef(ButtonBase))>
                                </ForwardRef(IconButton)>
                              </WithStyles(ForwardRef(IconButton))>
                              <WithStyles(ForwardRef(IconButton))
                                id="tour-next-btn"
                                onClick={[Function]}
                              >
                                <ForwardRef(IconButton)
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit",
                                      "colorPrimary": "MuiIconButton-colorPrimary",
                                      "colorSecondary": "MuiIconButton-colorSecondary",
                                      "disabled": "Mui-disabled",
                                      "edgeEnd": "MuiIconButton-edgeEnd",
                                      "edgeStart": "MuiIconButton-edgeStart",
                                      "label": "MuiIconButton-label",
                                      "root": "MuiIconButton-root",
                                      "sizeSmall": "MuiIconButton-sizeSmall",
                                    }
                                  }
                                  id="tour-next-btn"
                                  onClick={[Function]}
                                >
                                  <WithStyles(ForwardRef(ButtonBase))
                                    centerRipple={true}
                                    className="MuiIconButton-root"
                                    disabled={false}
                                    focusRipple={true}
                                    id="tour-next-btn"
                                    onClick={[Function]}
                                  >
                                    <ForwardRef(ButtonBase)
                                      centerRipple={true}
                                      className="MuiIconButton-root"
                                      classes={
                                        Object {
                                          "disabled": "Mui-disabled",
                                          "focusVisible": "Mui-focusVisible",
                                          "root": "MuiButtonBase-root",
                                        }
                                      }
                                      disabled={false}
                                      focusRipple={true}
                                      id="tour-next-btn"
                                      onClick={[Function]}
                                    >
                                      <button
                                        className="MuiButtonBase-root MuiIconButton-root"
                                        disabled={false}
                                        id="tour-next-btn"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragLeave={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex={0}
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label"
                                        >
                                          <ForwardRef
                                            className="makeStyles-navigation-29"
                                          >
                                            <WithStyles(ForwardRef(SvgIcon))
                                              className="makeStyles-navigation-29"
                                            >
                                              <ForwardRef(SvgIcon)
                                                className="makeStyles-navigation-29"
                                                classes={
                                                  Object {
                                                    "colorAction": "MuiSvgIcon-colorAction",
                                                    "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                    "colorError": "MuiSvgIcon-colorError",
                                                    "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                    "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                    "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                    "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                    "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                    "root": "MuiSvgIcon-root",
                                                  }
                                                }
                                              >
                                                <svg
                                                  aria-hidden={true}
                                                  className="MuiSvgIcon-root makeStyles-navigation-29"
                                                  focusable="false"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <path
                                                    d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                                  />
                                                </svg>
                                              </ForwardRef(SvgIcon)>
                                            </WithStyles(ForwardRef(SvgIcon))>
                                          </ForwardRef>
                                        </span>
                                        <WithStyles(memo)
                                          center={true}
                                        >
                                          <ForwardRef(TouchRipple)
                                            center={true}
                                            classes={
                                              Object {
                                                "child": "MuiTouchRipple-child",
                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                "ripple": "MuiTouchRipple-ripple",
                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                "root": "MuiTouchRipple-root",
                                              }
                                            }
                                          >
                                            <span
                                              className="MuiTouchRipple-root"
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                component={null}
                                                exit={true}
                                              />
                                            </span>
                                          </ForwardRef(TouchRipple)>
                                        </WithStyles(memo)>
                                      </button>
                                    </ForwardRef(ButtonBase)>
                                  </WithStyles(ForwardRef(ButtonBase))>
                                </ForwardRef(IconButton)>
                              </WithStyles(ForwardRef(IconButton))>
                            </div>
                          </Styled(MuiBox)>
                        </Memo()>
                      </div>
                    </Styled(MuiBox)>
                    <styled.span
                      accentColor="#3f51b5"
                      data-tour-elem="badge"
                    >
                      <StyledComponent
                        accentColor="#3f51b5"
                        data-tour-elem="badge"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-EHOje",
                              "isStatic": false,
                              "lastClassName": "doXVdu",
                              "rules": Array [
                                "
  position: absolute;
  font-family: monospace;
  background: var(--reactour-accent);
  background: ",
                                [Function],
                                ";
  height: 1.875em;
  line-height: 2;
  padding-left: 0.8125em;
  padding-right: 0.8125em;
  font-size: 1em;
  border-radius: 1.625em;
  color: white;
  text-align: center;
  box-shadow: 0 0.25em 0.5em rgba(0, 0, 0, 0.3);
  top: -0.8125em;
  left: -0.8125em;
",
                              ],
                            },
                            "displayName": "styled.span",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-EHOje",
                            "target": "span",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <span
                          className="sc-EHOje doXVdu"
                          data-tour-elem="badge"
                        >
                          8 of 12
                        </span>
                      </StyledComponent>
                    </styled.span>
                    <Styled(Close)
                      className="reactour__close"
                      onClick={[Function]}
                    >
                      <StyledComponent
                        className="reactour__close"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-bxivhb",
                              "isStatic": false,
                              "lastClassName": "eTpeTG",
                              "rules": Array [
                                "
  position: absolute;
  top: 22px;
  right: 22px;
  width: 9px;
  height: 9px;
  color: #5e5e5e;
  &:hover {
    color: #000;
  }
",
                              ],
                            },
                            "displayName": "Styled(Close)",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-bxivhb",
                            "target": [Function],
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        onClick={[Function]}
                      >
                        <Close
                          className="sc-bxivhb eTpeTG reactour__close"
                          onClick={[Function]}
                        >
                          <styled.button
                            className="sc-bxivhb eTpeTG reactour__close"
                            onClick={[Function]}
                          >
                            <StyledComponent
                              className="sc-bxivhb eTpeTG reactour__close"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-bdVaJa",
                                    "isStatic": false,
                                    "lastClassName": "cYQqRL",
                                    "rules": Array [
                                      "
  display: block;
  padding: 0;
  border: 0;
  background: none;
  font-size: 0;
  cursor: ",
                                      [Function],
                                      ";
",
                                    ],
                                  },
                                  "displayName": "styled.button",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-bdVaJa",
                                  "target": "button",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              onClick={[Function]}
                            >
                              <button
                                className="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                                onClick={[Function]}
                              >
                                <svg
                                  viewBox="0 0 9.1 9.1"
                                >
                                  <path
                                    d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                                    fill="currentColor"
                                  />
                                </svg>
                              </button>
                            </StyledComponent>
                          </styled.button>
                        </Close>
                      </StyledComponent>
                    </Styled(Close)>
                  </div>
                </StyledComponent>
              </styled.div>
            </div>
            <div
              data-focus-guard={true}
              style={
                Object {
                  "height": "0px",
                  "left": "1px",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "fixed",
                  "top": "1px",
                  "width": "1px",
                }
              }
              tabIndex={0}
            />
          </ForwardRef>
        </ForwardRef>
      </Portal>
    </Portal>
  </Tour>
</Memo()>
`;

exports[`Dashboard Tour renders door panel step (7/12) 1`] = `
<Memo()
  tourProps={
    Object {
      "OmniPanelViewIndex": Object {
        "0": "MainMenu",
        "1": "Doors",
        "2": "Lifts",
        "3": "Robots",
        "4": "Dispensers",
        "5": "Commands",
        "6": "Negotiations",
        "Commands": 5,
        "Dispensers": 4,
        "Doors": 1,
        "Lifts": 2,
        "MainMenu": 0,
        "Negotiations": 6,
        "Robots": 3,
      },
      "doorSpotlight": Object {
        "value": "main_door",
      },
      "setDoorSpotlight": [MockFunction],
      "setTourSettingsAndOmniPanel": [MockFunction] {
        "calls": Array [
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
      "setTourShowOmniPanel": [MockFunction] {
        "calls": Array [
          Array [
            0,
          ],
          Array [
            0,
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
      "setTourState": [MockFunction],
      "tourState": true,
    }
  }
>
  <Tour
    accentColor="#3f51b5"
    badgeContent={[Function]}
    closeWithMask={false}
    disableFocusLock={false}
    disableInteraction={false}
    disableKeyboardNavigation={
      Array [
        "right",
        "left",
      ]
    }
    isOpen={true}
    maskSpace={10}
    onRequestClose={[Function]}
    rounded={5}
    scrollDuration={1}
    showButtons={false}
    showCloseButton={true}
    showNavigation={false}
    showNavigationNumber={false}
    showNumber={true}
    startAt={0}
    steps={
      Array [
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "[class=\\"leaflet-control-zoom leaflet-bar leaflet-control\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "[class= \\"leaflet-control-layers leaflet-control\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "[class=\\"leaflet-image-layer leaflet-zoom-animated\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[id=\\"toggle-omnipanel-btn\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-component=\\"MainMenu\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-item=\\"Doors\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-name=\\"main_door\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-item= \\"Commands\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-component=\\"LoopForm\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[id=\\"show-settings-btn\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": ".MuiDrawer-paper",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
      ]
    }
    updateDelay={1}
  >
    <Portal>
      <Portal
        containerInfo={
          <div
            id="___reactour"
          >
            <div
              class="sc-dnqmqq kWwJhA"
            >
              <svg
                height="768"
                width="1024"
                xmlns="http://www.w3.org/2000/svg"
              >
                <defs>
                  <mask
                    id="mask-main"
                  >
                    <rect
                      fill="white"
                      height="768"
                      width="1024"
                      x="0"
                      y="0"
                    />
                    <rect
                      fill="black"
                      height="20"
                      width="20"
                      x="502"
                      y="768"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="501"
                      y="767"
                    />
                    <circle
                      cx="507"
                      cy="773"
                      fill="black"
                      r="5"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="518"
                      y="767"
                    />
                    <circle
                      cx="517"
                      cy="773"
                      fill="black"
                      r="5"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="501"
                      y="784"
                    />
                    <circle
                      cx="507"
                      cy="783"
                      fill="black"
                      r="5"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="518"
                      y="784"
                    />
                    <circle
                      cx="517"
                      cy="783"
                      fill="black "
                      r="5"
                    />
                  </mask>
                  <clippath
                    id="clip-path"
                  >
                    <rect
                      height="768"
                      width="1024"
                      x="0"
                      y="0"
                    />
                    <rect
                      height="20"
                      width="502"
                      x="0"
                      y="768"
                    />
                    <rect
                      height="20"
                      width="522"
                      x="522"
                      y="768"
                    />
                    <rect
                      height="0"
                      width="1024"
                      x="0"
                      y="788"
                    />
                  </clippath>
                </defs>
                <rect
                  fill="currentColor"
                  height="768"
                  mask="url(#mask-main)"
                  width="1024"
                  x="0"
                  y="0"
                />
                <rect
                  clip-path="url(#clip-path)"
                  fill="currentColor"
                  height="768"
                  pointer-events="auto"
                  width="1024"
                  x="0"
                  y="0"
                />
                <rect
                  class="reactour__mask--disable-interaction undefined"
                  display="none"
                  fill="transparent"
                  height="20"
                  pointer-events="auto"
                  width="20"
                  x="502"
                  y="768"
                />
              </svg>
            </div>
            <div
              data-focus-guard="true"
              style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
              tabindex="0"
            />
            <div
              data-focus-guard="true"
              style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
              tabindex="1"
            />
            <div
              data-focus-lock-disabled="false"
            >
              <div
                class="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                role="dialog"
                style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                tabindex="-1"
              >
                <div
                  class="MuiBox-root MuiBox-root-22"
                  id="stepNode"
                >
                  <h6
                    class="MuiTypography-root MuiTypography-h6"
                  >
                    Let us take a look into the 🚪 Doors Panel.
                  </h6>
                  <div
                    class="MuiBox-root MuiBox-root-24"
                  >
                    <button
                      class="MuiButtonBase-root MuiIconButton-root"
                      id="tour-back-btn"
                      tabindex="0"
                      type="button"
                    >
                      <span
                        class="MuiIconButton-label"
                      >
                        <svg
                          aria-hidden="true"
                          class="MuiSvgIcon-root makeStyles-navigation-23"
                          focusable="false"
                          viewBox="0 0 24 24"
                        >
                          <path
                            d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                          />
                        </svg>
                      </span>
                      <span
                        class="MuiTouchRipple-root"
                      />
                    </button>
                    <button
                      class="MuiButtonBase-root MuiIconButton-root"
                      id="tour-next-btn"
                      tabindex="0"
                      type="button"
                    >
                      <span
                        class="MuiIconButton-label"
                      >
                        <svg
                          aria-hidden="true"
                          class="MuiSvgIcon-root makeStyles-navigation-23"
                          focusable="false"
                          viewBox="0 0 24 24"
                        >
                          <path
                            d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                          />
                        </svg>
                      </span>
                      <span
                        class="MuiTouchRipple-root"
                      />
                    </button>
                  </div>
                </div>
                <span
                  class="sc-EHOje doXVdu"
                  data-tour-elem="badge"
                >
                  7 of 12
                </span>
                <button
                  class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                >
                  <svg
                    viewBox="0 0 9.1 9.1"
                  >
                    <path
                      d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                      fill="currentColor"
                    />
                  </svg>
                </button>
              </div>
            </div>
            <div
              data-focus-guard="true"
              style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
              tabindex="0"
            />
          </div>
        }
      >
        <GlobalStyleComponent />
        <ReactourResizeObserver
          refresh={[Function]}
          step={
            Object {
              "action": undefined,
              "content": [Function],
              "selector": "[data-component=\\"MainMenu\\"]",
              "style": Object {
                "backgroundColor": "#7986cb",
                "borderRadius": "5px",
                "color": "#fff",
              },
            }
          }
        />
        <ReactourMutationObserver
          refresh={[Function]}
          step={
            Object {
              "action": undefined,
              "content": [Function],
              "selector": "[data-component=\\"MainMenu\\"]",
              "style": Object {
                "backgroundColor": "#7986cb",
                "borderRadius": "5px",
                "color": "#fff",
              },
            }
          }
        />
        <SvgMask
          disableInteraction={false}
          disableInteractionClassName="reactour__mask--disable-interaction undefined"
          forwardRef={[Function]}
          onClick={[Function]}
          padding={10}
          rounded={5}
          targetHeight={0}
          targetLeft={512}
          targetTop={778}
          targetWidth={0}
          windowHeight={768}
          windowWidth={1024}
        >
          <styled.div
            onClick={[Function]}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-dnqmqq",
                    "isStatic": false,
                    "lastClassName": "kWwJhA",
                    "rules": Array [
                      "
  opacity: ",
                      [Function],
                      ";
  color: ",
                      [Function],
                      ";
  width: 100%;
  left: 0;
  top: 0;
  height: 100%;
  position: fixed;
  z-index: 99999;
  pointer-events: none;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-dnqmqq",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
            >
              <div
                className="sc-dnqmqq kWwJhA"
                onClick={[Function]}
              >
                <svg
                  height={768}
                  width={1024}
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <defs>
                    <mask
                      id="mask-main"
                    >
                      <rect
                        fill="white"
                        height={768}
                        width={1024}
                        x={0}
                        y={0}
                      />
                      <rect
                        fill="black"
                        height={20}
                        width={20}
                        x={502}
                        y={768}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={501}
                        y={767}
                      />
                      <circle
                        cx={507}
                        cy={773}
                        fill="black"
                        r={5}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={518}
                        y={767}
                      />
                      <circle
                        cx={517}
                        cy={773}
                        fill="black"
                        r={5}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={501}
                        y={784}
                      />
                      <circle
                        cx={507}
                        cy={783}
                        fill="black"
                        r={5}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={518}
                        y={784}
                      />
                      <circle
                        cx={517}
                        cy={783}
                        fill="black "
                        r={5}
                      />
                    </mask>
                    <clipPath
                      id="clip-path"
                    >
                      <rect
                        height={768}
                        width={1024}
                        x={0}
                        y={0}
                      />
                      <rect
                        height={20}
                        width={502}
                        x={0}
                        y={768}
                      />
                      <rect
                        height={20}
                        width={522}
                        x={522}
                        y={768}
                      />
                      <rect
                        height={0}
                        width={1024}
                        x={0}
                        y={788}
                      />
                    </clipPath>
                  </defs>
                  <rect
                    fill="currentColor"
                    height={768}
                    mask="url(#mask-main)"
                    width={1024}
                    x={0}
                    y={0}
                  />
                  <rect
                    clipPath="url(#clip-path)"
                    fill="currentColor"
                    height={768}
                    pointerEvents="auto"
                    width={1024}
                    x={0}
                    y={0}
                  />
                  <rect
                    className="reactour__mask--disable-interaction undefined"
                    display="none"
                    fill="transparent"
                    height={20}
                    pointerEvents="auto"
                    width={20}
                    x={502}
                    y={768}
                  />
                </svg>
              </div>
            </StyledComponent>
          </styled.div>
        </SvgMask>
        <ForwardRef
          disabled={false}
        >
          <ForwardRef
            as="div"
            autoFocus={true}
            disabled={false}
            lockProps={Object {}}
            noFocusGuards={false}
            persistentFocus={false}
            returnFocus={false}
            sideCar={[Function]}
          >
            <div
              data-focus-guard={true}
              key="guard-first"
              style={
                Object {
                  "height": "0px",
                  "left": "1px",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "fixed",
                  "top": "1px",
                  "width": "1px",
                }
              }
              tabIndex={0}
            />
            <div
              data-focus-guard={true}
              key="guard-nearest"
              style={
                Object {
                  "height": "0px",
                  "left": "1px",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "fixed",
                  "top": "1px",
                  "width": "1px",
                }
              }
              tabIndex={1}
            />
            <SideEffect(FocusWatcher)
              autoFocus={true}
              disabled={false}
              id={Object {}}
              observed={
                <div
                  data-focus-lock-disabled="false"
                >
                  <div
                    class="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                    role="dialog"
                    style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                    tabindex="-1"
                  >
                    <div
                      class="MuiBox-root MuiBox-root-22"
                      id="stepNode"
                    >
                      <h6
                        class="MuiTypography-root MuiTypography-h6"
                      >
                        Let us take a look into the 🚪 Doors Panel.
                      </h6>
                      <div
                        class="MuiBox-root MuiBox-root-24"
                      >
                        <button
                          class="MuiButtonBase-root MuiIconButton-root"
                          id="tour-back-btn"
                          tabindex="0"
                          type="button"
                        >
                          <span
                            class="MuiIconButton-label"
                          >
                            <svg
                              aria-hidden="true"
                              class="MuiSvgIcon-root makeStyles-navigation-23"
                              focusable="false"
                              viewBox="0 0 24 24"
                            >
                              <path
                                d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                              />
                            </svg>
                          </span>
                          <span
                            class="MuiTouchRipple-root"
                          />
                        </button>
                        <button
                          class="MuiButtonBase-root MuiIconButton-root"
                          id="tour-next-btn"
                          tabindex="0"
                          type="button"
                        >
                          <span
                            class="MuiIconButton-label"
                          >
                            <svg
                              aria-hidden="true"
                              class="MuiSvgIcon-root makeStyles-navigation-23"
                              focusable="false"
                              viewBox="0 0 24 24"
                            >
                              <path
                                d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                              />
                            </svg>
                          </span>
                          <span
                            class="MuiTouchRipple-root"
                          />
                        </button>
                      </div>
                    </div>
                    <span
                      class="sc-EHOje doXVdu"
                      data-tour-elem="badge"
                    >
                      7 of 12
                    </span>
                    <button
                      class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                    >
                      <svg
                        viewBox="0 0 9.1 9.1"
                      >
                        <path
                          d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                          fill="currentColor"
                        />
                      </svg>
                    </button>
                  </div>
                </div>
              }
              onActivation={[Function]}
              onDeactivation={[Function]}
              persistentFocus={false}
              returnFocus={[Function]}
              shards={Array []}
              sideCar={
                Object {
                  "assignMedium": [Function],
                  "assignSyncMedium": [Function],
                  "options": Object {
                    "async": true,
                    "ssr": false,
                  },
                  "read": [Function],
                  "useMedium": [Function],
                }
              }
            >
              <FocusWatcher
                autoFocus={true}
                disabled={false}
                id={Object {}}
                observed={
                  <div
                    data-focus-lock-disabled="false"
                  >
                    <div
                      class="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                      role="dialog"
                      style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                      tabindex="-1"
                    >
                      <div
                        class="MuiBox-root MuiBox-root-22"
                        id="stepNode"
                      >
                        <h6
                          class="MuiTypography-root MuiTypography-h6"
                        >
                          Let us take a look into the 🚪 Doors Panel.
                        </h6>
                        <div
                          class="MuiBox-root MuiBox-root-24"
                        >
                          <button
                            class="MuiButtonBase-root MuiIconButton-root"
                            id="tour-back-btn"
                            tabindex="0"
                            type="button"
                          >
                            <span
                              class="MuiIconButton-label"
                            >
                              <svg
                                aria-hidden="true"
                                class="MuiSvgIcon-root makeStyles-navigation-23"
                                focusable="false"
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                />
                              </svg>
                            </span>
                            <span
                              class="MuiTouchRipple-root"
                            />
                          </button>
                          <button
                            class="MuiButtonBase-root MuiIconButton-root"
                            id="tour-next-btn"
                            tabindex="0"
                            type="button"
                          >
                            <span
                              class="MuiIconButton-label"
                            >
                              <svg
                                aria-hidden="true"
                                class="MuiSvgIcon-root makeStyles-navigation-23"
                                focusable="false"
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                />
                              </svg>
                            </span>
                            <span
                              class="MuiTouchRipple-root"
                            />
                          </button>
                        </div>
                      </div>
                      <span
                        class="sc-EHOje doXVdu"
                        data-tour-elem="badge"
                      >
                        7 of 12
                      </span>
                      <button
                        class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                      >
                        <svg
                          viewBox="0 0 9.1 9.1"
                        >
                          <path
                            d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                            fill="currentColor"
                          />
                        </svg>
                      </button>
                    </div>
                  </div>
                }
                onActivation={[Function]}
                onDeactivation={[Function]}
                persistentFocus={false}
                returnFocus={[Function]}
                shards={Array []}
                sideCar={
                  Object {
                    "assignMedium": [Function],
                    "assignSyncMedium": [Function],
                    "options": Object {
                      "async": true,
                      "ssr": false,
                    },
                    "read": [Function],
                    "useMedium": [Function],
                  }
                }
              />
            </SideEffect(FocusWatcher)>
            <div
              data-focus-lock-disabled={false}
              onBlur={[Function]}
              onFocus={[Function]}
            >
              <styled.div
                accentColor="#3f51b5"
                className="reactour__helper reactour__helper--is-open"
                current={5}
                defaultStyles={true}
                helperHeight={0}
                helperPosition="center"
                helperWidth={0}
                padding={10}
                role="dialog"
                rounded={5}
                style={
                  Object {
                    "backgroundColor": "#7986cb",
                    "borderRadius": "5px",
                    "color": "#fff",
                  }
                }
                tabIndex={-1}
                targetBottom={393}
                targetHeight={0}
                targetLeft={512}
                targetRight={521}
                targetTop={778}
                targetWidth={0}
                windowHeight={768}
                windowWidth={1024}
              >
                <StyledComponent
                  accentColor="#3f51b5"
                  className="reactour__helper reactour__helper--is-open"
                  current={5}
                  defaultStyles={true}
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-ifAKCX",
                        "isStatic": false,
                        "lastClassName": "jBzNhS",
                        "rules": Array [
                          "
  --reactour-accent: ",
                          [Function],
                          ";
  ",
                          [Function],
                          "
  position: fixed;
  transition: transform 0.3s;
  top: 0;
  left: 0;
  z-index: 1000000;

  transform: ",
                          [Function],
                          ";
",
                        ],
                      },
                      "displayName": "styled.div",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-ifAKCX",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={
                    Object {
                      "current": <div
                        class="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                        role="dialog"
                        style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                        tabindex="-1"
                      >
                        <div
                          class="MuiBox-root MuiBox-root-22"
                          id="stepNode"
                        >
                          <h6
                            class="MuiTypography-root MuiTypography-h6"
                          >
                            Let us take a look into the 🚪 Doors Panel.
                          </h6>
                          <div
                            class="MuiBox-root MuiBox-root-24"
                          >
                            <button
                              class="MuiButtonBase-root MuiIconButton-root"
                              id="tour-back-btn"
                              tabindex="0"
                              type="button"
                            >
                              <span
                                class="MuiIconButton-label"
                              >
                                <svg
                                  aria-hidden="true"
                                  class="MuiSvgIcon-root makeStyles-navigation-23"
                                  focusable="false"
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                  />
                                </svg>
                              </span>
                              <span
                                class="MuiTouchRipple-root"
                              />
                            </button>
                            <button
                              class="MuiButtonBase-root MuiIconButton-root"
                              id="tour-next-btn"
                              tabindex="0"
                              type="button"
                            >
                              <span
                                class="MuiIconButton-label"
                              >
                                <svg
                                  aria-hidden="true"
                                  class="MuiSvgIcon-root makeStyles-navigation-23"
                                  focusable="false"
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                  />
                                </svg>
                              </span>
                              <span
                                class="MuiTouchRipple-root"
                              />
                            </button>
                          </div>
                        </div>
                        <span
                          class="sc-EHOje doXVdu"
                          data-tour-elem="badge"
                        >
                          7 of 12
                        </span>
                        <button
                          class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                        >
                          <svg
                            viewBox="0 0 9.1 9.1"
                          >
                            <path
                              d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                              fill="currentColor"
                            />
                          </svg>
                        </button>
                      </div>,
                    }
                  }
                  helperHeight={0}
                  helperPosition="center"
                  helperWidth={0}
                  padding={10}
                  role="dialog"
                  rounded={5}
                  style={
                    Object {
                      "backgroundColor": "#7986cb",
                      "borderRadius": "5px",
                      "color": "#fff",
                    }
                  }
                  tabIndex={-1}
                  targetBottom={393}
                  targetHeight={0}
                  targetLeft={512}
                  targetRight={521}
                  targetTop={778}
                  targetWidth={0}
                  windowHeight={768}
                  windowWidth={1024}
                >
                  <div
                    className="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                    role="dialog"
                    style={
                      Object {
                        "backgroundColor": "#7986cb",
                        "borderRadius": "5px",
                        "color": "#fff",
                      }
                    }
                    tabIndex={-1}
                  >
                    <Styled(MuiBox)
                      id="stepNode"
                    >
                      <div
                        className="MuiBox-root MuiBox-root-22"
                        id="stepNode"
                      >
                        <WithStyles(ForwardRef(Typography))
                          variant="h6"
                        >
                          <ForwardRef(Typography)
                            classes={
                              Object {
                                "alignCenter": "MuiTypography-alignCenter",
                                "alignJustify": "MuiTypography-alignJustify",
                                "alignLeft": "MuiTypography-alignLeft",
                                "alignRight": "MuiTypography-alignRight",
                                "body1": "MuiTypography-body1",
                                "body2": "MuiTypography-body2",
                                "button": "MuiTypography-button",
                                "caption": "MuiTypography-caption",
                                "colorError": "MuiTypography-colorError",
                                "colorInherit": "MuiTypography-colorInherit",
                                "colorPrimary": "MuiTypography-colorPrimary",
                                "colorSecondary": "MuiTypography-colorSecondary",
                                "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                "displayBlock": "MuiTypography-displayBlock",
                                "displayInline": "MuiTypography-displayInline",
                                "gutterBottom": "MuiTypography-gutterBottom",
                                "h1": "MuiTypography-h1",
                                "h2": "MuiTypography-h2",
                                "h3": "MuiTypography-h3",
                                "h4": "MuiTypography-h4",
                                "h5": "MuiTypography-h5",
                                "h6": "MuiTypography-h6",
                                "noWrap": "MuiTypography-noWrap",
                                "overline": "MuiTypography-overline",
                                "paragraph": "MuiTypography-paragraph",
                                "root": "MuiTypography-root",
                                "srOnly": "MuiTypography-srOnly",
                                "subtitle1": "MuiTypography-subtitle1",
                                "subtitle2": "MuiTypography-subtitle2",
                              }
                            }
                            variant="h6"
                          >
                            <h6
                              className="MuiTypography-root MuiTypography-h6"
                            >
                              Each Panel contains a list of the available items and their corresponding states.
                            </h6>
                          </ForwardRef(Typography)>
                        </WithStyles(ForwardRef(Typography))>
                        <Memo()
                          goTo={[Function]}
                          step={6}
                        >
                          <Styled(MuiBox)>
                            <div
                              className="MuiBox-root MuiBox-root-24"
                            >
                              <WithStyles(ForwardRef(IconButton))
                                id="tour-back-btn"
                                onClick={[Function]}
                              >
                                <ForwardRef(IconButton)
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit",
                                      "colorPrimary": "MuiIconButton-colorPrimary",
                                      "colorSecondary": "MuiIconButton-colorSecondary",
                                      "disabled": "Mui-disabled",
                                      "edgeEnd": "MuiIconButton-edgeEnd",
                                      "edgeStart": "MuiIconButton-edgeStart",
                                      "label": "MuiIconButton-label",
                                      "root": "MuiIconButton-root",
                                      "sizeSmall": "MuiIconButton-sizeSmall",
                                    }
                                  }
                                  id="tour-back-btn"
                                  onClick={[Function]}
                                >
                                  <WithStyles(ForwardRef(ButtonBase))
                                    centerRipple={true}
                                    className="MuiIconButton-root"
                                    disabled={false}
                                    focusRipple={true}
                                    id="tour-back-btn"
                                    onClick={[Function]}
                                  >
                                    <ForwardRef(ButtonBase)
                                      centerRipple={true}
                                      className="MuiIconButton-root"
                                      classes={
                                        Object {
                                          "disabled": "Mui-disabled",
                                          "focusVisible": "Mui-focusVisible",
                                          "root": "MuiButtonBase-root",
                                        }
                                      }
                                      disabled={false}
                                      focusRipple={true}
                                      id="tour-back-btn"
                                      onClick={[Function]}
                                    >
                                      <button
                                        className="MuiButtonBase-root MuiIconButton-root"
                                        disabled={false}
                                        id="tour-back-btn"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragLeave={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex={0}
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label"
                                        >
                                          <ForwardRef
                                            className="makeStyles-navigation-23"
                                          >
                                            <WithStyles(ForwardRef(SvgIcon))
                                              className="makeStyles-navigation-23"
                                            >
                                              <ForwardRef(SvgIcon)
                                                className="makeStyles-navigation-23"
                                                classes={
                                                  Object {
                                                    "colorAction": "MuiSvgIcon-colorAction",
                                                    "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                    "colorError": "MuiSvgIcon-colorError",
                                                    "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                    "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                    "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                    "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                    "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                    "root": "MuiSvgIcon-root",
                                                  }
                                                }
                                              >
                                                <svg
                                                  aria-hidden={true}
                                                  className="MuiSvgIcon-root makeStyles-navigation-23"
                                                  focusable="false"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <path
                                                    d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                                  />
                                                </svg>
                                              </ForwardRef(SvgIcon)>
                                            </WithStyles(ForwardRef(SvgIcon))>
                                          </ForwardRef>
                                        </span>
                                        <WithStyles(memo)
                                          center={true}
                                        >
                                          <ForwardRef(TouchRipple)
                                            center={true}
                                            classes={
                                              Object {
                                                "child": "MuiTouchRipple-child",
                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                "ripple": "MuiTouchRipple-ripple",
                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                "root": "MuiTouchRipple-root",
                                              }
                                            }
                                          >
                                            <span
                                              className="MuiTouchRipple-root"
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                component={null}
                                                exit={true}
                                              />
                                            </span>
                                          </ForwardRef(TouchRipple)>
                                        </WithStyles(memo)>
                                      </button>
                                    </ForwardRef(ButtonBase)>
                                  </WithStyles(ForwardRef(ButtonBase))>
                                </ForwardRef(IconButton)>
                              </WithStyles(ForwardRef(IconButton))>
                              <WithStyles(ForwardRef(IconButton))
                                id="tour-next-btn"
                                onClick={[Function]}
                              >
                                <ForwardRef(IconButton)
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit",
                                      "colorPrimary": "MuiIconButton-colorPrimary",
                                      "colorSecondary": "MuiIconButton-colorSecondary",
                                      "disabled": "Mui-disabled",
                                      "edgeEnd": "MuiIconButton-edgeEnd",
                                      "edgeStart": "MuiIconButton-edgeStart",
                                      "label": "MuiIconButton-label",
                                      "root": "MuiIconButton-root",
                                      "sizeSmall": "MuiIconButton-sizeSmall",
                                    }
                                  }
                                  id="tour-next-btn"
                                  onClick={[Function]}
                                >
                                  <WithStyles(ForwardRef(ButtonBase))
                                    centerRipple={true}
                                    className="MuiIconButton-root"
                                    disabled={false}
                                    focusRipple={true}
                                    id="tour-next-btn"
                                    onClick={[Function]}
                                  >
                                    <ForwardRef(ButtonBase)
                                      centerRipple={true}
                                      className="MuiIconButton-root"
                                      classes={
                                        Object {
                                          "disabled": "Mui-disabled",
                                          "focusVisible": "Mui-focusVisible",
                                          "root": "MuiButtonBase-root",
                                        }
                                      }
                                      disabled={false}
                                      focusRipple={true}
                                      id="tour-next-btn"
                                      onClick={[Function]}
                                    >
                                      <button
                                        className="MuiButtonBase-root MuiIconButton-root"
                                        disabled={false}
                                        id="tour-next-btn"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragLeave={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex={0}
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label"
                                        >
                                          <ForwardRef
                                            className="makeStyles-navigation-23"
                                          >
                                            <WithStyles(ForwardRef(SvgIcon))
                                              className="makeStyles-navigation-23"
                                            >
                                              <ForwardRef(SvgIcon)
                                                className="makeStyles-navigation-23"
                                                classes={
                                                  Object {
                                                    "colorAction": "MuiSvgIcon-colorAction",
                                                    "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                    "colorError": "MuiSvgIcon-colorError",
                                                    "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                    "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                    "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                    "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                    "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                    "root": "MuiSvgIcon-root",
                                                  }
                                                }
                                              >
                                                <svg
                                                  aria-hidden={true}
                                                  className="MuiSvgIcon-root makeStyles-navigation-23"
                                                  focusable="false"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <path
                                                    d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                                  />
                                                </svg>
                                              </ForwardRef(SvgIcon)>
                                            </WithStyles(ForwardRef(SvgIcon))>
                                          </ForwardRef>
                                        </span>
                                        <WithStyles(memo)
                                          center={true}
                                        >
                                          <ForwardRef(TouchRipple)
                                            center={true}
                                            classes={
                                              Object {
                                                "child": "MuiTouchRipple-child",
                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                "ripple": "MuiTouchRipple-ripple",
                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                "root": "MuiTouchRipple-root",
                                              }
                                            }
                                          >
                                            <span
                                              className="MuiTouchRipple-root"
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                component={null}
                                                exit={true}
                                              />
                                            </span>
                                          </ForwardRef(TouchRipple)>
                                        </WithStyles(memo)>
                                      </button>
                                    </ForwardRef(ButtonBase)>
                                  </WithStyles(ForwardRef(ButtonBase))>
                                </ForwardRef(IconButton)>
                              </WithStyles(ForwardRef(IconButton))>
                            </div>
                          </Styled(MuiBox)>
                        </Memo()>
                      </div>
                    </Styled(MuiBox)>
                    <styled.span
                      accentColor="#3f51b5"
                      data-tour-elem="badge"
                    >
                      <StyledComponent
                        accentColor="#3f51b5"
                        data-tour-elem="badge"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-EHOje",
                              "isStatic": false,
                              "lastClassName": "doXVdu",
                              "rules": Array [
                                "
  position: absolute;
  font-family: monospace;
  background: var(--reactour-accent);
  background: ",
                                [Function],
                                ";
  height: 1.875em;
  line-height: 2;
  padding-left: 0.8125em;
  padding-right: 0.8125em;
  font-size: 1em;
  border-radius: 1.625em;
  color: white;
  text-align: center;
  box-shadow: 0 0.25em 0.5em rgba(0, 0, 0, 0.3);
  top: -0.8125em;
  left: -0.8125em;
",
                              ],
                            },
                            "displayName": "styled.span",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-EHOje",
                            "target": "span",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <span
                          className="sc-EHOje doXVdu"
                          data-tour-elem="badge"
                        >
                          6 of 12
                        </span>
                      </StyledComponent>
                    </styled.span>
                    <Styled(Close)
                      className="reactour__close"
                      onClick={[Function]}
                    >
                      <StyledComponent
                        className="reactour__close"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-bxivhb",
                              "isStatic": false,
                              "lastClassName": "eTpeTG",
                              "rules": Array [
                                "
  position: absolute;
  top: 22px;
  right: 22px;
  width: 9px;
  height: 9px;
  color: #5e5e5e;
  &:hover {
    color: #000;
  }
",
                              ],
                            },
                            "displayName": "Styled(Close)",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-bxivhb",
                            "target": [Function],
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        onClick={[Function]}
                      >
                        <Close
                          className="sc-bxivhb eTpeTG reactour__close"
                          onClick={[Function]}
                        >
                          <styled.button
                            className="sc-bxivhb eTpeTG reactour__close"
                            onClick={[Function]}
                          >
                            <StyledComponent
                              className="sc-bxivhb eTpeTG reactour__close"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-bdVaJa",
                                    "isStatic": false,
                                    "lastClassName": "cYQqRL",
                                    "rules": Array [
                                      "
  display: block;
  padding: 0;
  border: 0;
  background: none;
  font-size: 0;
  cursor: ",
                                      [Function],
                                      ";
",
                                    ],
                                  },
                                  "displayName": "styled.button",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-bdVaJa",
                                  "target": "button",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              onClick={[Function]}
                            >
                              <button
                                className="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                                onClick={[Function]}
                              >
                                <svg
                                  viewBox="0 0 9.1 9.1"
                                >
                                  <path
                                    d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                                    fill="currentColor"
                                  />
                                </svg>
                              </button>
                            </StyledComponent>
                          </styled.button>
                        </Close>
                      </StyledComponent>
                    </Styled(Close)>
                  </div>
                </StyledComponent>
              </styled.div>
            </div>
            <div
              data-focus-guard={true}
              style={
                Object {
                  "height": "0px",
                  "left": "1px",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "fixed",
                  "top": "1px",
                  "width": "1px",
                }
              }
              tabIndex={0}
            />
          </ForwardRef>
        </ForwardRef>
      </Portal>
    </Portal>
  </Tour>
</Memo()>
`;

exports[`Dashboard Tour renders door tab step (8/12) 1`] = `
<Memo()
  tourProps={
    Object {
      "OmniPanelViewIndex": Object {
        "0": "MainMenu",
        "1": "Doors",
        "2": "Lifts",
        "3": "Robots",
        "4": "Dispensers",
        "5": "Commands",
        "6": "Negotiations",
        "Commands": 5,
        "Dispensers": 4,
        "Doors": 1,
        "Lifts": 2,
        "MainMenu": 0,
        "Negotiations": 6,
        "Robots": 3,
      },
      "doorSpotlight": Object {
        "value": "main_door",
      },
      "setDoorSpotlight": [MockFunction],
      "setTourSettingsAndOmniPanel": [MockFunction] {
        "calls": Array [
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
      "setTourShowOmniPanel": [MockFunction] {
        "calls": Array [
          Array [
            0,
          ],
          Array [
            0,
          ],
          Array [
            0,
          ],
          Array [
            1,
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
      "setTourState": [MockFunction],
      "tourState": true,
    }
  }
>
  <Tour
    accentColor="#3f51b5"
    badgeContent={[Function]}
    closeWithMask={false}
    disableFocusLock={false}
    disableInteraction={false}
    disableKeyboardNavigation={
      Array [
        "right",
        "left",
      ]
    }
    isOpen={true}
    maskSpace={10}
    onRequestClose={[Function]}
    rounded={5}
    scrollDuration={1}
    showButtons={false}
    showCloseButton={true}
    showNavigation={false}
    showNavigationNumber={false}
    showNumber={true}
    startAt={0}
    steps={
      Array [
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "[class=\\"leaflet-control-zoom leaflet-bar leaflet-control\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "[class= \\"leaflet-control-layers leaflet-control\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "[class=\\"leaflet-image-layer leaflet-zoom-animated\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[id=\\"toggle-omnipanel-btn\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-component=\\"MainMenu\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-item=\\"Doors\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-name=\\"main_door\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-item= \\"Commands\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-component=\\"LoopForm\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[id=\\"show-settings-btn\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": ".MuiDrawer-paper",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
      ]
    }
    updateDelay={1}
  >
    <Portal>
      <Portal
        containerInfo={
          <div
            id="___reactour"
          >
            <div
              class="sc-dnqmqq kWwJhA"
            >
              <svg
                height="768"
                width="1024"
                xmlns="http://www.w3.org/2000/svg"
              >
                <defs>
                  <mask
                    id="mask-main"
                  >
                    <rect
                      fill="white"
                      height="768"
                      width="1024"
                      x="0"
                      y="0"
                    />
                    <rect
                      fill="black"
                      height="20"
                      width="20"
                      x="502"
                      y="768"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="501"
                      y="767"
                    />
                    <circle
                      cx="507"
                      cy="773"
                      fill="black"
                      r="5"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="518"
                      y="767"
                    />
                    <circle
                      cx="517"
                      cy="773"
                      fill="black"
                      r="5"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="501"
                      y="784"
                    />
                    <circle
                      cx="507"
                      cy="783"
                      fill="black"
                      r="5"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="518"
                      y="784"
                    />
                    <circle
                      cx="517"
                      cy="783"
                      fill="black "
                      r="5"
                    />
                  </mask>
                  <clippath
                    id="clip-path"
                  >
                    <rect
                      height="768"
                      width="1024"
                      x="0"
                      y="0"
                    />
                    <rect
                      height="20"
                      width="502"
                      x="0"
                      y="768"
                    />
                    <rect
                      height="20"
                      width="522"
                      x="522"
                      y="768"
                    />
                    <rect
                      height="0"
                      width="1024"
                      x="0"
                      y="788"
                    />
                  </clippath>
                </defs>
                <rect
                  fill="currentColor"
                  height="768"
                  mask="url(#mask-main)"
                  width="1024"
                  x="0"
                  y="0"
                />
                <rect
                  clip-path="url(#clip-path)"
                  fill="currentColor"
                  height="768"
                  pointer-events="auto"
                  width="1024"
                  x="0"
                  y="0"
                />
                <rect
                  class="reactour__mask--disable-interaction undefined"
                  display="none"
                  fill="transparent"
                  height="20"
                  pointer-events="auto"
                  width="20"
                  x="502"
                  y="768"
                />
              </svg>
            </div>
            <div
              data-focus-guard="true"
              style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
              tabindex="0"
            />
            <div
              data-focus-guard="true"
              style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
              tabindex="1"
            />
            <div
              data-focus-lock-disabled="false"
            >
              <div
                class="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                role="dialog"
                style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                tabindex="-1"
              >
                <div
                  class="MuiBox-root MuiBox-root-25"
                  id="stepNode"
                >
                  <h6
                    class="MuiTypography-root MuiTypography-h6"
                  >
                    Here is an example of what you will see when a door tab is expanded
                  </h6>
                  <div
                    class="MuiBox-root MuiBox-root-27"
                  >
                    <button
                      class="MuiButtonBase-root MuiIconButton-root"
                      id="tour-back-btn"
                      tabindex="0"
                      type="button"
                    >
                      <span
                        class="MuiIconButton-label"
                      >
                        <svg
                          aria-hidden="true"
                          class="MuiSvgIcon-root makeStyles-navigation-26"
                          focusable="false"
                          viewBox="0 0 24 24"
                        >
                          <path
                            d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                          />
                        </svg>
                      </span>
                      <span
                        class="MuiTouchRipple-root"
                      />
                    </button>
                    <button
                      class="MuiButtonBase-root MuiIconButton-root"
                      id="tour-next-btn"
                      tabindex="0"
                      type="button"
                    >
                      <span
                        class="MuiIconButton-label"
                      >
                        <svg
                          aria-hidden="true"
                          class="MuiSvgIcon-root makeStyles-navigation-26"
                          focusable="false"
                          viewBox="0 0 24 24"
                        >
                          <path
                            d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                          />
                        </svg>
                      </span>
                      <span
                        class="MuiTouchRipple-root"
                      />
                    </button>
                  </div>
                </div>
                <span
                  class="sc-EHOje doXVdu"
                  data-tour-elem="badge"
                >
                  8 of 12
                </span>
                <button
                  class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                >
                  <svg
                    viewBox="0 0 9.1 9.1"
                  >
                    <path
                      d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                      fill="currentColor"
                    />
                  </svg>
                </button>
              </div>
            </div>
            <div
              data-focus-guard="true"
              style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
              tabindex="0"
            />
          </div>
        }
      >
        <GlobalStyleComponent />
        <ReactourResizeObserver
          refresh={[Function]}
          step={
            Object {
              "action": undefined,
              "content": [Function],
              "selector": "[data-item=\\"Doors\\"]",
              "style": Object {
                "backgroundColor": "#7986cb",
                "borderRadius": "5px",
                "color": "#fff",
              },
            }
          }
        />
        <ReactourMutationObserver
          refresh={[Function]}
          step={
            Object {
              "action": undefined,
              "content": [Function],
              "selector": "[data-item=\\"Doors\\"]",
              "style": Object {
                "backgroundColor": "#7986cb",
                "borderRadius": "5px",
                "color": "#fff",
              },
            }
          }
        />
        <SvgMask
          disableInteraction={false}
          disableInteractionClassName="reactour__mask--disable-interaction undefined"
          forwardRef={[Function]}
          onClick={[Function]}
          padding={10}
          rounded={5}
          targetHeight={0}
          targetLeft={512}
          targetTop={778}
          targetWidth={0}
          windowHeight={768}
          windowWidth={1024}
        >
          <styled.div
            onClick={[Function]}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-dnqmqq",
                    "isStatic": false,
                    "lastClassName": "kWwJhA",
                    "rules": Array [
                      "
  opacity: ",
                      [Function],
                      ";
  color: ",
                      [Function],
                      ";
  width: 100%;
  left: 0;
  top: 0;
  height: 100%;
  position: fixed;
  z-index: 99999;
  pointer-events: none;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-dnqmqq",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
            >
              <div
                className="sc-dnqmqq kWwJhA"
                onClick={[Function]}
              >
                <svg
                  height={768}
                  width={1024}
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <defs>
                    <mask
                      id="mask-main"
                    >
                      <rect
                        fill="white"
                        height={768}
                        width={1024}
                        x={0}
                        y={0}
                      />
                      <rect
                        fill="black"
                        height={20}
                        width={20}
                        x={502}
                        y={768}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={501}
                        y={767}
                      />
                      <circle
                        cx={507}
                        cy={773}
                        fill="black"
                        r={5}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={518}
                        y={767}
                      />
                      <circle
                        cx={517}
                        cy={773}
                        fill="black"
                        r={5}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={501}
                        y={784}
                      />
                      <circle
                        cx={507}
                        cy={783}
                        fill="black"
                        r={5}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={518}
                        y={784}
                      />
                      <circle
                        cx={517}
                        cy={783}
                        fill="black "
                        r={5}
                      />
                    </mask>
                    <clipPath
                      id="clip-path"
                    >
                      <rect
                        height={768}
                        width={1024}
                        x={0}
                        y={0}
                      />
                      <rect
                        height={20}
                        width={502}
                        x={0}
                        y={768}
                      />
                      <rect
                        height={20}
                        width={522}
                        x={522}
                        y={768}
                      />
                      <rect
                        height={0}
                        width={1024}
                        x={0}
                        y={788}
                      />
                    </clipPath>
                  </defs>
                  <rect
                    fill="currentColor"
                    height={768}
                    mask="url(#mask-main)"
                    width={1024}
                    x={0}
                    y={0}
                  />
                  <rect
                    clipPath="url(#clip-path)"
                    fill="currentColor"
                    height={768}
                    pointerEvents="auto"
                    width={1024}
                    x={0}
                    y={0}
                  />
                  <rect
                    className="reactour__mask--disable-interaction undefined"
                    display="none"
                    fill="transparent"
                    height={20}
                    pointerEvents="auto"
                    width={20}
                    x={502}
                    y={768}
                  />
                </svg>
              </div>
            </StyledComponent>
          </styled.div>
        </SvgMask>
        <ForwardRef
          disabled={false}
        >
          <ForwardRef
            as="div"
            autoFocus={true}
            disabled={false}
            lockProps={Object {}}
            noFocusGuards={false}
            persistentFocus={false}
            returnFocus={false}
            sideCar={[Function]}
          >
            <div
              data-focus-guard={true}
              key="guard-first"
              style={
                Object {
                  "height": "0px",
                  "left": "1px",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "fixed",
                  "top": "1px",
                  "width": "1px",
                }
              }
              tabIndex={0}
            />
            <div
              data-focus-guard={true}
              key="guard-nearest"
              style={
                Object {
                  "height": "0px",
                  "left": "1px",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "fixed",
                  "top": "1px",
                  "width": "1px",
                }
              }
              tabIndex={1}
            />
            <SideEffect(FocusWatcher)
              autoFocus={true}
              disabled={false}
              id={Object {}}
              observed={
                <div
                  data-focus-lock-disabled="false"
                >
                  <div
                    class="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                    role="dialog"
                    style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                    tabindex="-1"
                  >
                    <div
                      class="MuiBox-root MuiBox-root-25"
                      id="stepNode"
                    >
                      <h6
                        class="MuiTypography-root MuiTypography-h6"
                      >
                        Here is an example of what you will see when a door tab is expanded
                      </h6>
                      <div
                        class="MuiBox-root MuiBox-root-27"
                      >
                        <button
                          class="MuiButtonBase-root MuiIconButton-root"
                          id="tour-back-btn"
                          tabindex="0"
                          type="button"
                        >
                          <span
                            class="MuiIconButton-label"
                          >
                            <svg
                              aria-hidden="true"
                              class="MuiSvgIcon-root makeStyles-navigation-26"
                              focusable="false"
                              viewBox="0 0 24 24"
                            >
                              <path
                                d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                              />
                            </svg>
                          </span>
                          <span
                            class="MuiTouchRipple-root"
                          />
                        </button>
                        <button
                          class="MuiButtonBase-root MuiIconButton-root"
                          id="tour-next-btn"
                          tabindex="0"
                          type="button"
                        >
                          <span
                            class="MuiIconButton-label"
                          >
                            <svg
                              aria-hidden="true"
                              class="MuiSvgIcon-root makeStyles-navigation-26"
                              focusable="false"
                              viewBox="0 0 24 24"
                            >
                              <path
                                d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                              />
                            </svg>
                          </span>
                          <span
                            class="MuiTouchRipple-root"
                          />
                        </button>
                      </div>
                    </div>
                    <span
                      class="sc-EHOje doXVdu"
                      data-tour-elem="badge"
                    >
                      8 of 12
                    </span>
                    <button
                      class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                    >
                      <svg
                        viewBox="0 0 9.1 9.1"
                      >
                        <path
                          d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                          fill="currentColor"
                        />
                      </svg>
                    </button>
                  </div>
                </div>
              }
              onActivation={[Function]}
              onDeactivation={[Function]}
              persistentFocus={false}
              returnFocus={[Function]}
              shards={Array []}
              sideCar={
                Object {
                  "assignMedium": [Function],
                  "assignSyncMedium": [Function],
                  "options": Object {
                    "async": true,
                    "ssr": false,
                  },
                  "read": [Function],
                  "useMedium": [Function],
                }
              }
            >
              <FocusWatcher
                autoFocus={true}
                disabled={false}
                id={Object {}}
                observed={
                  <div
                    data-focus-lock-disabled="false"
                  >
                    <div
                      class="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                      role="dialog"
                      style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                      tabindex="-1"
                    >
                      <div
                        class="MuiBox-root MuiBox-root-25"
                        id="stepNode"
                      >
                        <h6
                          class="MuiTypography-root MuiTypography-h6"
                        >
                          Here is an example of what you will see when a door tab is expanded
                        </h6>
                        <div
                          class="MuiBox-root MuiBox-root-27"
                        >
                          <button
                            class="MuiButtonBase-root MuiIconButton-root"
                            id="tour-back-btn"
                            tabindex="0"
                            type="button"
                          >
                            <span
                              class="MuiIconButton-label"
                            >
                              <svg
                                aria-hidden="true"
                                class="MuiSvgIcon-root makeStyles-navigation-26"
                                focusable="false"
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                />
                              </svg>
                            </span>
                            <span
                              class="MuiTouchRipple-root"
                            />
                          </button>
                          <button
                            class="MuiButtonBase-root MuiIconButton-root"
                            id="tour-next-btn"
                            tabindex="0"
                            type="button"
                          >
                            <span
                              class="MuiIconButton-label"
                            >
                              <svg
                                aria-hidden="true"
                                class="MuiSvgIcon-root makeStyles-navigation-26"
                                focusable="false"
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                />
                              </svg>
                            </span>
                            <span
                              class="MuiTouchRipple-root"
                            />
                          </button>
                        </div>
                      </div>
                      <span
                        class="sc-EHOje doXVdu"
                        data-tour-elem="badge"
                      >
                        8 of 12
                      </span>
                      <button
                        class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                      >
                        <svg
                          viewBox="0 0 9.1 9.1"
                        >
                          <path
                            d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                            fill="currentColor"
                          />
                        </svg>
                      </button>
                    </div>
                  </div>
                }
                onActivation={[Function]}
                onDeactivation={[Function]}
                persistentFocus={false}
                returnFocus={[Function]}
                shards={Array []}
                sideCar={
                  Object {
                    "assignMedium": [Function],
                    "assignSyncMedium": [Function],
                    "options": Object {
                      "async": true,
                      "ssr": false,
                    },
                    "read": [Function],
                    "useMedium": [Function],
                  }
                }
              />
            </SideEffect(FocusWatcher)>
            <div
              data-focus-lock-disabled={false}
              onBlur={[Function]}
              onFocus={[Function]}
            >
              <styled.div
                accentColor="#3f51b5"
                className="reactour__helper reactour__helper--is-open"
                current={6}
                defaultStyles={true}
                helperHeight={0}
                helperPosition="center"
                helperWidth={0}
                padding={10}
                role="dialog"
                rounded={5}
                style={
                  Object {
                    "backgroundColor": "#7986cb",
                    "borderRadius": "5px",
                    "color": "#fff",
                  }
                }
                tabIndex={-1}
                targetBottom={393}
                targetHeight={0}
                targetLeft={512}
                targetRight={521}
                targetTop={778}
                targetWidth={0}
                windowHeight={768}
                windowWidth={1024}
              >
                <StyledComponent
                  accentColor="#3f51b5"
                  className="reactour__helper reactour__helper--is-open"
                  current={6}
                  defaultStyles={true}
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-ifAKCX",
                        "isStatic": false,
                        "lastClassName": "jBzNhS",
                        "rules": Array [
                          "
  --reactour-accent: ",
                          [Function],
                          ";
  ",
                          [Function],
                          "
  position: fixed;
  transition: transform 0.3s;
  top: 0;
  left: 0;
  z-index: 1000000;

  transform: ",
                          [Function],
                          ";
",
                        ],
                      },
                      "displayName": "styled.div",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-ifAKCX",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={
                    Object {
                      "current": <div
                        class="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                        role="dialog"
                        style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                        tabindex="-1"
                      >
                        <div
                          class="MuiBox-root MuiBox-root-25"
                          id="stepNode"
                        >
                          <h6
                            class="MuiTypography-root MuiTypography-h6"
                          >
                            Here is an example of what you will see when a door tab is expanded
                          </h6>
                          <div
                            class="MuiBox-root MuiBox-root-27"
                          >
                            <button
                              class="MuiButtonBase-root MuiIconButton-root"
                              id="tour-back-btn"
                              tabindex="0"
                              type="button"
                            >
                              <span
                                class="MuiIconButton-label"
                              >
                                <svg
                                  aria-hidden="true"
                                  class="MuiSvgIcon-root makeStyles-navigation-26"
                                  focusable="false"
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                  />
                                </svg>
                              </span>
                              <span
                                class="MuiTouchRipple-root"
                              />
                            </button>
                            <button
                              class="MuiButtonBase-root MuiIconButton-root"
                              id="tour-next-btn"
                              tabindex="0"
                              type="button"
                            >
                              <span
                                class="MuiIconButton-label"
                              >
                                <svg
                                  aria-hidden="true"
                                  class="MuiSvgIcon-root makeStyles-navigation-26"
                                  focusable="false"
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                  />
                                </svg>
                              </span>
                              <span
                                class="MuiTouchRipple-root"
                              />
                            </button>
                          </div>
                        </div>
                        <span
                          class="sc-EHOje doXVdu"
                          data-tour-elem="badge"
                        >
                          8 of 12
                        </span>
                        <button
                          class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                        >
                          <svg
                            viewBox="0 0 9.1 9.1"
                          >
                            <path
                              d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                              fill="currentColor"
                            />
                          </svg>
                        </button>
                      </div>,
                    }
                  }
                  helperHeight={0}
                  helperPosition="center"
                  helperWidth={0}
                  padding={10}
                  role="dialog"
                  rounded={5}
                  style={
                    Object {
                      "backgroundColor": "#7986cb",
                      "borderRadius": "5px",
                      "color": "#fff",
                    }
                  }
                  tabIndex={-1}
                  targetBottom={393}
                  targetHeight={0}
                  targetLeft={512}
                  targetRight={521}
                  targetTop={778}
                  targetWidth={0}
                  windowHeight={768}
                  windowWidth={1024}
                >
                  <div
                    className="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                    role="dialog"
                    style={
                      Object {
                        "backgroundColor": "#7986cb",
                        "borderRadius": "5px",
                        "color": "#fff",
                      }
                    }
                    tabIndex={-1}
                  >
                    <Styled(MuiBox)
                      id="stepNode"
                    >
                      <div
                        className="MuiBox-root MuiBox-root-25"
                        id="stepNode"
                      >
                        <WithStyles(ForwardRef(Typography))
                          variant="h6"
                        >
                          <ForwardRef(Typography)
                            classes={
                              Object {
                                "alignCenter": "MuiTypography-alignCenter",
                                "alignJustify": "MuiTypography-alignJustify",
                                "alignLeft": "MuiTypography-alignLeft",
                                "alignRight": "MuiTypography-alignRight",
                                "body1": "MuiTypography-body1",
                                "body2": "MuiTypography-body2",
                                "button": "MuiTypography-button",
                                "caption": "MuiTypography-caption",
                                "colorError": "MuiTypography-colorError",
                                "colorInherit": "MuiTypography-colorInherit",
                                "colorPrimary": "MuiTypography-colorPrimary",
                                "colorSecondary": "MuiTypography-colorSecondary",
                                "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                "displayBlock": "MuiTypography-displayBlock",
                                "displayInline": "MuiTypography-displayInline",
                                "gutterBottom": "MuiTypography-gutterBottom",
                                "h1": "MuiTypography-h1",
                                "h2": "MuiTypography-h2",
                                "h3": "MuiTypography-h3",
                                "h4": "MuiTypography-h4",
                                "h5": "MuiTypography-h5",
                                "h6": "MuiTypography-h6",
                                "noWrap": "MuiTypography-noWrap",
                                "overline": "MuiTypography-overline",
                                "paragraph": "MuiTypography-paragraph",
                                "root": "MuiTypography-root",
                                "srOnly": "MuiTypography-srOnly",
                                "subtitle1": "MuiTypography-subtitle1",
                                "subtitle2": "MuiTypography-subtitle2",
                              }
                            }
                            variant="h6"
                          >
                            <h6
                              className="MuiTypography-root MuiTypography-h6"
                            >
                              Let us take a look into the 🚪 Doors Panel.
                            </h6>
                          </ForwardRef(Typography)>
                        </WithStyles(ForwardRef(Typography))>
                        <Memo()
                          goTo={[Function]}
                          handleNextClick={[Function]}
                          step={7}
                        >
                          <Styled(MuiBox)>
                            <div
                              className="MuiBox-root MuiBox-root-27"
                            >
                              <WithStyles(ForwardRef(IconButton))
                                id="tour-back-btn"
                                onClick={[Function]}
                              >
                                <ForwardRef(IconButton)
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit",
                                      "colorPrimary": "MuiIconButton-colorPrimary",
                                      "colorSecondary": "MuiIconButton-colorSecondary",
                                      "disabled": "Mui-disabled",
                                      "edgeEnd": "MuiIconButton-edgeEnd",
                                      "edgeStart": "MuiIconButton-edgeStart",
                                      "label": "MuiIconButton-label",
                                      "root": "MuiIconButton-root",
                                      "sizeSmall": "MuiIconButton-sizeSmall",
                                    }
                                  }
                                  id="tour-back-btn"
                                  onClick={[Function]}
                                >
                                  <WithStyles(ForwardRef(ButtonBase))
                                    centerRipple={true}
                                    className="MuiIconButton-root"
                                    disabled={false}
                                    focusRipple={true}
                                    id="tour-back-btn"
                                    onClick={[Function]}
                                  >
                                    <ForwardRef(ButtonBase)
                                      centerRipple={true}
                                      className="MuiIconButton-root"
                                      classes={
                                        Object {
                                          "disabled": "Mui-disabled",
                                          "focusVisible": "Mui-focusVisible",
                                          "root": "MuiButtonBase-root",
                                        }
                                      }
                                      disabled={false}
                                      focusRipple={true}
                                      id="tour-back-btn"
                                      onClick={[Function]}
                                    >
                                      <button
                                        className="MuiButtonBase-root MuiIconButton-root"
                                        disabled={false}
                                        id="tour-back-btn"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragLeave={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex={0}
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label"
                                        >
                                          <ForwardRef
                                            className="makeStyles-navigation-26"
                                          >
                                            <WithStyles(ForwardRef(SvgIcon))
                                              className="makeStyles-navigation-26"
                                            >
                                              <ForwardRef(SvgIcon)
                                                className="makeStyles-navigation-26"
                                                classes={
                                                  Object {
                                                    "colorAction": "MuiSvgIcon-colorAction",
                                                    "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                    "colorError": "MuiSvgIcon-colorError",
                                                    "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                    "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                    "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                    "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                    "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                    "root": "MuiSvgIcon-root",
                                                  }
                                                }
                                              >
                                                <svg
                                                  aria-hidden={true}
                                                  className="MuiSvgIcon-root makeStyles-navigation-26"
                                                  focusable="false"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <path
                                                    d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                                  />
                                                </svg>
                                              </ForwardRef(SvgIcon)>
                                            </WithStyles(ForwardRef(SvgIcon))>
                                          </ForwardRef>
                                        </span>
                                        <WithStyles(memo)
                                          center={true}
                                        >
                                          <ForwardRef(TouchRipple)
                                            center={true}
                                            classes={
                                              Object {
                                                "child": "MuiTouchRipple-child",
                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                "ripple": "MuiTouchRipple-ripple",
                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                "root": "MuiTouchRipple-root",
                                              }
                                            }
                                          >
                                            <span
                                              className="MuiTouchRipple-root"
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                component={null}
                                                exit={true}
                                              />
                                            </span>
                                          </ForwardRef(TouchRipple)>
                                        </WithStyles(memo)>
                                      </button>
                                    </ForwardRef(ButtonBase)>
                                  </WithStyles(ForwardRef(ButtonBase))>
                                </ForwardRef(IconButton)>
                              </WithStyles(ForwardRef(IconButton))>
                              <WithStyles(ForwardRef(IconButton))
                                id="tour-next-btn"
                                onClick={[Function]}
                              >
                                <ForwardRef(IconButton)
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit",
                                      "colorPrimary": "MuiIconButton-colorPrimary",
                                      "colorSecondary": "MuiIconButton-colorSecondary",
                                      "disabled": "Mui-disabled",
                                      "edgeEnd": "MuiIconButton-edgeEnd",
                                      "edgeStart": "MuiIconButton-edgeStart",
                                      "label": "MuiIconButton-label",
                                      "root": "MuiIconButton-root",
                                      "sizeSmall": "MuiIconButton-sizeSmall",
                                    }
                                  }
                                  id="tour-next-btn"
                                  onClick={[Function]}
                                >
                                  <WithStyles(ForwardRef(ButtonBase))
                                    centerRipple={true}
                                    className="MuiIconButton-root"
                                    disabled={false}
                                    focusRipple={true}
                                    id="tour-next-btn"
                                    onClick={[Function]}
                                  >
                                    <ForwardRef(ButtonBase)
                                      centerRipple={true}
                                      className="MuiIconButton-root"
                                      classes={
                                        Object {
                                          "disabled": "Mui-disabled",
                                          "focusVisible": "Mui-focusVisible",
                                          "root": "MuiButtonBase-root",
                                        }
                                      }
                                      disabled={false}
                                      focusRipple={true}
                                      id="tour-next-btn"
                                      onClick={[Function]}
                                    >
                                      <button
                                        className="MuiButtonBase-root MuiIconButton-root"
                                        disabled={false}
                                        id="tour-next-btn"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragLeave={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex={0}
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label"
                                        >
                                          <ForwardRef
                                            className="makeStyles-navigation-26"
                                          >
                                            <WithStyles(ForwardRef(SvgIcon))
                                              className="makeStyles-navigation-26"
                                            >
                                              <ForwardRef(SvgIcon)
                                                className="makeStyles-navigation-26"
                                                classes={
                                                  Object {
                                                    "colorAction": "MuiSvgIcon-colorAction",
                                                    "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                    "colorError": "MuiSvgIcon-colorError",
                                                    "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                    "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                    "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                    "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                    "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                    "root": "MuiSvgIcon-root",
                                                  }
                                                }
                                              >
                                                <svg
                                                  aria-hidden={true}
                                                  className="MuiSvgIcon-root makeStyles-navigation-26"
                                                  focusable="false"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <path
                                                    d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                                  />
                                                </svg>
                                              </ForwardRef(SvgIcon)>
                                            </WithStyles(ForwardRef(SvgIcon))>
                                          </ForwardRef>
                                        </span>
                                        <WithStyles(memo)
                                          center={true}
                                        >
                                          <ForwardRef(TouchRipple)
                                            center={true}
                                            classes={
                                              Object {
                                                "child": "MuiTouchRipple-child",
                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                "ripple": "MuiTouchRipple-ripple",
                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                "root": "MuiTouchRipple-root",
                                              }
                                            }
                                          >
                                            <span
                                              className="MuiTouchRipple-root"
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                component={null}
                                                exit={true}
                                              />
                                            </span>
                                          </ForwardRef(TouchRipple)>
                                        </WithStyles(memo)>
                                      </button>
                                    </ForwardRef(ButtonBase)>
                                  </WithStyles(ForwardRef(ButtonBase))>
                                </ForwardRef(IconButton)>
                              </WithStyles(ForwardRef(IconButton))>
                            </div>
                          </Styled(MuiBox)>
                        </Memo()>
                      </div>
                    </Styled(MuiBox)>
                    <styled.span
                      accentColor="#3f51b5"
                      data-tour-elem="badge"
                    >
                      <StyledComponent
                        accentColor="#3f51b5"
                        data-tour-elem="badge"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-EHOje",
                              "isStatic": false,
                              "lastClassName": "doXVdu",
                              "rules": Array [
                                "
  position: absolute;
  font-family: monospace;
  background: var(--reactour-accent);
  background: ",
                                [Function],
                                ";
  height: 1.875em;
  line-height: 2;
  padding-left: 0.8125em;
  padding-right: 0.8125em;
  font-size: 1em;
  border-radius: 1.625em;
  color: white;
  text-align: center;
  box-shadow: 0 0.25em 0.5em rgba(0, 0, 0, 0.3);
  top: -0.8125em;
  left: -0.8125em;
",
                              ],
                            },
                            "displayName": "styled.span",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-EHOje",
                            "target": "span",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <span
                          className="sc-EHOje doXVdu"
                          data-tour-elem="badge"
                        >
                          7 of 12
                        </span>
                      </StyledComponent>
                    </styled.span>
                    <Styled(Close)
                      className="reactour__close"
                      onClick={[Function]}
                    >
                      <StyledComponent
                        className="reactour__close"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-bxivhb",
                              "isStatic": false,
                              "lastClassName": "eTpeTG",
                              "rules": Array [
                                "
  position: absolute;
  top: 22px;
  right: 22px;
  width: 9px;
  height: 9px;
  color: #5e5e5e;
  &:hover {
    color: #000;
  }
",
                              ],
                            },
                            "displayName": "Styled(Close)",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-bxivhb",
                            "target": [Function],
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        onClick={[Function]}
                      >
                        <Close
                          className="sc-bxivhb eTpeTG reactour__close"
                          onClick={[Function]}
                        >
                          <styled.button
                            className="sc-bxivhb eTpeTG reactour__close"
                            onClick={[Function]}
                          >
                            <StyledComponent
                              className="sc-bxivhb eTpeTG reactour__close"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-bdVaJa",
                                    "isStatic": false,
                                    "lastClassName": "cYQqRL",
                                    "rules": Array [
                                      "
  display: block;
  padding: 0;
  border: 0;
  background: none;
  font-size: 0;
  cursor: ",
                                      [Function],
                                      ";
",
                                    ],
                                  },
                                  "displayName": "styled.button",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-bdVaJa",
                                  "target": "button",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              onClick={[Function]}
                            >
                              <button
                                className="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                                onClick={[Function]}
                              >
                                <svg
                                  viewBox="0 0 9.1 9.1"
                                >
                                  <path
                                    d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                                    fill="currentColor"
                                  />
                                </svg>
                              </button>
                            </StyledComponent>
                          </styled.button>
                        </Close>
                      </StyledComponent>
                    </Styled(Close)>
                  </div>
                </StyledComponent>
              </styled.div>
            </div>
            <div
              data-focus-guard={true}
              style={
                Object {
                  "height": "0px",
                  "left": "1px",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "fixed",
                  "top": "1px",
                  "width": "1px",
                }
              }
              tabIndex={0}
            />
          </ForwardRef>
        </ForwardRef>
      </Portal>
    </Portal>
  </Tour>
</Memo()>
`;

exports[`Dashboard Tour renders first welcome step (1/12) 1`] = `
<Memo()
  tourProps={
    Object {
      "OmniPanelViewIndex": Object {
        "0": "MainMenu",
        "1": "Doors",
        "2": "Lifts",
        "3": "Robots",
        "4": "Dispensers",
        "5": "Commands",
        "6": "Negotiations",
        "Commands": 5,
        "Dispensers": 4,
        "Doors": 1,
        "Lifts": 2,
        "MainMenu": 0,
        "Negotiations": 6,
        "Robots": 3,
      },
      "doorSpotlight": Object {
        "value": "main_door",
      },
      "setDoorSpotlight": [MockFunction],
      "setTourSettingsAndOmniPanel": [MockFunction],
      "setTourShowOmniPanel": [MockFunction],
      "setTourState": [MockFunction],
      "tourState": true,
    }
  }
>
  <Tour
    accentColor="#3f51b5"
    badgeContent={[Function]}
    closeWithMask={false}
    disableFocusLock={false}
    disableInteraction={false}
    disableKeyboardNavigation={
      Array [
        "right",
        "left",
      ]
    }
    isOpen={true}
    maskSpace={10}
    onRequestClose={[Function]}
    rounded={5}
    scrollDuration={1}
    showButtons={false}
    showCloseButton={true}
    showNavigation={false}
    showNavigationNumber={false}
    showNumber={true}
    startAt={0}
    steps={
      Array [
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "[class=\\"leaflet-control-zoom leaflet-bar leaflet-control\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "[class= \\"leaflet-control-layers leaflet-control\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "[class=\\"leaflet-image-layer leaflet-zoom-animated\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[id=\\"toggle-omnipanel-btn\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-component=\\"MainMenu\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-item=\\"Doors\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-name=\\"main_door\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-item= \\"Commands\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-component=\\"LoopForm\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[id=\\"show-settings-btn\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": ".MuiDrawer-paper",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
      ]
    }
    updateDelay={1}
  >
    <Portal>
      <Portal
        containerInfo={
          <div
            id="___reactour"
          >
            <div
              class="sc-dnqmqq kWwJhA"
            >
              <svg
                height="0"
                width="0"
                xmlns="http://www.w3.org/2000/svg"
              >
                <defs>
                  <mask
                    id="mask-main"
                  >
                    <rect
                      fill="white"
                      height="0"
                      width="0"
                      x="0"
                      y="0"
                    />
                    <rect
                      fill="black"
                      height="20"
                      width="20"
                      x="0"
                      y="0"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="-1"
                      y="-1"
                    />
                    <circle
                      cx="5"
                      cy="5"
                      fill="black"
                      r="5"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="16"
                      y="-1"
                    />
                    <circle
                      cx="15"
                      cy="5"
                      fill="black"
                      r="5"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="-1"
                      y="16"
                    />
                    <circle
                      cx="5"
                      cy="15"
                      fill="black"
                      r="5"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="16"
                      y="16"
                    />
                    <circle
                      cx="15"
                      cy="15"
                      fill="black "
                      r="5"
                    />
                  </mask>
                  <clippath
                    id="clip-path"
                  >
                    <rect
                      height="0"
                      width="0"
                      x="0"
                      y="0"
                    />
                    <rect
                      height="20"
                      width="0"
                      x="0"
                      y="0"
                    />
                    <rect
                      height="20"
                      width="0"
                      x="10"
                      y="0"
                    />
                    <rect
                      height="0"
                      width="0"
                      x="0"
                      y="10"
                    />
                  </clippath>
                </defs>
                <rect
                  fill="currentColor"
                  height="0"
                  mask="url(#mask-main)"
                  width="0"
                  x="0"
                  y="0"
                />
                <rect
                  clip-path="url(#clip-path)"
                  fill="currentColor"
                  height="0"
                  pointer-events="auto"
                  width="0"
                  x="0"
                  y="0"
                />
                <rect
                  class="reactour__mask--disable-interaction undefined"
                  display="none"
                  fill="transparent"
                  height="20"
                  pointer-events="auto"
                  width="20"
                  x="0"
                  y="0"
                />
              </svg>
            </div>
            <div
              data-focus-guard="true"
              style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
              tabindex="0"
            />
            <div
              data-focus-guard="true"
              style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
              tabindex="1"
            />
            <div
              data-focus-lock-disabled="false"
            >
              <div
                class="sc-ifAKCX dYTwIk reactour__helper reactour__helper--is-open"
                role="dialog"
                style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                tabindex="-1"
              >
                <div
                  class="MuiBox-root MuiBox-root-4"
                  id="stepNode"
                >
                  <h6
                    class="MuiTypography-root MuiTypography-h6"
                  >
                    Welcome to RoMi dashboard
                  </h6>
                  <div
                    class="MuiBox-root MuiBox-root-6"
                  >
                    <button
                      class="MuiButtonBase-root MuiIconButton-root"
                      id="tour-next-btn"
                      tabindex="0"
                      type="button"
                    >
                      <span
                        class="MuiIconButton-label"
                      >
                        <svg
                          aria-hidden="true"
                          class="MuiSvgIcon-root makeStyles-navigation-5"
                          focusable="false"
                          viewBox="0 0 24 24"
                        >
                          <path
                            d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                          />
                        </svg>
                      </span>
                      <span
                        class="MuiTouchRipple-root"
                      />
                    </button>
                  </div>
                </div>
                <span
                  class="sc-EHOje doXVdu"
                  data-tour-elem="badge"
                >
                  1 of 12
                </span>
                <button
                  class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                >
                  <svg
                    viewBox="0 0 9.1 9.1"
                  >
                    <path
                      d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                      fill="currentColor"
                    />
                  </svg>
                </button>
              </div>
            </div>
            <div
              data-focus-guard="true"
              style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
              tabindex="0"
            />
          </div>
        }
      >
        <GlobalStyleComponent />
        <ReactourResizeObserver
          refresh={[Function]}
          step={
            Object {
              "action": [Function],
              "content": [Function],
              "selector": "",
              "style": Object {
                "backgroundColor": "#7986cb",
                "borderRadius": "5px",
                "color": "#fff",
              },
            }
          }
        />
        <ReactourMutationObserver
          refresh={[Function]}
          step={
            Object {
              "action": [Function],
              "content": [Function],
              "selector": "",
              "style": Object {
                "backgroundColor": "#7986cb",
                "borderRadius": "5px",
                "color": "#fff",
              },
            }
          }
        />
        <SvgMask
          disableInteraction={false}
          disableInteractionClassName="reactour__mask--disable-interaction undefined"
          forwardRef={[Function]}
          onClick={[Function]}
          padding={10}
          rounded={5}
          targetHeight={0}
          targetLeft={0}
          targetTop={0}
          targetWidth={0}
          windowHeight={0}
          windowWidth={0}
        >
          <styled.div
            onClick={[Function]}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-dnqmqq",
                    "isStatic": false,
                    "lastClassName": "kWwJhA",
                    "rules": Array [
                      "
  opacity: ",
                      [Function],
                      ";
  color: ",
                      [Function],
                      ";
  width: 100%;
  left: 0;
  top: 0;
  height: 100%;
  position: fixed;
  z-index: 99999;
  pointer-events: none;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-dnqmqq",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
            >
              <div
                className="sc-dnqmqq kWwJhA"
                onClick={[Function]}
              >
                <svg
                  height={0}
                  width={0}
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <defs>
                    <mask
                      id="mask-main"
                    >
                      <rect
                        fill="white"
                        height={0}
                        width={0}
                        x={0}
                        y={0}
                      />
                      <rect
                        fill="black"
                        height={20}
                        width={20}
                        x={0}
                        y={0}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={-1}
                        y={-1}
                      />
                      <circle
                        cx={5}
                        cy={5}
                        fill="black"
                        r={5}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={16}
                        y={-1}
                      />
                      <circle
                        cx={15}
                        cy={5}
                        fill="black"
                        r={5}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={-1}
                        y={16}
                      />
                      <circle
                        cx={5}
                        cy={15}
                        fill="black"
                        r={5}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={16}
                        y={16}
                      />
                      <circle
                        cx={15}
                        cy={15}
                        fill="black "
                        r={5}
                      />
                    </mask>
                    <clipPath
                      id="clip-path"
                    >
                      <rect
                        height={0}
                        width={0}
                        x={0}
                        y={0}
                      />
                      <rect
                        height={20}
                        width={0}
                        x={0}
                        y={0}
                      />
                      <rect
                        height={20}
                        width={0}
                        x={10}
                        y={0}
                      />
                      <rect
                        height={0}
                        width={0}
                        x={0}
                        y={10}
                      />
                    </clipPath>
                  </defs>
                  <rect
                    fill="currentColor"
                    height={0}
                    mask="url(#mask-main)"
                    width={0}
                    x={0}
                    y={0}
                  />
                  <rect
                    clipPath="url(#clip-path)"
                    fill="currentColor"
                    height={0}
                    pointerEvents="auto"
                    width={0}
                    x={0}
                    y={0}
                  />
                  <rect
                    className="reactour__mask--disable-interaction undefined"
                    display="none"
                    fill="transparent"
                    height={20}
                    pointerEvents="auto"
                    width={20}
                    x={0}
                    y={0}
                  />
                </svg>
              </div>
            </StyledComponent>
          </styled.div>
        </SvgMask>
        <ForwardRef
          disabled={false}
        >
          <ForwardRef
            as="div"
            autoFocus={true}
            disabled={false}
            lockProps={Object {}}
            noFocusGuards={false}
            persistentFocus={false}
            returnFocus={false}
            sideCar={[Function]}
          >
            <div
              data-focus-guard={true}
              key="guard-first"
              style={
                Object {
                  "height": "0px",
                  "left": "1px",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "fixed",
                  "top": "1px",
                  "width": "1px",
                }
              }
              tabIndex={0}
            />
            <div
              data-focus-guard={true}
              key="guard-nearest"
              style={
                Object {
                  "height": "0px",
                  "left": "1px",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "fixed",
                  "top": "1px",
                  "width": "1px",
                }
              }
              tabIndex={1}
            />
            <SideEffect(FocusWatcher)
              autoFocus={true}
              disabled={false}
              id={Object {}}
              observed={
                <div
                  data-focus-lock-disabled="false"
                >
                  <div
                    class="sc-ifAKCX dYTwIk reactour__helper reactour__helper--is-open"
                    role="dialog"
                    style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                    tabindex="-1"
                  >
                    <div
                      class="MuiBox-root MuiBox-root-4"
                      id="stepNode"
                    >
                      <h6
                        class="MuiTypography-root MuiTypography-h6"
                      >
                        Welcome to RoMi dashboard
                      </h6>
                      <div
                        class="MuiBox-root MuiBox-root-6"
                      >
                        <button
                          class="MuiButtonBase-root MuiIconButton-root"
                          id="tour-next-btn"
                          tabindex="0"
                          type="button"
                        >
                          <span
                            class="MuiIconButton-label"
                          >
                            <svg
                              aria-hidden="true"
                              class="MuiSvgIcon-root makeStyles-navigation-5"
                              focusable="false"
                              viewBox="0 0 24 24"
                            >
                              <path
                                d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                              />
                            </svg>
                          </span>
                          <span
                            class="MuiTouchRipple-root"
                          />
                        </button>
                      </div>
                    </div>
                    <span
                      class="sc-EHOje doXVdu"
                      data-tour-elem="badge"
                    >
                      1 of 12
                    </span>
                    <button
                      class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                    >
                      <svg
                        viewBox="0 0 9.1 9.1"
                      >
                        <path
                          d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                          fill="currentColor"
                        />
                      </svg>
                    </button>
                  </div>
                </div>
              }
              onActivation={[Function]}
              onDeactivation={[Function]}
              persistentFocus={false}
              returnFocus={[Function]}
              shards={Array []}
              sideCar={
                Object {
                  "assignMedium": [Function],
                  "assignSyncMedium": [Function],
                  "options": Object {
                    "async": true,
                    "ssr": false,
                  },
                  "read": [Function],
                  "useMedium": [Function],
                }
              }
            >
              <FocusWatcher
                autoFocus={true}
                disabled={false}
                id={Object {}}
                observed={
                  <div
                    data-focus-lock-disabled="false"
                  >
                    <div
                      class="sc-ifAKCX dYTwIk reactour__helper reactour__helper--is-open"
                      role="dialog"
                      style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                      tabindex="-1"
                    >
                      <div
                        class="MuiBox-root MuiBox-root-4"
                        id="stepNode"
                      >
                        <h6
                          class="MuiTypography-root MuiTypography-h6"
                        >
                          Welcome to RoMi dashboard
                        </h6>
                        <div
                          class="MuiBox-root MuiBox-root-6"
                        >
                          <button
                            class="MuiButtonBase-root MuiIconButton-root"
                            id="tour-next-btn"
                            tabindex="0"
                            type="button"
                          >
                            <span
                              class="MuiIconButton-label"
                            >
                              <svg
                                aria-hidden="true"
                                class="MuiSvgIcon-root makeStyles-navigation-5"
                                focusable="false"
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                />
                              </svg>
                            </span>
                            <span
                              class="MuiTouchRipple-root"
                            />
                          </button>
                        </div>
                      </div>
                      <span
                        class="sc-EHOje doXVdu"
                        data-tour-elem="badge"
                      >
                        1 of 12
                      </span>
                      <button
                        class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                      >
                        <svg
                          viewBox="0 0 9.1 9.1"
                        >
                          <path
                            d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                            fill="currentColor"
                          />
                        </svg>
                      </button>
                    </div>
                  </div>
                }
                onActivation={[Function]}
                onDeactivation={[Function]}
                persistentFocus={false}
                returnFocus={[Function]}
                shards={Array []}
                sideCar={
                  Object {
                    "assignMedium": [Function],
                    "assignSyncMedium": [Function],
                    "options": Object {
                      "async": true,
                      "ssr": false,
                    },
                    "read": [Function],
                    "useMedium": [Function],
                  }
                }
              />
            </SideEffect(FocusWatcher)>
            <div
              data-focus-lock-disabled={false}
              onBlur={[Function]}
              onFocus={[Function]}
            >
              <styled.div
                accentColor="#3f51b5"
                className="reactour__helper reactour__helper--is-open"
                current={0}
                defaultStyles={true}
                padding={10}
                role="dialog"
                rounded={5}
                style={
                  Object {
                    "backgroundColor": "#7986cb",
                    "borderRadius": "5px",
                    "color": "#fff",
                  }
                }
                tabIndex={-1}
                targetBottom={0}
                targetHeight={0}
                targetLeft={0}
                targetRight={0}
                targetTop={0}
                targetWidth={0}
                windowHeight={0}
                windowWidth={0}
              >
                <StyledComponent
                  accentColor="#3f51b5"
                  className="reactour__helper reactour__helper--is-open"
                  current={0}
                  defaultStyles={true}
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-ifAKCX",
                        "isStatic": false,
                        "lastClassName": "dYTwIk",
                        "rules": Array [
                          "
  --reactour-accent: ",
                          [Function],
                          ";
  ",
                          [Function],
                          "
  position: fixed;
  transition: transform 0.3s;
  top: 0;
  left: 0;
  z-index: 1000000;

  transform: ",
                          [Function],
                          ";
",
                        ],
                      },
                      "displayName": "styled.div",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-ifAKCX",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={
                    Object {
                      "current": <div
                        class="sc-ifAKCX dYTwIk reactour__helper reactour__helper--is-open"
                        role="dialog"
                        style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                        tabindex="-1"
                      >
                        <div
                          class="MuiBox-root MuiBox-root-4"
                          id="stepNode"
                        >
                          <h6
                            class="MuiTypography-root MuiTypography-h6"
                          >
                            Welcome to RoMi dashboard
                          </h6>
                          <div
                            class="MuiBox-root MuiBox-root-6"
                          >
                            <button
                              class="MuiButtonBase-root MuiIconButton-root"
                              id="tour-next-btn"
                              tabindex="0"
                              type="button"
                            >
                              <span
                                class="MuiIconButton-label"
                              >
                                <svg
                                  aria-hidden="true"
                                  class="MuiSvgIcon-root makeStyles-navigation-5"
                                  focusable="false"
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                  />
                                </svg>
                              </span>
                              <span
                                class="MuiTouchRipple-root"
                              />
                            </button>
                          </div>
                        </div>
                        <span
                          class="sc-EHOje doXVdu"
                          data-tour-elem="badge"
                        >
                          1 of 12
                        </span>
                        <button
                          class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                        >
                          <svg
                            viewBox="0 0 9.1 9.1"
                          >
                            <path
                              d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                              fill="currentColor"
                            />
                          </svg>
                        </button>
                      </div>,
                    }
                  }
                  padding={10}
                  role="dialog"
                  rounded={5}
                  style={
                    Object {
                      "backgroundColor": "#7986cb",
                      "borderRadius": "5px",
                      "color": "#fff",
                    }
                  }
                  tabIndex={-1}
                  targetBottom={0}
                  targetHeight={0}
                  targetLeft={0}
                  targetRight={0}
                  targetTop={0}
                  targetWidth={0}
                  windowHeight={0}
                  windowWidth={0}
                >
                  <div
                    className="sc-ifAKCX dYTwIk reactour__helper reactour__helper--is-open"
                    role="dialog"
                    style={
                      Object {
                        "backgroundColor": "#7986cb",
                        "borderRadius": "5px",
                        "color": "#fff",
                      }
                    }
                    tabIndex={-1}
                  >
                    <Styled(MuiBox)
                      id="stepNode"
                    >
                      <div
                        className="MuiBox-root MuiBox-root-4"
                        id="stepNode"
                      >
                        <WithStyles(ForwardRef(Typography))
                          variant="h6"
                        >
                          <ForwardRef(Typography)
                            classes={
                              Object {
                                "alignCenter": "MuiTypography-alignCenter",
                                "alignJustify": "MuiTypography-alignJustify",
                                "alignLeft": "MuiTypography-alignLeft",
                                "alignRight": "MuiTypography-alignRight",
                                "body1": "MuiTypography-body1",
                                "body2": "MuiTypography-body2",
                                "button": "MuiTypography-button",
                                "caption": "MuiTypography-caption",
                                "colorError": "MuiTypography-colorError",
                                "colorInherit": "MuiTypography-colorInherit",
                                "colorPrimary": "MuiTypography-colorPrimary",
                                "colorSecondary": "MuiTypography-colorSecondary",
                                "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                "displayBlock": "MuiTypography-displayBlock",
                                "displayInline": "MuiTypography-displayInline",
                                "gutterBottom": "MuiTypography-gutterBottom",
                                "h1": "MuiTypography-h1",
                                "h2": "MuiTypography-h2",
                                "h3": "MuiTypography-h3",
                                "h4": "MuiTypography-h4",
                                "h5": "MuiTypography-h5",
                                "h6": "MuiTypography-h6",
                                "noWrap": "MuiTypography-noWrap",
                                "overline": "MuiTypography-overline",
                                "paragraph": "MuiTypography-paragraph",
                                "root": "MuiTypography-root",
                                "srOnly": "MuiTypography-srOnly",
                                "subtitle1": "MuiTypography-subtitle1",
                                "subtitle2": "MuiTypography-subtitle2",
                              }
                            }
                            variant="h6"
                          >
                            <h6
                              className="MuiTypography-root MuiTypography-h6"
                            >
                              Welcome to RoMi dashboard
                            </h6>
                          </ForwardRef(Typography)>
                        </WithStyles(ForwardRef(Typography))>
                        <Memo()
                          goTo={[Function]}
                          step={1}
                        >
                          <Styled(MuiBox)>
                            <div
                              className="MuiBox-root MuiBox-root-6"
                            >
                              <WithStyles(ForwardRef(IconButton))
                                id="tour-next-btn"
                                onClick={[Function]}
                              >
                                <ForwardRef(IconButton)
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit",
                                      "colorPrimary": "MuiIconButton-colorPrimary",
                                      "colorSecondary": "MuiIconButton-colorSecondary",
                                      "disabled": "Mui-disabled",
                                      "edgeEnd": "MuiIconButton-edgeEnd",
                                      "edgeStart": "MuiIconButton-edgeStart",
                                      "label": "MuiIconButton-label",
                                      "root": "MuiIconButton-root",
                                      "sizeSmall": "MuiIconButton-sizeSmall",
                                    }
                                  }
                                  id="tour-next-btn"
                                  onClick={[Function]}
                                >
                                  <WithStyles(ForwardRef(ButtonBase))
                                    centerRipple={true}
                                    className="MuiIconButton-root"
                                    disabled={false}
                                    focusRipple={true}
                                    id="tour-next-btn"
                                    onClick={[Function]}
                                  >
                                    <ForwardRef(ButtonBase)
                                      centerRipple={true}
                                      className="MuiIconButton-root"
                                      classes={
                                        Object {
                                          "disabled": "Mui-disabled",
                                          "focusVisible": "Mui-focusVisible",
                                          "root": "MuiButtonBase-root",
                                        }
                                      }
                                      disabled={false}
                                      focusRipple={true}
                                      id="tour-next-btn"
                                      onClick={[Function]}
                                    >
                                      <button
                                        className="MuiButtonBase-root MuiIconButton-root"
                                        disabled={false}
                                        id="tour-next-btn"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragLeave={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex={0}
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label"
                                        >
                                          <ForwardRef
                                            className="makeStyles-navigation-5"
                                          >
                                            <WithStyles(ForwardRef(SvgIcon))
                                              className="makeStyles-navigation-5"
                                            >
                                              <ForwardRef(SvgIcon)
                                                className="makeStyles-navigation-5"
                                                classes={
                                                  Object {
                                                    "colorAction": "MuiSvgIcon-colorAction",
                                                    "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                    "colorError": "MuiSvgIcon-colorError",
                                                    "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                    "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                    "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                    "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                    "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                    "root": "MuiSvgIcon-root",
                                                  }
                                                }
                                              >
                                                <svg
                                                  aria-hidden={true}
                                                  className="MuiSvgIcon-root makeStyles-navigation-5"
                                                  focusable="false"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <path
                                                    d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                                  />
                                                </svg>
                                              </ForwardRef(SvgIcon)>
                                            </WithStyles(ForwardRef(SvgIcon))>
                                          </ForwardRef>
                                        </span>
                                        <WithStyles(memo)
                                          center={true}
                                        >
                                          <ForwardRef(TouchRipple)
                                            center={true}
                                            classes={
                                              Object {
                                                "child": "MuiTouchRipple-child",
                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                "ripple": "MuiTouchRipple-ripple",
                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                "root": "MuiTouchRipple-root",
                                              }
                                            }
                                          >
                                            <span
                                              className="MuiTouchRipple-root"
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                component={null}
                                                exit={true}
                                              />
                                            </span>
                                          </ForwardRef(TouchRipple)>
                                        </WithStyles(memo)>
                                      </button>
                                    </ForwardRef(ButtonBase)>
                                  </WithStyles(ForwardRef(ButtonBase))>
                                </ForwardRef(IconButton)>
                              </WithStyles(ForwardRef(IconButton))>
                            </div>
                          </Styled(MuiBox)>
                        </Memo()>
                      </div>
                    </Styled(MuiBox)>
                    <styled.span
                      accentColor="#3f51b5"
                      data-tour-elem="badge"
                    >
                      <StyledComponent
                        accentColor="#3f51b5"
                        data-tour-elem="badge"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-EHOje",
                              "isStatic": false,
                              "lastClassName": "doXVdu",
                              "rules": Array [
                                "
  position: absolute;
  font-family: monospace;
  background: var(--reactour-accent);
  background: ",
                                [Function],
                                ";
  height: 1.875em;
  line-height: 2;
  padding-left: 0.8125em;
  padding-right: 0.8125em;
  font-size: 1em;
  border-radius: 1.625em;
  color: white;
  text-align: center;
  box-shadow: 0 0.25em 0.5em rgba(0, 0, 0, 0.3);
  top: -0.8125em;
  left: -0.8125em;
",
                              ],
                            },
                            "displayName": "styled.span",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-EHOje",
                            "target": "span",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <span
                          className="sc-EHOje doXVdu"
                          data-tour-elem="badge"
                        >
                          1 of 12
                        </span>
                      </StyledComponent>
                    </styled.span>
                    <Styled(Close)
                      className="reactour__close"
                      onClick={[Function]}
                    >
                      <StyledComponent
                        className="reactour__close"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-bxivhb",
                              "isStatic": false,
                              "lastClassName": "eTpeTG",
                              "rules": Array [
                                "
  position: absolute;
  top: 22px;
  right: 22px;
  width: 9px;
  height: 9px;
  color: #5e5e5e;
  &:hover {
    color: #000;
  }
",
                              ],
                            },
                            "displayName": "Styled(Close)",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-bxivhb",
                            "target": [Function],
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        onClick={[Function]}
                      >
                        <Close
                          className="sc-bxivhb eTpeTG reactour__close"
                          onClick={[Function]}
                        >
                          <styled.button
                            className="sc-bxivhb eTpeTG reactour__close"
                            onClick={[Function]}
                          >
                            <StyledComponent
                              className="sc-bxivhb eTpeTG reactour__close"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-bdVaJa",
                                    "isStatic": false,
                                    "lastClassName": "cYQqRL",
                                    "rules": Array [
                                      "
  display: block;
  padding: 0;
  border: 0;
  background: none;
  font-size: 0;
  cursor: ",
                                      [Function],
                                      ";
",
                                    ],
                                  },
                                  "displayName": "styled.button",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-bdVaJa",
                                  "target": "button",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              onClick={[Function]}
                            >
                              <button
                                className="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                                onClick={[Function]}
                              >
                                <svg
                                  viewBox="0 0 9.1 9.1"
                                >
                                  <path
                                    d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                                    fill="currentColor"
                                  />
                                </svg>
                              </button>
                            </StyledComponent>
                          </styled.button>
                        </Close>
                      </StyledComponent>
                    </Styled(Close)>
                  </div>
                </StyledComponent>
              </styled.div>
            </div>
            <div
              data-focus-guard={true}
              style={
                Object {
                  "height": "0px",
                  "left": "1px",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "fixed",
                  "top": "1px",
                  "width": "1px",
                }
              }
              tabIndex={0}
            />
          </ForwardRef>
        </ForwardRef>
      </Portal>
    </Portal>
  </Tour>
</Memo()>
`;

exports[`Dashboard Tour renders floor plan button step (3/12) 1`] = `
<Memo()
  tourProps={
    Object {
      "OmniPanelViewIndex": Object {
        "0": "MainMenu",
        "1": "Doors",
        "2": "Lifts",
        "3": "Robots",
        "4": "Dispensers",
        "5": "Commands",
        "6": "Negotiations",
        "Commands": 5,
        "Dispensers": 4,
        "Doors": 1,
        "Lifts": 2,
        "MainMenu": 0,
        "Negotiations": 6,
        "Robots": 3,
      },
      "doorSpotlight": Object {
        "value": "main_door",
      },
      "setDoorSpotlight": [MockFunction],
      "setTourSettingsAndOmniPanel": [MockFunction] {
        "calls": Array [
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
      "setTourShowOmniPanel": [MockFunction],
      "setTourState": [MockFunction],
      "tourState": true,
    }
  }
>
  <Tour
    accentColor="#3f51b5"
    badgeContent={[Function]}
    closeWithMask={false}
    disableFocusLock={false}
    disableInteraction={false}
    disableKeyboardNavigation={
      Array [
        "right",
        "left",
      ]
    }
    isOpen={true}
    maskSpace={10}
    onRequestClose={[Function]}
    rounded={5}
    scrollDuration={1}
    showButtons={false}
    showCloseButton={true}
    showNavigation={false}
    showNavigationNumber={false}
    showNumber={true}
    startAt={0}
    steps={
      Array [
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "[class=\\"leaflet-control-zoom leaflet-bar leaflet-control\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "[class= \\"leaflet-control-layers leaflet-control\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "[class=\\"leaflet-image-layer leaflet-zoom-animated\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[id=\\"toggle-omnipanel-btn\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-component=\\"MainMenu\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-item=\\"Doors\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-name=\\"main_door\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-item= \\"Commands\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-component=\\"LoopForm\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[id=\\"show-settings-btn\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": ".MuiDrawer-paper",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
      ]
    }
    updateDelay={1}
  >
    <Portal>
      <Portal
        containerInfo={
          <div
            id="___reactour"
          >
            <div
              class="sc-dnqmqq kWwJhA"
            >
              <svg
                height="768"
                width="1024"
                xmlns="http://www.w3.org/2000/svg"
              >
                <defs>
                  <mask
                    id="mask-main"
                  >
                    <rect
                      fill="white"
                      height="768"
                      width="1024"
                      x="0"
                      y="0"
                    />
                    <rect
                      fill="black"
                      height="20"
                      width="20"
                      x="502"
                      y="768"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="501"
                      y="767"
                    />
                    <circle
                      cx="507"
                      cy="773"
                      fill="black"
                      r="5"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="518"
                      y="767"
                    />
                    <circle
                      cx="517"
                      cy="773"
                      fill="black"
                      r="5"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="501"
                      y="784"
                    />
                    <circle
                      cx="507"
                      cy="783"
                      fill="black"
                      r="5"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="518"
                      y="784"
                    />
                    <circle
                      cx="517"
                      cy="783"
                      fill="black "
                      r="5"
                    />
                  </mask>
                  <clippath
                    id="clip-path"
                  >
                    <rect
                      height="768"
                      width="1024"
                      x="0"
                      y="0"
                    />
                    <rect
                      height="20"
                      width="502"
                      x="0"
                      y="768"
                    />
                    <rect
                      height="20"
                      width="522"
                      x="522"
                      y="768"
                    />
                    <rect
                      height="0"
                      width="1024"
                      x="0"
                      y="788"
                    />
                  </clippath>
                </defs>
                <rect
                  fill="currentColor"
                  height="768"
                  mask="url(#mask-main)"
                  width="1024"
                  x="0"
                  y="0"
                />
                <rect
                  clip-path="url(#clip-path)"
                  fill="currentColor"
                  height="768"
                  pointer-events="auto"
                  width="1024"
                  x="0"
                  y="0"
                />
                <rect
                  class="reactour__mask--disable-interaction undefined"
                  display="none"
                  fill="transparent"
                  height="20"
                  pointer-events="auto"
                  width="20"
                  x="502"
                  y="768"
                />
              </svg>
            </div>
            <div
              data-focus-guard="true"
              style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
              tabindex="0"
            />
            <div
              data-focus-guard="true"
              style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
              tabindex="1"
            />
            <div
              data-focus-lock-disabled="false"
            >
              <div
                class="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                role="dialog"
                style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                tabindex="-1"
              >
                <div
                  class="MuiBox-root MuiBox-root-10"
                  id="stepNode"
                >
                  <h6
                    class="MuiTypography-root MuiTypography-h6"
                  >
                    Use the floor plan button to switch between available levels and enabling / disabling the view of different components.
                  </h6>
                  <div
                    class="MuiBox-root MuiBox-root-12"
                  >
                    <button
                      class="MuiButtonBase-root MuiIconButton-root"
                      id="tour-back-btn"
                      tabindex="0"
                      type="button"
                    >
                      <span
                        class="MuiIconButton-label"
                      >
                        <svg
                          aria-hidden="true"
                          class="MuiSvgIcon-root makeStyles-navigation-11"
                          focusable="false"
                          viewBox="0 0 24 24"
                        >
                          <path
                            d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                          />
                        </svg>
                      </span>
                      <span
                        class="MuiTouchRipple-root"
                      />
                    </button>
                    <button
                      class="MuiButtonBase-root MuiIconButton-root"
                      id="tour-next-btn"
                      tabindex="0"
                      type="button"
                    >
                      <span
                        class="MuiIconButton-label"
                      >
                        <svg
                          aria-hidden="true"
                          class="MuiSvgIcon-root makeStyles-navigation-11"
                          focusable="false"
                          viewBox="0 0 24 24"
                        >
                          <path
                            d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                          />
                        </svg>
                      </span>
                      <span
                        class="MuiTouchRipple-root"
                      />
                    </button>
                  </div>
                </div>
                <span
                  class="sc-EHOje doXVdu"
                  data-tour-elem="badge"
                >
                  3 of 12
                </span>
                <button
                  class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                >
                  <svg
                    viewBox="0 0 9.1 9.1"
                  >
                    <path
                      d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                      fill="currentColor"
                    />
                  </svg>
                </button>
              </div>
            </div>
            <div
              data-focus-guard="true"
              style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
              tabindex="0"
            />
          </div>
        }
      >
        <GlobalStyleComponent />
        <ReactourResizeObserver
          refresh={[Function]}
          step={
            Object {
              "action": [Function],
              "content": [Function],
              "selector": "[class=\\"leaflet-control-zoom leaflet-bar leaflet-control\\"]",
              "style": Object {
                "backgroundColor": "#7986cb",
                "borderRadius": "5px",
                "color": "#fff",
              },
            }
          }
        />
        <ReactourMutationObserver
          refresh={[Function]}
          step={
            Object {
              "action": [Function],
              "content": [Function],
              "selector": "[class=\\"leaflet-control-zoom leaflet-bar leaflet-control\\"]",
              "style": Object {
                "backgroundColor": "#7986cb",
                "borderRadius": "5px",
                "color": "#fff",
              },
            }
          }
        />
        <SvgMask
          disableInteraction={false}
          disableInteractionClassName="reactour__mask--disable-interaction undefined"
          forwardRef={[Function]}
          onClick={[Function]}
          padding={10}
          rounded={5}
          targetHeight={0}
          targetLeft={512}
          targetTop={778}
          targetWidth={0}
          windowHeight={768}
          windowWidth={1024}
        >
          <styled.div
            onClick={[Function]}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-dnqmqq",
                    "isStatic": false,
                    "lastClassName": "kWwJhA",
                    "rules": Array [
                      "
  opacity: ",
                      [Function],
                      ";
  color: ",
                      [Function],
                      ";
  width: 100%;
  left: 0;
  top: 0;
  height: 100%;
  position: fixed;
  z-index: 99999;
  pointer-events: none;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-dnqmqq",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
            >
              <div
                className="sc-dnqmqq kWwJhA"
                onClick={[Function]}
              >
                <svg
                  height={768}
                  width={1024}
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <defs>
                    <mask
                      id="mask-main"
                    >
                      <rect
                        fill="white"
                        height={768}
                        width={1024}
                        x={0}
                        y={0}
                      />
                      <rect
                        fill="black"
                        height={20}
                        width={20}
                        x={502}
                        y={768}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={501}
                        y={767}
                      />
                      <circle
                        cx={507}
                        cy={773}
                        fill="black"
                        r={5}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={518}
                        y={767}
                      />
                      <circle
                        cx={517}
                        cy={773}
                        fill="black"
                        r={5}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={501}
                        y={784}
                      />
                      <circle
                        cx={507}
                        cy={783}
                        fill="black"
                        r={5}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={518}
                        y={784}
                      />
                      <circle
                        cx={517}
                        cy={783}
                        fill="black "
                        r={5}
                      />
                    </mask>
                    <clipPath
                      id="clip-path"
                    >
                      <rect
                        height={768}
                        width={1024}
                        x={0}
                        y={0}
                      />
                      <rect
                        height={20}
                        width={502}
                        x={0}
                        y={768}
                      />
                      <rect
                        height={20}
                        width={522}
                        x={522}
                        y={768}
                      />
                      <rect
                        height={0}
                        width={1024}
                        x={0}
                        y={788}
                      />
                    </clipPath>
                  </defs>
                  <rect
                    fill="currentColor"
                    height={768}
                    mask="url(#mask-main)"
                    width={1024}
                    x={0}
                    y={0}
                  />
                  <rect
                    clipPath="url(#clip-path)"
                    fill="currentColor"
                    height={768}
                    pointerEvents="auto"
                    width={1024}
                    x={0}
                    y={0}
                  />
                  <rect
                    className="reactour__mask--disable-interaction undefined"
                    display="none"
                    fill="transparent"
                    height={20}
                    pointerEvents="auto"
                    width={20}
                    x={502}
                    y={768}
                  />
                </svg>
              </div>
            </StyledComponent>
          </styled.div>
        </SvgMask>
        <ForwardRef
          disabled={false}
        >
          <ForwardRef
            as="div"
            autoFocus={true}
            disabled={false}
            lockProps={Object {}}
            noFocusGuards={false}
            persistentFocus={false}
            returnFocus={false}
            sideCar={[Function]}
          >
            <div
              data-focus-guard={true}
              key="guard-first"
              style={
                Object {
                  "height": "0px",
                  "left": "1px",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "fixed",
                  "top": "1px",
                  "width": "1px",
                }
              }
              tabIndex={0}
            />
            <div
              data-focus-guard={true}
              key="guard-nearest"
              style={
                Object {
                  "height": "0px",
                  "left": "1px",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "fixed",
                  "top": "1px",
                  "width": "1px",
                }
              }
              tabIndex={1}
            />
            <SideEffect(FocusWatcher)
              autoFocus={true}
              disabled={false}
              id={Object {}}
              observed={
                <div
                  data-focus-lock-disabled="false"
                >
                  <div
                    class="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                    role="dialog"
                    style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                    tabindex="-1"
                  >
                    <div
                      class="MuiBox-root MuiBox-root-10"
                      id="stepNode"
                    >
                      <h6
                        class="MuiTypography-root MuiTypography-h6"
                      >
                        Use the floor plan button to switch between available levels and enabling / disabling the view of different components.
                      </h6>
                      <div
                        class="MuiBox-root MuiBox-root-12"
                      >
                        <button
                          class="MuiButtonBase-root MuiIconButton-root"
                          id="tour-back-btn"
                          tabindex="0"
                          type="button"
                        >
                          <span
                            class="MuiIconButton-label"
                          >
                            <svg
                              aria-hidden="true"
                              class="MuiSvgIcon-root makeStyles-navigation-11"
                              focusable="false"
                              viewBox="0 0 24 24"
                            >
                              <path
                                d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                              />
                            </svg>
                          </span>
                          <span
                            class="MuiTouchRipple-root"
                          />
                        </button>
                        <button
                          class="MuiButtonBase-root MuiIconButton-root"
                          id="tour-next-btn"
                          tabindex="0"
                          type="button"
                        >
                          <span
                            class="MuiIconButton-label"
                          >
                            <svg
                              aria-hidden="true"
                              class="MuiSvgIcon-root makeStyles-navigation-11"
                              focusable="false"
                              viewBox="0 0 24 24"
                            >
                              <path
                                d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                              />
                            </svg>
                          </span>
                          <span
                            class="MuiTouchRipple-root"
                          />
                        </button>
                      </div>
                    </div>
                    <span
                      class="sc-EHOje doXVdu"
                      data-tour-elem="badge"
                    >
                      3 of 12
                    </span>
                    <button
                      class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                    >
                      <svg
                        viewBox="0 0 9.1 9.1"
                      >
                        <path
                          d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                          fill="currentColor"
                        />
                      </svg>
                    </button>
                  </div>
                </div>
              }
              onActivation={[Function]}
              onDeactivation={[Function]}
              persistentFocus={false}
              returnFocus={[Function]}
              shards={Array []}
              sideCar={
                Object {
                  "assignMedium": [Function],
                  "assignSyncMedium": [Function],
                  "options": Object {
                    "async": true,
                    "ssr": false,
                  },
                  "read": [Function],
                  "useMedium": [Function],
                }
              }
            >
              <FocusWatcher
                autoFocus={true}
                disabled={false}
                id={Object {}}
                observed={
                  <div
                    data-focus-lock-disabled="false"
                  >
                    <div
                      class="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                      role="dialog"
                      style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                      tabindex="-1"
                    >
                      <div
                        class="MuiBox-root MuiBox-root-10"
                        id="stepNode"
                      >
                        <h6
                          class="MuiTypography-root MuiTypography-h6"
                        >
                          Use the floor plan button to switch between available levels and enabling / disabling the view of different components.
                        </h6>
                        <div
                          class="MuiBox-root MuiBox-root-12"
                        >
                          <button
                            class="MuiButtonBase-root MuiIconButton-root"
                            id="tour-back-btn"
                            tabindex="0"
                            type="button"
                          >
                            <span
                              class="MuiIconButton-label"
                            >
                              <svg
                                aria-hidden="true"
                                class="MuiSvgIcon-root makeStyles-navigation-11"
                                focusable="false"
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                />
                              </svg>
                            </span>
                            <span
                              class="MuiTouchRipple-root"
                            />
                          </button>
                          <button
                            class="MuiButtonBase-root MuiIconButton-root"
                            id="tour-next-btn"
                            tabindex="0"
                            type="button"
                          >
                            <span
                              class="MuiIconButton-label"
                            >
                              <svg
                                aria-hidden="true"
                                class="MuiSvgIcon-root makeStyles-navigation-11"
                                focusable="false"
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                />
                              </svg>
                            </span>
                            <span
                              class="MuiTouchRipple-root"
                            />
                          </button>
                        </div>
                      </div>
                      <span
                        class="sc-EHOje doXVdu"
                        data-tour-elem="badge"
                      >
                        3 of 12
                      </span>
                      <button
                        class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                      >
                        <svg
                          viewBox="0 0 9.1 9.1"
                        >
                          <path
                            d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                            fill="currentColor"
                          />
                        </svg>
                      </button>
                    </div>
                  </div>
                }
                onActivation={[Function]}
                onDeactivation={[Function]}
                persistentFocus={false}
                returnFocus={[Function]}
                shards={Array []}
                sideCar={
                  Object {
                    "assignMedium": [Function],
                    "assignSyncMedium": [Function],
                    "options": Object {
                      "async": true,
                      "ssr": false,
                    },
                    "read": [Function],
                    "useMedium": [Function],
                  }
                }
              />
            </SideEffect(FocusWatcher)>
            <div
              data-focus-lock-disabled={false}
              onBlur={[Function]}
              onFocus={[Function]}
            >
              <styled.div
                accentColor="#3f51b5"
                className="reactour__helper reactour__helper--is-open"
                current={1}
                defaultStyles={true}
                helperHeight={0}
                helperPosition="center"
                helperWidth={0}
                padding={10}
                role="dialog"
                rounded={5}
                style={
                  Object {
                    "backgroundColor": "#7986cb",
                    "borderRadius": "5px",
                    "color": "#fff",
                  }
                }
                tabIndex={-1}
                targetBottom={393}
                targetHeight={0}
                targetLeft={512}
                targetRight={521}
                targetTop={778}
                targetWidth={0}
                windowHeight={768}
                windowWidth={1024}
              >
                <StyledComponent
                  accentColor="#3f51b5"
                  className="reactour__helper reactour__helper--is-open"
                  current={1}
                  defaultStyles={true}
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-ifAKCX",
                        "isStatic": false,
                        "lastClassName": "jBzNhS",
                        "rules": Array [
                          "
  --reactour-accent: ",
                          [Function],
                          ";
  ",
                          [Function],
                          "
  position: fixed;
  transition: transform 0.3s;
  top: 0;
  left: 0;
  z-index: 1000000;

  transform: ",
                          [Function],
                          ";
",
                        ],
                      },
                      "displayName": "styled.div",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-ifAKCX",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={
                    Object {
                      "current": <div
                        class="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                        role="dialog"
                        style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                        tabindex="-1"
                      >
                        <div
                          class="MuiBox-root MuiBox-root-10"
                          id="stepNode"
                        >
                          <h6
                            class="MuiTypography-root MuiTypography-h6"
                          >
                            Use the floor plan button to switch between available levels and enabling / disabling the view of different components.
                          </h6>
                          <div
                            class="MuiBox-root MuiBox-root-12"
                          >
                            <button
                              class="MuiButtonBase-root MuiIconButton-root"
                              id="tour-back-btn"
                              tabindex="0"
                              type="button"
                            >
                              <span
                                class="MuiIconButton-label"
                              >
                                <svg
                                  aria-hidden="true"
                                  class="MuiSvgIcon-root makeStyles-navigation-11"
                                  focusable="false"
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                  />
                                </svg>
                              </span>
                              <span
                                class="MuiTouchRipple-root"
                              />
                            </button>
                            <button
                              class="MuiButtonBase-root MuiIconButton-root"
                              id="tour-next-btn"
                              tabindex="0"
                              type="button"
                            >
                              <span
                                class="MuiIconButton-label"
                              >
                                <svg
                                  aria-hidden="true"
                                  class="MuiSvgIcon-root makeStyles-navigation-11"
                                  focusable="false"
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                  />
                                </svg>
                              </span>
                              <span
                                class="MuiTouchRipple-root"
                              />
                            </button>
                          </div>
                        </div>
                        <span
                          class="sc-EHOje doXVdu"
                          data-tour-elem="badge"
                        >
                          3 of 12
                        </span>
                        <button
                          class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                        >
                          <svg
                            viewBox="0 0 9.1 9.1"
                          >
                            <path
                              d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                              fill="currentColor"
                            />
                          </svg>
                        </button>
                      </div>,
                    }
                  }
                  helperHeight={0}
                  helperPosition="center"
                  helperWidth={0}
                  padding={10}
                  role="dialog"
                  rounded={5}
                  style={
                    Object {
                      "backgroundColor": "#7986cb",
                      "borderRadius": "5px",
                      "color": "#fff",
                    }
                  }
                  tabIndex={-1}
                  targetBottom={393}
                  targetHeight={0}
                  targetLeft={512}
                  targetRight={521}
                  targetTop={778}
                  targetWidth={0}
                  windowHeight={768}
                  windowWidth={1024}
                >
                  <div
                    className="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                    role="dialog"
                    style={
                      Object {
                        "backgroundColor": "#7986cb",
                        "borderRadius": "5px",
                        "color": "#fff",
                      }
                    }
                    tabIndex={-1}
                  >
                    <Styled(MuiBox)
                      id="stepNode"
                    >
                      <div
                        className="MuiBox-root MuiBox-root-10"
                        id="stepNode"
                      >
                        <WithStyles(ForwardRef(Typography))
                          variant="h6"
                        >
                          <ForwardRef(Typography)
                            classes={
                              Object {
                                "alignCenter": "MuiTypography-alignCenter",
                                "alignJustify": "MuiTypography-alignJustify",
                                "alignLeft": "MuiTypography-alignLeft",
                                "alignRight": "MuiTypography-alignRight",
                                "body1": "MuiTypography-body1",
                                "body2": "MuiTypography-body2",
                                "button": "MuiTypography-button",
                                "caption": "MuiTypography-caption",
                                "colorError": "MuiTypography-colorError",
                                "colorInherit": "MuiTypography-colorInherit",
                                "colorPrimary": "MuiTypography-colorPrimary",
                                "colorSecondary": "MuiTypography-colorSecondary",
                                "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                "displayBlock": "MuiTypography-displayBlock",
                                "displayInline": "MuiTypography-displayInline",
                                "gutterBottom": "MuiTypography-gutterBottom",
                                "h1": "MuiTypography-h1",
                                "h2": "MuiTypography-h2",
                                "h3": "MuiTypography-h3",
                                "h4": "MuiTypography-h4",
                                "h5": "MuiTypography-h5",
                                "h6": "MuiTypography-h6",
                                "noWrap": "MuiTypography-noWrap",
                                "overline": "MuiTypography-overline",
                                "paragraph": "MuiTypography-paragraph",
                                "root": "MuiTypography-root",
                                "srOnly": "MuiTypography-srOnly",
                                "subtitle1": "MuiTypography-subtitle1",
                                "subtitle2": "MuiTypography-subtitle2",
                              }
                            }
                            variant="h6"
                          >
                            <h6
                              className="MuiTypography-root MuiTypography-h6"
                            >
                              Click on the zoom buttons to change the view of the floor plan. Alternatively, the scroll button on your mouse would work too!
                            </h6>
                          </ForwardRef(Typography)>
                        </WithStyles(ForwardRef(Typography))>
                        <Memo()
                          goTo={[Function]}
                          step={2}
                        >
                          <Styled(MuiBox)>
                            <div
                              className="MuiBox-root MuiBox-root-12"
                            >
                              <WithStyles(ForwardRef(IconButton))
                                id="tour-back-btn"
                                onClick={[Function]}
                              >
                                <ForwardRef(IconButton)
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit",
                                      "colorPrimary": "MuiIconButton-colorPrimary",
                                      "colorSecondary": "MuiIconButton-colorSecondary",
                                      "disabled": "Mui-disabled",
                                      "edgeEnd": "MuiIconButton-edgeEnd",
                                      "edgeStart": "MuiIconButton-edgeStart",
                                      "label": "MuiIconButton-label",
                                      "root": "MuiIconButton-root",
                                      "sizeSmall": "MuiIconButton-sizeSmall",
                                    }
                                  }
                                  id="tour-back-btn"
                                  onClick={[Function]}
                                >
                                  <WithStyles(ForwardRef(ButtonBase))
                                    centerRipple={true}
                                    className="MuiIconButton-root"
                                    disabled={false}
                                    focusRipple={true}
                                    id="tour-back-btn"
                                    onClick={[Function]}
                                  >
                                    <ForwardRef(ButtonBase)
                                      centerRipple={true}
                                      className="MuiIconButton-root"
                                      classes={
                                        Object {
                                          "disabled": "Mui-disabled",
                                          "focusVisible": "Mui-focusVisible",
                                          "root": "MuiButtonBase-root",
                                        }
                                      }
                                      disabled={false}
                                      focusRipple={true}
                                      id="tour-back-btn"
                                      onClick={[Function]}
                                    >
                                      <button
                                        className="MuiButtonBase-root MuiIconButton-root"
                                        disabled={false}
                                        id="tour-back-btn"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragLeave={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex={0}
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label"
                                        >
                                          <ForwardRef
                                            className="makeStyles-navigation-11"
                                          >
                                            <WithStyles(ForwardRef(SvgIcon))
                                              className="makeStyles-navigation-11"
                                            >
                                              <ForwardRef(SvgIcon)
                                                className="makeStyles-navigation-11"
                                                classes={
                                                  Object {
                                                    "colorAction": "MuiSvgIcon-colorAction",
                                                    "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                    "colorError": "MuiSvgIcon-colorError",
                                                    "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                    "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                    "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                    "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                    "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                    "root": "MuiSvgIcon-root",
                                                  }
                                                }
                                              >
                                                <svg
                                                  aria-hidden={true}
                                                  className="MuiSvgIcon-root makeStyles-navigation-11"
                                                  focusable="false"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <path
                                                    d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                                  />
                                                </svg>
                                              </ForwardRef(SvgIcon)>
                                            </WithStyles(ForwardRef(SvgIcon))>
                                          </ForwardRef>
                                        </span>
                                        <WithStyles(memo)
                                          center={true}
                                        >
                                          <ForwardRef(TouchRipple)
                                            center={true}
                                            classes={
                                              Object {
                                                "child": "MuiTouchRipple-child",
                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                "ripple": "MuiTouchRipple-ripple",
                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                "root": "MuiTouchRipple-root",
                                              }
                                            }
                                          >
                                            <span
                                              className="MuiTouchRipple-root"
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                component={null}
                                                exit={true}
                                              />
                                            </span>
                                          </ForwardRef(TouchRipple)>
                                        </WithStyles(memo)>
                                      </button>
                                    </ForwardRef(ButtonBase)>
                                  </WithStyles(ForwardRef(ButtonBase))>
                                </ForwardRef(IconButton)>
                              </WithStyles(ForwardRef(IconButton))>
                              <WithStyles(ForwardRef(IconButton))
                                id="tour-next-btn"
                                onClick={[Function]}
                              >
                                <ForwardRef(IconButton)
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit",
                                      "colorPrimary": "MuiIconButton-colorPrimary",
                                      "colorSecondary": "MuiIconButton-colorSecondary",
                                      "disabled": "Mui-disabled",
                                      "edgeEnd": "MuiIconButton-edgeEnd",
                                      "edgeStart": "MuiIconButton-edgeStart",
                                      "label": "MuiIconButton-label",
                                      "root": "MuiIconButton-root",
                                      "sizeSmall": "MuiIconButton-sizeSmall",
                                    }
                                  }
                                  id="tour-next-btn"
                                  onClick={[Function]}
                                >
                                  <WithStyles(ForwardRef(ButtonBase))
                                    centerRipple={true}
                                    className="MuiIconButton-root"
                                    disabled={false}
                                    focusRipple={true}
                                    id="tour-next-btn"
                                    onClick={[Function]}
                                  >
                                    <ForwardRef(ButtonBase)
                                      centerRipple={true}
                                      className="MuiIconButton-root"
                                      classes={
                                        Object {
                                          "disabled": "Mui-disabled",
                                          "focusVisible": "Mui-focusVisible",
                                          "root": "MuiButtonBase-root",
                                        }
                                      }
                                      disabled={false}
                                      focusRipple={true}
                                      id="tour-next-btn"
                                      onClick={[Function]}
                                    >
                                      <button
                                        className="MuiButtonBase-root MuiIconButton-root"
                                        disabled={false}
                                        id="tour-next-btn"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragLeave={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex={0}
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label"
                                        >
                                          <ForwardRef
                                            className="makeStyles-navigation-11"
                                          >
                                            <WithStyles(ForwardRef(SvgIcon))
                                              className="makeStyles-navigation-11"
                                            >
                                              <ForwardRef(SvgIcon)
                                                className="makeStyles-navigation-11"
                                                classes={
                                                  Object {
                                                    "colorAction": "MuiSvgIcon-colorAction",
                                                    "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                    "colorError": "MuiSvgIcon-colorError",
                                                    "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                    "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                    "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                    "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                    "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                    "root": "MuiSvgIcon-root",
                                                  }
                                                }
                                              >
                                                <svg
                                                  aria-hidden={true}
                                                  className="MuiSvgIcon-root makeStyles-navigation-11"
                                                  focusable="false"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <path
                                                    d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                                  />
                                                </svg>
                                              </ForwardRef(SvgIcon)>
                                            </WithStyles(ForwardRef(SvgIcon))>
                                          </ForwardRef>
                                        </span>
                                        <WithStyles(memo)
                                          center={true}
                                        >
                                          <ForwardRef(TouchRipple)
                                            center={true}
                                            classes={
                                              Object {
                                                "child": "MuiTouchRipple-child",
                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                "ripple": "MuiTouchRipple-ripple",
                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                "root": "MuiTouchRipple-root",
                                              }
                                            }
                                          >
                                            <span
                                              className="MuiTouchRipple-root"
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                component={null}
                                                exit={true}
                                              />
                                            </span>
                                          </ForwardRef(TouchRipple)>
                                        </WithStyles(memo)>
                                      </button>
                                    </ForwardRef(ButtonBase)>
                                  </WithStyles(ForwardRef(ButtonBase))>
                                </ForwardRef(IconButton)>
                              </WithStyles(ForwardRef(IconButton))>
                            </div>
                          </Styled(MuiBox)>
                        </Memo()>
                      </div>
                    </Styled(MuiBox)>
                    <styled.span
                      accentColor="#3f51b5"
                      data-tour-elem="badge"
                    >
                      <StyledComponent
                        accentColor="#3f51b5"
                        data-tour-elem="badge"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-EHOje",
                              "isStatic": false,
                              "lastClassName": "doXVdu",
                              "rules": Array [
                                "
  position: absolute;
  font-family: monospace;
  background: var(--reactour-accent);
  background: ",
                                [Function],
                                ";
  height: 1.875em;
  line-height: 2;
  padding-left: 0.8125em;
  padding-right: 0.8125em;
  font-size: 1em;
  border-radius: 1.625em;
  color: white;
  text-align: center;
  box-shadow: 0 0.25em 0.5em rgba(0, 0, 0, 0.3);
  top: -0.8125em;
  left: -0.8125em;
",
                              ],
                            },
                            "displayName": "styled.span",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-EHOje",
                            "target": "span",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <span
                          className="sc-EHOje doXVdu"
                          data-tour-elem="badge"
                        >
                          2 of 12
                        </span>
                      </StyledComponent>
                    </styled.span>
                    <Styled(Close)
                      className="reactour__close"
                      onClick={[Function]}
                    >
                      <StyledComponent
                        className="reactour__close"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-bxivhb",
                              "isStatic": false,
                              "lastClassName": "eTpeTG",
                              "rules": Array [
                                "
  position: absolute;
  top: 22px;
  right: 22px;
  width: 9px;
  height: 9px;
  color: #5e5e5e;
  &:hover {
    color: #000;
  }
",
                              ],
                            },
                            "displayName": "Styled(Close)",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-bxivhb",
                            "target": [Function],
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        onClick={[Function]}
                      >
                        <Close
                          className="sc-bxivhb eTpeTG reactour__close"
                          onClick={[Function]}
                        >
                          <styled.button
                            className="sc-bxivhb eTpeTG reactour__close"
                            onClick={[Function]}
                          >
                            <StyledComponent
                              className="sc-bxivhb eTpeTG reactour__close"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-bdVaJa",
                                    "isStatic": false,
                                    "lastClassName": "cYQqRL",
                                    "rules": Array [
                                      "
  display: block;
  padding: 0;
  border: 0;
  background: none;
  font-size: 0;
  cursor: ",
                                      [Function],
                                      ";
",
                                    ],
                                  },
                                  "displayName": "styled.button",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-bdVaJa",
                                  "target": "button",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              onClick={[Function]}
                            >
                              <button
                                className="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                                onClick={[Function]}
                              >
                                <svg
                                  viewBox="0 0 9.1 9.1"
                                >
                                  <path
                                    d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                                    fill="currentColor"
                                  />
                                </svg>
                              </button>
                            </StyledComponent>
                          </styled.button>
                        </Close>
                      </StyledComponent>
                    </Styled(Close)>
                  </div>
                </StyledComponent>
              </styled.div>
            </div>
            <div
              data-focus-guard={true}
              style={
                Object {
                  "height": "0px",
                  "left": "1px",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "fixed",
                  "top": "1px",
                  "width": "1px",
                }
              }
              tabIndex={0}
            />
          </ForwardRef>
        </ForwardRef>
      </Portal>
    </Portal>
  </Tour>
</Memo()>
`;

exports[`Dashboard Tour renders leaflet step (4/12) 1`] = `
<Memo()
  tourProps={
    Object {
      "OmniPanelViewIndex": Object {
        "0": "MainMenu",
        "1": "Doors",
        "2": "Lifts",
        "3": "Robots",
        "4": "Dispensers",
        "5": "Commands",
        "6": "Negotiations",
        "Commands": 5,
        "Dispensers": 4,
        "Doors": 1,
        "Lifts": 2,
        "MainMenu": 0,
        "Negotiations": 6,
        "Robots": 3,
      },
      "doorSpotlight": Object {
        "value": "main_door",
      },
      "setDoorSpotlight": [MockFunction],
      "setTourSettingsAndOmniPanel": [MockFunction] {
        "calls": Array [
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
      "setTourShowOmniPanel": [MockFunction],
      "setTourState": [MockFunction],
      "tourState": true,
    }
  }
>
  <Tour
    accentColor="#3f51b5"
    badgeContent={[Function]}
    closeWithMask={false}
    disableFocusLock={false}
    disableInteraction={false}
    disableKeyboardNavigation={
      Array [
        "right",
        "left",
      ]
    }
    isOpen={true}
    maskSpace={10}
    onRequestClose={[Function]}
    rounded={5}
    scrollDuration={1}
    showButtons={false}
    showCloseButton={true}
    showNavigation={false}
    showNavigationNumber={false}
    showNumber={true}
    startAt={0}
    steps={
      Array [
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "[class=\\"leaflet-control-zoom leaflet-bar leaflet-control\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "[class= \\"leaflet-control-layers leaflet-control\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "[class=\\"leaflet-image-layer leaflet-zoom-animated\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[id=\\"toggle-omnipanel-btn\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-component=\\"MainMenu\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-item=\\"Doors\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-name=\\"main_door\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-item= \\"Commands\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-component=\\"LoopForm\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[id=\\"show-settings-btn\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": ".MuiDrawer-paper",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
      ]
    }
    updateDelay={1}
  >
    <Portal>
      <Portal
        containerInfo={
          <div
            id="___reactour"
          >
            <div
              class="sc-dnqmqq kWwJhA"
            >
              <svg
                height="768"
                width="1024"
                xmlns="http://www.w3.org/2000/svg"
              >
                <defs>
                  <mask
                    id="mask-main"
                  >
                    <rect
                      fill="white"
                      height="768"
                      width="1024"
                      x="0"
                      y="0"
                    />
                    <rect
                      fill="black"
                      height="20"
                      width="20"
                      x="502"
                      y="768"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="501"
                      y="767"
                    />
                    <circle
                      cx="507"
                      cy="773"
                      fill="black"
                      r="5"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="518"
                      y="767"
                    />
                    <circle
                      cx="517"
                      cy="773"
                      fill="black"
                      r="5"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="501"
                      y="784"
                    />
                    <circle
                      cx="507"
                      cy="783"
                      fill="black"
                      r="5"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="518"
                      y="784"
                    />
                    <circle
                      cx="517"
                      cy="783"
                      fill="black "
                      r="5"
                    />
                  </mask>
                  <clippath
                    id="clip-path"
                  >
                    <rect
                      height="768"
                      width="1024"
                      x="0"
                      y="0"
                    />
                    <rect
                      height="20"
                      width="502"
                      x="0"
                      y="768"
                    />
                    <rect
                      height="20"
                      width="522"
                      x="522"
                      y="768"
                    />
                    <rect
                      height="0"
                      width="1024"
                      x="0"
                      y="788"
                    />
                  </clippath>
                </defs>
                <rect
                  fill="currentColor"
                  height="768"
                  mask="url(#mask-main)"
                  width="1024"
                  x="0"
                  y="0"
                />
                <rect
                  clip-path="url(#clip-path)"
                  fill="currentColor"
                  height="768"
                  pointer-events="auto"
                  width="1024"
                  x="0"
                  y="0"
                />
                <rect
                  class="reactour__mask--disable-interaction undefined"
                  display="none"
                  fill="transparent"
                  height="20"
                  pointer-events="auto"
                  width="20"
                  x="502"
                  y="768"
                />
              </svg>
            </div>
            <div
              data-focus-guard="true"
              style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
              tabindex="0"
            />
            <div
              data-focus-guard="true"
              style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
              tabindex="1"
            />
            <div
              data-focus-lock-disabled="false"
            >
              <div
                class="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                role="dialog"
                style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                tabindex="-1"
              >
                <div
                  class="MuiBox-root MuiBox-root-13"
                  id="stepNode"
                >
                  <h6
                    class="MuiTypography-root MuiTypography-h6"
                  >
                    Clicking individual components like doors, robots, lifts on the map will open up its corresponding information tab in the omnipanel.
                  </h6>
                  <div
                    class="MuiBox-root MuiBox-root-15"
                  >
                    <button
                      class="MuiButtonBase-root MuiIconButton-root"
                      id="tour-back-btn"
                      tabindex="0"
                      type="button"
                    >
                      <span
                        class="MuiIconButton-label"
                      >
                        <svg
                          aria-hidden="true"
                          class="MuiSvgIcon-root makeStyles-navigation-14"
                          focusable="false"
                          viewBox="0 0 24 24"
                        >
                          <path
                            d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                          />
                        </svg>
                      </span>
                      <span
                        class="MuiTouchRipple-root"
                      />
                    </button>
                    <button
                      class="MuiButtonBase-root MuiIconButton-root"
                      id="tour-next-btn"
                      tabindex="0"
                      type="button"
                    >
                      <span
                        class="MuiIconButton-label"
                      >
                        <svg
                          aria-hidden="true"
                          class="MuiSvgIcon-root makeStyles-navigation-14"
                          focusable="false"
                          viewBox="0 0 24 24"
                        >
                          <path
                            d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                          />
                        </svg>
                      </span>
                      <span
                        class="MuiTouchRipple-root"
                      />
                    </button>
                  </div>
                </div>
                <span
                  class="sc-EHOje doXVdu"
                  data-tour-elem="badge"
                >
                  4 of 12
                </span>
                <button
                  class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                >
                  <svg
                    viewBox="0 0 9.1 9.1"
                  >
                    <path
                      d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                      fill="currentColor"
                    />
                  </svg>
                </button>
              </div>
            </div>
            <div
              data-focus-guard="true"
              style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
              tabindex="0"
            />
          </div>
        }
      >
        <GlobalStyleComponent />
        <ReactourResizeObserver
          refresh={[Function]}
          step={
            Object {
              "action": [Function],
              "content": [Function],
              "selector": "[class= \\"leaflet-control-layers leaflet-control\\"]",
              "style": Object {
                "backgroundColor": "#7986cb",
                "borderRadius": "5px",
                "color": "#fff",
              },
            }
          }
        />
        <ReactourMutationObserver
          refresh={[Function]}
          step={
            Object {
              "action": [Function],
              "content": [Function],
              "selector": "[class= \\"leaflet-control-layers leaflet-control\\"]",
              "style": Object {
                "backgroundColor": "#7986cb",
                "borderRadius": "5px",
                "color": "#fff",
              },
            }
          }
        />
        <SvgMask
          disableInteraction={false}
          disableInteractionClassName="reactour__mask--disable-interaction undefined"
          forwardRef={[Function]}
          onClick={[Function]}
          padding={10}
          rounded={5}
          targetHeight={0}
          targetLeft={512}
          targetTop={778}
          targetWidth={0}
          windowHeight={768}
          windowWidth={1024}
        >
          <styled.div
            onClick={[Function]}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-dnqmqq",
                    "isStatic": false,
                    "lastClassName": "kWwJhA",
                    "rules": Array [
                      "
  opacity: ",
                      [Function],
                      ";
  color: ",
                      [Function],
                      ";
  width: 100%;
  left: 0;
  top: 0;
  height: 100%;
  position: fixed;
  z-index: 99999;
  pointer-events: none;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-dnqmqq",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
            >
              <div
                className="sc-dnqmqq kWwJhA"
                onClick={[Function]}
              >
                <svg
                  height={768}
                  width={1024}
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <defs>
                    <mask
                      id="mask-main"
                    >
                      <rect
                        fill="white"
                        height={768}
                        width={1024}
                        x={0}
                        y={0}
                      />
                      <rect
                        fill="black"
                        height={20}
                        width={20}
                        x={502}
                        y={768}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={501}
                        y={767}
                      />
                      <circle
                        cx={507}
                        cy={773}
                        fill="black"
                        r={5}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={518}
                        y={767}
                      />
                      <circle
                        cx={517}
                        cy={773}
                        fill="black"
                        r={5}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={501}
                        y={784}
                      />
                      <circle
                        cx={507}
                        cy={783}
                        fill="black"
                        r={5}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={518}
                        y={784}
                      />
                      <circle
                        cx={517}
                        cy={783}
                        fill="black "
                        r={5}
                      />
                    </mask>
                    <clipPath
                      id="clip-path"
                    >
                      <rect
                        height={768}
                        width={1024}
                        x={0}
                        y={0}
                      />
                      <rect
                        height={20}
                        width={502}
                        x={0}
                        y={768}
                      />
                      <rect
                        height={20}
                        width={522}
                        x={522}
                        y={768}
                      />
                      <rect
                        height={0}
                        width={1024}
                        x={0}
                        y={788}
                      />
                    </clipPath>
                  </defs>
                  <rect
                    fill="currentColor"
                    height={768}
                    mask="url(#mask-main)"
                    width={1024}
                    x={0}
                    y={0}
                  />
                  <rect
                    clipPath="url(#clip-path)"
                    fill="currentColor"
                    height={768}
                    pointerEvents="auto"
                    width={1024}
                    x={0}
                    y={0}
                  />
                  <rect
                    className="reactour__mask--disable-interaction undefined"
                    display="none"
                    fill="transparent"
                    height={20}
                    pointerEvents="auto"
                    width={20}
                    x={502}
                    y={768}
                  />
                </svg>
              </div>
            </StyledComponent>
          </styled.div>
        </SvgMask>
        <ForwardRef
          disabled={false}
        >
          <ForwardRef
            as="div"
            autoFocus={true}
            disabled={false}
            lockProps={Object {}}
            noFocusGuards={false}
            persistentFocus={false}
            returnFocus={false}
            sideCar={[Function]}
          >
            <div
              data-focus-guard={true}
              key="guard-first"
              style={
                Object {
                  "height": "0px",
                  "left": "1px",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "fixed",
                  "top": "1px",
                  "width": "1px",
                }
              }
              tabIndex={0}
            />
            <div
              data-focus-guard={true}
              key="guard-nearest"
              style={
                Object {
                  "height": "0px",
                  "left": "1px",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "fixed",
                  "top": "1px",
                  "width": "1px",
                }
              }
              tabIndex={1}
            />
            <SideEffect(FocusWatcher)
              autoFocus={true}
              disabled={false}
              id={Object {}}
              observed={
                <div
                  data-focus-lock-disabled="false"
                >
                  <div
                    class="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                    role="dialog"
                    style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                    tabindex="-1"
                  >
                    <div
                      class="MuiBox-root MuiBox-root-13"
                      id="stepNode"
                    >
                      <h6
                        class="MuiTypography-root MuiTypography-h6"
                      >
                        Clicking individual components like doors, robots, lifts on the map will open up its corresponding information tab in the omnipanel.
                      </h6>
                      <div
                        class="MuiBox-root MuiBox-root-15"
                      >
                        <button
                          class="MuiButtonBase-root MuiIconButton-root"
                          id="tour-back-btn"
                          tabindex="0"
                          type="button"
                        >
                          <span
                            class="MuiIconButton-label"
                          >
                            <svg
                              aria-hidden="true"
                              class="MuiSvgIcon-root makeStyles-navigation-14"
                              focusable="false"
                              viewBox="0 0 24 24"
                            >
                              <path
                                d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                              />
                            </svg>
                          </span>
                          <span
                            class="MuiTouchRipple-root"
                          />
                        </button>
                        <button
                          class="MuiButtonBase-root MuiIconButton-root"
                          id="tour-next-btn"
                          tabindex="0"
                          type="button"
                        >
                          <span
                            class="MuiIconButton-label"
                          >
                            <svg
                              aria-hidden="true"
                              class="MuiSvgIcon-root makeStyles-navigation-14"
                              focusable="false"
                              viewBox="0 0 24 24"
                            >
                              <path
                                d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                              />
                            </svg>
                          </span>
                          <span
                            class="MuiTouchRipple-root"
                          />
                        </button>
                      </div>
                    </div>
                    <span
                      class="sc-EHOje doXVdu"
                      data-tour-elem="badge"
                    >
                      4 of 12
                    </span>
                    <button
                      class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                    >
                      <svg
                        viewBox="0 0 9.1 9.1"
                      >
                        <path
                          d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                          fill="currentColor"
                        />
                      </svg>
                    </button>
                  </div>
                </div>
              }
              onActivation={[Function]}
              onDeactivation={[Function]}
              persistentFocus={false}
              returnFocus={[Function]}
              shards={Array []}
              sideCar={
                Object {
                  "assignMedium": [Function],
                  "assignSyncMedium": [Function],
                  "options": Object {
                    "async": true,
                    "ssr": false,
                  },
                  "read": [Function],
                  "useMedium": [Function],
                }
              }
            >
              <FocusWatcher
                autoFocus={true}
                disabled={false}
                id={Object {}}
                observed={
                  <div
                    data-focus-lock-disabled="false"
                  >
                    <div
                      class="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                      role="dialog"
                      style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                      tabindex="-1"
                    >
                      <div
                        class="MuiBox-root MuiBox-root-13"
                        id="stepNode"
                      >
                        <h6
                          class="MuiTypography-root MuiTypography-h6"
                        >
                          Clicking individual components like doors, robots, lifts on the map will open up its corresponding information tab in the omnipanel.
                        </h6>
                        <div
                          class="MuiBox-root MuiBox-root-15"
                        >
                          <button
                            class="MuiButtonBase-root MuiIconButton-root"
                            id="tour-back-btn"
                            tabindex="0"
                            type="button"
                          >
                            <span
                              class="MuiIconButton-label"
                            >
                              <svg
                                aria-hidden="true"
                                class="MuiSvgIcon-root makeStyles-navigation-14"
                                focusable="false"
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                />
                              </svg>
                            </span>
                            <span
                              class="MuiTouchRipple-root"
                            />
                          </button>
                          <button
                            class="MuiButtonBase-root MuiIconButton-root"
                            id="tour-next-btn"
                            tabindex="0"
                            type="button"
                          >
                            <span
                              class="MuiIconButton-label"
                            >
                              <svg
                                aria-hidden="true"
                                class="MuiSvgIcon-root makeStyles-navigation-14"
                                focusable="false"
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                />
                              </svg>
                            </span>
                            <span
                              class="MuiTouchRipple-root"
                            />
                          </button>
                        </div>
                      </div>
                      <span
                        class="sc-EHOje doXVdu"
                        data-tour-elem="badge"
                      >
                        4 of 12
                      </span>
                      <button
                        class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                      >
                        <svg
                          viewBox="0 0 9.1 9.1"
                        >
                          <path
                            d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                            fill="currentColor"
                          />
                        </svg>
                      </button>
                    </div>
                  </div>
                }
                onActivation={[Function]}
                onDeactivation={[Function]}
                persistentFocus={false}
                returnFocus={[Function]}
                shards={Array []}
                sideCar={
                  Object {
                    "assignMedium": [Function],
                    "assignSyncMedium": [Function],
                    "options": Object {
                      "async": true,
                      "ssr": false,
                    },
                    "read": [Function],
                    "useMedium": [Function],
                  }
                }
              />
            </SideEffect(FocusWatcher)>
            <div
              data-focus-lock-disabled={false}
              onBlur={[Function]}
              onFocus={[Function]}
            >
              <styled.div
                accentColor="#3f51b5"
                className="reactour__helper reactour__helper--is-open"
                current={2}
                defaultStyles={true}
                helperHeight={0}
                helperPosition="center"
                helperWidth={0}
                padding={10}
                role="dialog"
                rounded={5}
                style={
                  Object {
                    "backgroundColor": "#7986cb",
                    "borderRadius": "5px",
                    "color": "#fff",
                  }
                }
                tabIndex={-1}
                targetBottom={393}
                targetHeight={0}
                targetLeft={512}
                targetRight={521}
                targetTop={778}
                targetWidth={0}
                windowHeight={768}
                windowWidth={1024}
              >
                <StyledComponent
                  accentColor="#3f51b5"
                  className="reactour__helper reactour__helper--is-open"
                  current={2}
                  defaultStyles={true}
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-ifAKCX",
                        "isStatic": false,
                        "lastClassName": "jBzNhS",
                        "rules": Array [
                          "
  --reactour-accent: ",
                          [Function],
                          ";
  ",
                          [Function],
                          "
  position: fixed;
  transition: transform 0.3s;
  top: 0;
  left: 0;
  z-index: 1000000;

  transform: ",
                          [Function],
                          ";
",
                        ],
                      },
                      "displayName": "styled.div",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-ifAKCX",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={
                    Object {
                      "current": <div
                        class="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                        role="dialog"
                        style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                        tabindex="-1"
                      >
                        <div
                          class="MuiBox-root MuiBox-root-13"
                          id="stepNode"
                        >
                          <h6
                            class="MuiTypography-root MuiTypography-h6"
                          >
                            Clicking individual components like doors, robots, lifts on the map will open up its corresponding information tab in the omnipanel.
                          </h6>
                          <div
                            class="MuiBox-root MuiBox-root-15"
                          >
                            <button
                              class="MuiButtonBase-root MuiIconButton-root"
                              id="tour-back-btn"
                              tabindex="0"
                              type="button"
                            >
                              <span
                                class="MuiIconButton-label"
                              >
                                <svg
                                  aria-hidden="true"
                                  class="MuiSvgIcon-root makeStyles-navigation-14"
                                  focusable="false"
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                  />
                                </svg>
                              </span>
                              <span
                                class="MuiTouchRipple-root"
                              />
                            </button>
                            <button
                              class="MuiButtonBase-root MuiIconButton-root"
                              id="tour-next-btn"
                              tabindex="0"
                              type="button"
                            >
                              <span
                                class="MuiIconButton-label"
                              >
                                <svg
                                  aria-hidden="true"
                                  class="MuiSvgIcon-root makeStyles-navigation-14"
                                  focusable="false"
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                  />
                                </svg>
                              </span>
                              <span
                                class="MuiTouchRipple-root"
                              />
                            </button>
                          </div>
                        </div>
                        <span
                          class="sc-EHOje doXVdu"
                          data-tour-elem="badge"
                        >
                          4 of 12
                        </span>
                        <button
                          class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                        >
                          <svg
                            viewBox="0 0 9.1 9.1"
                          >
                            <path
                              d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                              fill="currentColor"
                            />
                          </svg>
                        </button>
                      </div>,
                    }
                  }
                  helperHeight={0}
                  helperPosition="center"
                  helperWidth={0}
                  padding={10}
                  role="dialog"
                  rounded={5}
                  style={
                    Object {
                      "backgroundColor": "#7986cb",
                      "borderRadius": "5px",
                      "color": "#fff",
                    }
                  }
                  tabIndex={-1}
                  targetBottom={393}
                  targetHeight={0}
                  targetLeft={512}
                  targetRight={521}
                  targetTop={778}
                  targetWidth={0}
                  windowHeight={768}
                  windowWidth={1024}
                >
                  <div
                    className="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                    role="dialog"
                    style={
                      Object {
                        "backgroundColor": "#7986cb",
                        "borderRadius": "5px",
                        "color": "#fff",
                      }
                    }
                    tabIndex={-1}
                  >
                    <Styled(MuiBox)
                      id="stepNode"
                    >
                      <div
                        className="MuiBox-root MuiBox-root-13"
                        id="stepNode"
                      >
                        <WithStyles(ForwardRef(Typography))
                          variant="h6"
                        >
                          <ForwardRef(Typography)
                            classes={
                              Object {
                                "alignCenter": "MuiTypography-alignCenter",
                                "alignJustify": "MuiTypography-alignJustify",
                                "alignLeft": "MuiTypography-alignLeft",
                                "alignRight": "MuiTypography-alignRight",
                                "body1": "MuiTypography-body1",
                                "body2": "MuiTypography-body2",
                                "button": "MuiTypography-button",
                                "caption": "MuiTypography-caption",
                                "colorError": "MuiTypography-colorError",
                                "colorInherit": "MuiTypography-colorInherit",
                                "colorPrimary": "MuiTypography-colorPrimary",
                                "colorSecondary": "MuiTypography-colorSecondary",
                                "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                "displayBlock": "MuiTypography-displayBlock",
                                "displayInline": "MuiTypography-displayInline",
                                "gutterBottom": "MuiTypography-gutterBottom",
                                "h1": "MuiTypography-h1",
                                "h2": "MuiTypography-h2",
                                "h3": "MuiTypography-h3",
                                "h4": "MuiTypography-h4",
                                "h5": "MuiTypography-h5",
                                "h6": "MuiTypography-h6",
                                "noWrap": "MuiTypography-noWrap",
                                "overline": "MuiTypography-overline",
                                "paragraph": "MuiTypography-paragraph",
                                "root": "MuiTypography-root",
                                "srOnly": "MuiTypography-srOnly",
                                "subtitle1": "MuiTypography-subtitle1",
                                "subtitle2": "MuiTypography-subtitle2",
                              }
                            }
                            variant="h6"
                          >
                            <h6
                              className="MuiTypography-root MuiTypography-h6"
                            >
                              Use the floor plan button to switch between available levels and enabling / disabling the view of different components.
                            </h6>
                          </ForwardRef(Typography)>
                        </WithStyles(ForwardRef(Typography))>
                        <Memo()
                          goTo={[Function]}
                          step={3}
                        >
                          <Styled(MuiBox)>
                            <div
                              className="MuiBox-root MuiBox-root-15"
                            >
                              <WithStyles(ForwardRef(IconButton))
                                id="tour-back-btn"
                                onClick={[Function]}
                              >
                                <ForwardRef(IconButton)
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit",
                                      "colorPrimary": "MuiIconButton-colorPrimary",
                                      "colorSecondary": "MuiIconButton-colorSecondary",
                                      "disabled": "Mui-disabled",
                                      "edgeEnd": "MuiIconButton-edgeEnd",
                                      "edgeStart": "MuiIconButton-edgeStart",
                                      "label": "MuiIconButton-label",
                                      "root": "MuiIconButton-root",
                                      "sizeSmall": "MuiIconButton-sizeSmall",
                                    }
                                  }
                                  id="tour-back-btn"
                                  onClick={[Function]}
                                >
                                  <WithStyles(ForwardRef(ButtonBase))
                                    centerRipple={true}
                                    className="MuiIconButton-root"
                                    disabled={false}
                                    focusRipple={true}
                                    id="tour-back-btn"
                                    onClick={[Function]}
                                  >
                                    <ForwardRef(ButtonBase)
                                      centerRipple={true}
                                      className="MuiIconButton-root"
                                      classes={
                                        Object {
                                          "disabled": "Mui-disabled",
                                          "focusVisible": "Mui-focusVisible",
                                          "root": "MuiButtonBase-root",
                                        }
                                      }
                                      disabled={false}
                                      focusRipple={true}
                                      id="tour-back-btn"
                                      onClick={[Function]}
                                    >
                                      <button
                                        className="MuiButtonBase-root MuiIconButton-root"
                                        disabled={false}
                                        id="tour-back-btn"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragLeave={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex={0}
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label"
                                        >
                                          <ForwardRef
                                            className="makeStyles-navigation-14"
                                          >
                                            <WithStyles(ForwardRef(SvgIcon))
                                              className="makeStyles-navigation-14"
                                            >
                                              <ForwardRef(SvgIcon)
                                                className="makeStyles-navigation-14"
                                                classes={
                                                  Object {
                                                    "colorAction": "MuiSvgIcon-colorAction",
                                                    "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                    "colorError": "MuiSvgIcon-colorError",
                                                    "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                    "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                    "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                    "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                    "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                    "root": "MuiSvgIcon-root",
                                                  }
                                                }
                                              >
                                                <svg
                                                  aria-hidden={true}
                                                  className="MuiSvgIcon-root makeStyles-navigation-14"
                                                  focusable="false"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <path
                                                    d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                                  />
                                                </svg>
                                              </ForwardRef(SvgIcon)>
                                            </WithStyles(ForwardRef(SvgIcon))>
                                          </ForwardRef>
                                        </span>
                                        <WithStyles(memo)
                                          center={true}
                                        >
                                          <ForwardRef(TouchRipple)
                                            center={true}
                                            classes={
                                              Object {
                                                "child": "MuiTouchRipple-child",
                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                "ripple": "MuiTouchRipple-ripple",
                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                "root": "MuiTouchRipple-root",
                                              }
                                            }
                                          >
                                            <span
                                              className="MuiTouchRipple-root"
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                component={null}
                                                exit={true}
                                              />
                                            </span>
                                          </ForwardRef(TouchRipple)>
                                        </WithStyles(memo)>
                                      </button>
                                    </ForwardRef(ButtonBase)>
                                  </WithStyles(ForwardRef(ButtonBase))>
                                </ForwardRef(IconButton)>
                              </WithStyles(ForwardRef(IconButton))>
                              <WithStyles(ForwardRef(IconButton))
                                id="tour-next-btn"
                                onClick={[Function]}
                              >
                                <ForwardRef(IconButton)
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit",
                                      "colorPrimary": "MuiIconButton-colorPrimary",
                                      "colorSecondary": "MuiIconButton-colorSecondary",
                                      "disabled": "Mui-disabled",
                                      "edgeEnd": "MuiIconButton-edgeEnd",
                                      "edgeStart": "MuiIconButton-edgeStart",
                                      "label": "MuiIconButton-label",
                                      "root": "MuiIconButton-root",
                                      "sizeSmall": "MuiIconButton-sizeSmall",
                                    }
                                  }
                                  id="tour-next-btn"
                                  onClick={[Function]}
                                >
                                  <WithStyles(ForwardRef(ButtonBase))
                                    centerRipple={true}
                                    className="MuiIconButton-root"
                                    disabled={false}
                                    focusRipple={true}
                                    id="tour-next-btn"
                                    onClick={[Function]}
                                  >
                                    <ForwardRef(ButtonBase)
                                      centerRipple={true}
                                      className="MuiIconButton-root"
                                      classes={
                                        Object {
                                          "disabled": "Mui-disabled",
                                          "focusVisible": "Mui-focusVisible",
                                          "root": "MuiButtonBase-root",
                                        }
                                      }
                                      disabled={false}
                                      focusRipple={true}
                                      id="tour-next-btn"
                                      onClick={[Function]}
                                    >
                                      <button
                                        className="MuiButtonBase-root MuiIconButton-root"
                                        disabled={false}
                                        id="tour-next-btn"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragLeave={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex={0}
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label"
                                        >
                                          <ForwardRef
                                            className="makeStyles-navigation-14"
                                          >
                                            <WithStyles(ForwardRef(SvgIcon))
                                              className="makeStyles-navigation-14"
                                            >
                                              <ForwardRef(SvgIcon)
                                                className="makeStyles-navigation-14"
                                                classes={
                                                  Object {
                                                    "colorAction": "MuiSvgIcon-colorAction",
                                                    "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                    "colorError": "MuiSvgIcon-colorError",
                                                    "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                    "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                    "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                    "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                    "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                    "root": "MuiSvgIcon-root",
                                                  }
                                                }
                                              >
                                                <svg
                                                  aria-hidden={true}
                                                  className="MuiSvgIcon-root makeStyles-navigation-14"
                                                  focusable="false"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <path
                                                    d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                                  />
                                                </svg>
                                              </ForwardRef(SvgIcon)>
                                            </WithStyles(ForwardRef(SvgIcon))>
                                          </ForwardRef>
                                        </span>
                                        <WithStyles(memo)
                                          center={true}
                                        >
                                          <ForwardRef(TouchRipple)
                                            center={true}
                                            classes={
                                              Object {
                                                "child": "MuiTouchRipple-child",
                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                "ripple": "MuiTouchRipple-ripple",
                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                "root": "MuiTouchRipple-root",
                                              }
                                            }
                                          >
                                            <span
                                              className="MuiTouchRipple-root"
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                component={null}
                                                exit={true}
                                              />
                                            </span>
                                          </ForwardRef(TouchRipple)>
                                        </WithStyles(memo)>
                                      </button>
                                    </ForwardRef(ButtonBase)>
                                  </WithStyles(ForwardRef(ButtonBase))>
                                </ForwardRef(IconButton)>
                              </WithStyles(ForwardRef(IconButton))>
                            </div>
                          </Styled(MuiBox)>
                        </Memo()>
                      </div>
                    </Styled(MuiBox)>
                    <styled.span
                      accentColor="#3f51b5"
                      data-tour-elem="badge"
                    >
                      <StyledComponent
                        accentColor="#3f51b5"
                        data-tour-elem="badge"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-EHOje",
                              "isStatic": false,
                              "lastClassName": "doXVdu",
                              "rules": Array [
                                "
  position: absolute;
  font-family: monospace;
  background: var(--reactour-accent);
  background: ",
                                [Function],
                                ";
  height: 1.875em;
  line-height: 2;
  padding-left: 0.8125em;
  padding-right: 0.8125em;
  font-size: 1em;
  border-radius: 1.625em;
  color: white;
  text-align: center;
  box-shadow: 0 0.25em 0.5em rgba(0, 0, 0, 0.3);
  top: -0.8125em;
  left: -0.8125em;
",
                              ],
                            },
                            "displayName": "styled.span",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-EHOje",
                            "target": "span",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <span
                          className="sc-EHOje doXVdu"
                          data-tour-elem="badge"
                        >
                          3 of 12
                        </span>
                      </StyledComponent>
                    </styled.span>
                    <Styled(Close)
                      className="reactour__close"
                      onClick={[Function]}
                    >
                      <StyledComponent
                        className="reactour__close"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-bxivhb",
                              "isStatic": false,
                              "lastClassName": "eTpeTG",
                              "rules": Array [
                                "
  position: absolute;
  top: 22px;
  right: 22px;
  width: 9px;
  height: 9px;
  color: #5e5e5e;
  &:hover {
    color: #000;
  }
",
                              ],
                            },
                            "displayName": "Styled(Close)",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-bxivhb",
                            "target": [Function],
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        onClick={[Function]}
                      >
                        <Close
                          className="sc-bxivhb eTpeTG reactour__close"
                          onClick={[Function]}
                        >
                          <styled.button
                            className="sc-bxivhb eTpeTG reactour__close"
                            onClick={[Function]}
                          >
                            <StyledComponent
                              className="sc-bxivhb eTpeTG reactour__close"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-bdVaJa",
                                    "isStatic": false,
                                    "lastClassName": "cYQqRL",
                                    "rules": Array [
                                      "
  display: block;
  padding: 0;
  border: 0;
  background: none;
  font-size: 0;
  cursor: ",
                                      [Function],
                                      ";
",
                                    ],
                                  },
                                  "displayName": "styled.button",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-bdVaJa",
                                  "target": "button",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              onClick={[Function]}
                            >
                              <button
                                className="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                                onClick={[Function]}
                              >
                                <svg
                                  viewBox="0 0 9.1 9.1"
                                >
                                  <path
                                    d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                                    fill="currentColor"
                                  />
                                </svg>
                              </button>
                            </StyledComponent>
                          </styled.button>
                        </Close>
                      </StyledComponent>
                    </Styled(Close)>
                  </div>
                </StyledComponent>
              </styled.div>
            </div>
            <div
              data-focus-guard={true}
              style={
                Object {
                  "height": "0px",
                  "left": "1px",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "fixed",
                  "top": "1px",
                  "width": "1px",
                }
              }
              tabIndex={0}
            />
          </ForwardRef>
        </ForwardRef>
      </Portal>
    </Portal>
  </Tour>
</Memo()>
`;

exports[`Dashboard Tour renders loop request step (10/12) 1`] = `
<Memo()
  tourProps={
    Object {
      "OmniPanelViewIndex": Object {
        "0": "MainMenu",
        "1": "Doors",
        "2": "Lifts",
        "3": "Robots",
        "4": "Dispensers",
        "5": "Commands",
        "6": "Negotiations",
        "Commands": 5,
        "Dispensers": 4,
        "Doors": 1,
        "Lifts": 2,
        "MainMenu": 0,
        "Negotiations": 6,
        "Robots": 3,
      },
      "doorSpotlight": Object {
        "value": "main_door",
      },
      "setDoorSpotlight": [MockFunction],
      "setTourSettingsAndOmniPanel": [MockFunction] {
        "calls": Array [
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
      "setTourShowOmniPanel": [MockFunction] {
        "calls": Array [
          Array [
            0,
          ],
          Array [
            0,
          ],
          Array [
            0,
          ],
          Array [
            1,
          ],
          Array [
            0,
          ],
          Array [
            1,
          ],
          Array [
            0,
          ],
          Array [
            0,
          ],
          Array [
            1,
          ],
          Array [
            0,
          ],
          Array [
            5,
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
      "setTourState": [MockFunction],
      "tourState": true,
    }
  }
>
  <Tour
    accentColor="#3f51b5"
    badgeContent={[Function]}
    closeWithMask={false}
    disableFocusLock={false}
    disableInteraction={false}
    disableKeyboardNavigation={
      Array [
        "right",
        "left",
      ]
    }
    isOpen={true}
    maskSpace={10}
    onRequestClose={[Function]}
    rounded={5}
    scrollDuration={1}
    showButtons={false}
    showCloseButton={true}
    showNavigation={false}
    showNavigationNumber={false}
    showNumber={true}
    startAt={0}
    steps={
      Array [
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "[class=\\"leaflet-control-zoom leaflet-bar leaflet-control\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "[class= \\"leaflet-control-layers leaflet-control\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "[class=\\"leaflet-image-layer leaflet-zoom-animated\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[id=\\"toggle-omnipanel-btn\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-component=\\"MainMenu\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-item=\\"Doors\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-name=\\"main_door\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-item= \\"Commands\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-component=\\"LoopForm\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[id=\\"show-settings-btn\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": ".MuiDrawer-paper",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
      ]
    }
    updateDelay={1}
  >
    <Portal>
      <Portal
        containerInfo={
          <div
            id="___reactour"
          >
            <div
              class="sc-dnqmqq kWwJhA"
            >
              <svg
                height="768"
                width="1024"
                xmlns="http://www.w3.org/2000/svg"
              >
                <defs>
                  <mask
                    id="mask-main"
                  >
                    <rect
                      fill="white"
                      height="768"
                      width="1024"
                      x="0"
                      y="0"
                    />
                    <rect
                      fill="black"
                      height="20"
                      width="20"
                      x="502"
                      y="768"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="501"
                      y="767"
                    />
                    <circle
                      cx="507"
                      cy="773"
                      fill="black"
                      r="5"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="518"
                      y="767"
                    />
                    <circle
                      cx="517"
                      cy="773"
                      fill="black"
                      r="5"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="501"
                      y="784"
                    />
                    <circle
                      cx="507"
                      cy="783"
                      fill="black"
                      r="5"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="518"
                      y="784"
                    />
                    <circle
                      cx="517"
                      cy="783"
                      fill="black "
                      r="5"
                    />
                  </mask>
                  <clippath
                    id="clip-path"
                  >
                    <rect
                      height="768"
                      width="1024"
                      x="0"
                      y="0"
                    />
                    <rect
                      height="20"
                      width="502"
                      x="0"
                      y="768"
                    />
                    <rect
                      height="20"
                      width="522"
                      x="522"
                      y="768"
                    />
                    <rect
                      height="0"
                      width="1024"
                      x="0"
                      y="788"
                    />
                  </clippath>
                </defs>
                <rect
                  fill="currentColor"
                  height="768"
                  mask="url(#mask-main)"
                  width="1024"
                  x="0"
                  y="0"
                />
                <rect
                  clip-path="url(#clip-path)"
                  fill="currentColor"
                  height="768"
                  pointer-events="auto"
                  width="1024"
                  x="0"
                  y="0"
                />
                <rect
                  class="reactour__mask--disable-interaction undefined"
                  display="none"
                  fill="transparent"
                  height="20"
                  pointer-events="auto"
                  width="20"
                  x="502"
                  y="768"
                />
              </svg>
            </div>
            <div
              data-focus-guard="true"
              style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
              tabindex="0"
            />
            <div
              data-focus-guard="true"
              style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
              tabindex="1"
            />
            <div
              data-focus-lock-disabled="false"
            >
              <div
                class="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                role="dialog"
                style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                tabindex="-1"
              >
                <div
                  class="MuiBox-root MuiBox-root-31"
                  id="stepNode"
                >
                  <h6
                    class="MuiTypography-root MuiTypography-h6"
                  >
                    An example is the Loop Request which can be iterated multiple times. RoMi will assign the most suitable robot to perform the task at the point of request.
                  </h6>
                  <div
                    class="MuiBox-root MuiBox-root-33"
                  >
                    <button
                      class="MuiButtonBase-root MuiIconButton-root"
                      id="tour-back-btn"
                      tabindex="0"
                      type="button"
                    >
                      <span
                        class="MuiIconButton-label"
                      >
                        <svg
                          aria-hidden="true"
                          class="MuiSvgIcon-root makeStyles-navigation-32"
                          focusable="false"
                          viewBox="0 0 24 24"
                        >
                          <path
                            d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                          />
                        </svg>
                      </span>
                      <span
                        class="MuiTouchRipple-root"
                      />
                    </button>
                    <button
                      class="MuiButtonBase-root MuiIconButton-root"
                      id="tour-next-btn"
                      tabindex="0"
                      type="button"
                    >
                      <span
                        class="MuiIconButton-label"
                      >
                        <svg
                          aria-hidden="true"
                          class="MuiSvgIcon-root makeStyles-navigation-32"
                          focusable="false"
                          viewBox="0 0 24 24"
                        >
                          <path
                            d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                          />
                        </svg>
                      </span>
                      <span
                        class="MuiTouchRipple-root"
                      />
                    </button>
                  </div>
                </div>
                <span
                  class="sc-EHOje doXVdu"
                  data-tour-elem="badge"
                >
                  10 of 12
                </span>
                <button
                  class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                >
                  <svg
                    viewBox="0 0 9.1 9.1"
                  >
                    <path
                      d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                      fill="currentColor"
                    />
                  </svg>
                </button>
              </div>
            </div>
            <div
              data-focus-guard="true"
              style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
              tabindex="0"
            />
          </div>
        }
      >
        <GlobalStyleComponent />
        <ReactourResizeObserver
          refresh={[Function]}
          step={
            Object {
              "action": undefined,
              "content": [Function],
              "selector": "[data-item= \\"Commands\\"]",
              "style": Object {
                "backgroundColor": "#7986cb",
                "borderRadius": "5px",
                "color": "#fff",
              },
            }
          }
        />
        <ReactourMutationObserver
          refresh={[Function]}
          step={
            Object {
              "action": undefined,
              "content": [Function],
              "selector": "[data-item= \\"Commands\\"]",
              "style": Object {
                "backgroundColor": "#7986cb",
                "borderRadius": "5px",
                "color": "#fff",
              },
            }
          }
        />
        <SvgMask
          disableInteraction={false}
          disableInteractionClassName="reactour__mask--disable-interaction undefined"
          forwardRef={[Function]}
          onClick={[Function]}
          padding={10}
          rounded={5}
          targetHeight={0}
          targetLeft={512}
          targetTop={778}
          targetWidth={0}
          windowHeight={768}
          windowWidth={1024}
        >
          <styled.div
            onClick={[Function]}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-dnqmqq",
                    "isStatic": false,
                    "lastClassName": "kWwJhA",
                    "rules": Array [
                      "
  opacity: ",
                      [Function],
                      ";
  color: ",
                      [Function],
                      ";
  width: 100%;
  left: 0;
  top: 0;
  height: 100%;
  position: fixed;
  z-index: 99999;
  pointer-events: none;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-dnqmqq",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
            >
              <div
                className="sc-dnqmqq kWwJhA"
                onClick={[Function]}
              >
                <svg
                  height={768}
                  width={1024}
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <defs>
                    <mask
                      id="mask-main"
                    >
                      <rect
                        fill="white"
                        height={768}
                        width={1024}
                        x={0}
                        y={0}
                      />
                      <rect
                        fill="black"
                        height={20}
                        width={20}
                        x={502}
                        y={768}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={501}
                        y={767}
                      />
                      <circle
                        cx={507}
                        cy={773}
                        fill="black"
                        r={5}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={518}
                        y={767}
                      />
                      <circle
                        cx={517}
                        cy={773}
                        fill="black"
                        r={5}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={501}
                        y={784}
                      />
                      <circle
                        cx={507}
                        cy={783}
                        fill="black"
                        r={5}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={518}
                        y={784}
                      />
                      <circle
                        cx={517}
                        cy={783}
                        fill="black "
                        r={5}
                      />
                    </mask>
                    <clipPath
                      id="clip-path"
                    >
                      <rect
                        height={768}
                        width={1024}
                        x={0}
                        y={0}
                      />
                      <rect
                        height={20}
                        width={502}
                        x={0}
                        y={768}
                      />
                      <rect
                        height={20}
                        width={522}
                        x={522}
                        y={768}
                      />
                      <rect
                        height={0}
                        width={1024}
                        x={0}
                        y={788}
                      />
                    </clipPath>
                  </defs>
                  <rect
                    fill="currentColor"
                    height={768}
                    mask="url(#mask-main)"
                    width={1024}
                    x={0}
                    y={0}
                  />
                  <rect
                    clipPath="url(#clip-path)"
                    fill="currentColor"
                    height={768}
                    pointerEvents="auto"
                    width={1024}
                    x={0}
                    y={0}
                  />
                  <rect
                    className="reactour__mask--disable-interaction undefined"
                    display="none"
                    fill="transparent"
                    height={20}
                    pointerEvents="auto"
                    width={20}
                    x={502}
                    y={768}
                  />
                </svg>
              </div>
            </StyledComponent>
          </styled.div>
        </SvgMask>
        <ForwardRef
          disabled={false}
        >
          <ForwardRef
            as="div"
            autoFocus={true}
            disabled={false}
            lockProps={Object {}}
            noFocusGuards={false}
            persistentFocus={false}
            returnFocus={false}
            sideCar={[Function]}
          >
            <div
              data-focus-guard={true}
              key="guard-first"
              style={
                Object {
                  "height": "0px",
                  "left": "1px",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "fixed",
                  "top": "1px",
                  "width": "1px",
                }
              }
              tabIndex={0}
            />
            <div
              data-focus-guard={true}
              key="guard-nearest"
              style={
                Object {
                  "height": "0px",
                  "left": "1px",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "fixed",
                  "top": "1px",
                  "width": "1px",
                }
              }
              tabIndex={1}
            />
            <SideEffect(FocusWatcher)
              autoFocus={true}
              disabled={false}
              id={Object {}}
              observed={
                <div
                  data-focus-lock-disabled="false"
                >
                  <div
                    class="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                    role="dialog"
                    style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                    tabindex="-1"
                  >
                    <div
                      class="MuiBox-root MuiBox-root-31"
                      id="stepNode"
                    >
                      <h6
                        class="MuiTypography-root MuiTypography-h6"
                      >
                        An example is the Loop Request which can be iterated multiple times. RoMi will assign the most suitable robot to perform the task at the point of request.
                      </h6>
                      <div
                        class="MuiBox-root MuiBox-root-33"
                      >
                        <button
                          class="MuiButtonBase-root MuiIconButton-root"
                          id="tour-back-btn"
                          tabindex="0"
                          type="button"
                        >
                          <span
                            class="MuiIconButton-label"
                          >
                            <svg
                              aria-hidden="true"
                              class="MuiSvgIcon-root makeStyles-navigation-32"
                              focusable="false"
                              viewBox="0 0 24 24"
                            >
                              <path
                                d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                              />
                            </svg>
                          </span>
                          <span
                            class="MuiTouchRipple-root"
                          />
                        </button>
                        <button
                          class="MuiButtonBase-root MuiIconButton-root"
                          id="tour-next-btn"
                          tabindex="0"
                          type="button"
                        >
                          <span
                            class="MuiIconButton-label"
                          >
                            <svg
                              aria-hidden="true"
                              class="MuiSvgIcon-root makeStyles-navigation-32"
                              focusable="false"
                              viewBox="0 0 24 24"
                            >
                              <path
                                d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                              />
                            </svg>
                          </span>
                          <span
                            class="MuiTouchRipple-root"
                          />
                        </button>
                      </div>
                    </div>
                    <span
                      class="sc-EHOje doXVdu"
                      data-tour-elem="badge"
                    >
                      10 of 12
                    </span>
                    <button
                      class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                    >
                      <svg
                        viewBox="0 0 9.1 9.1"
                      >
                        <path
                          d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                          fill="currentColor"
                        />
                      </svg>
                    </button>
                  </div>
                </div>
              }
              onActivation={[Function]}
              onDeactivation={[Function]}
              persistentFocus={false}
              returnFocus={[Function]}
              shards={Array []}
              sideCar={
                Object {
                  "assignMedium": [Function],
                  "assignSyncMedium": [Function],
                  "options": Object {
                    "async": true,
                    "ssr": false,
                  },
                  "read": [Function],
                  "useMedium": [Function],
                }
              }
            >
              <FocusWatcher
                autoFocus={true}
                disabled={false}
                id={Object {}}
                observed={
                  <div
                    data-focus-lock-disabled="false"
                  >
                    <div
                      class="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                      role="dialog"
                      style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                      tabindex="-1"
                    >
                      <div
                        class="MuiBox-root MuiBox-root-31"
                        id="stepNode"
                      >
                        <h6
                          class="MuiTypography-root MuiTypography-h6"
                        >
                          An example is the Loop Request which can be iterated multiple times. RoMi will assign the most suitable robot to perform the task at the point of request.
                        </h6>
                        <div
                          class="MuiBox-root MuiBox-root-33"
                        >
                          <button
                            class="MuiButtonBase-root MuiIconButton-root"
                            id="tour-back-btn"
                            tabindex="0"
                            type="button"
                          >
                            <span
                              class="MuiIconButton-label"
                            >
                              <svg
                                aria-hidden="true"
                                class="MuiSvgIcon-root makeStyles-navigation-32"
                                focusable="false"
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                />
                              </svg>
                            </span>
                            <span
                              class="MuiTouchRipple-root"
                            />
                          </button>
                          <button
                            class="MuiButtonBase-root MuiIconButton-root"
                            id="tour-next-btn"
                            tabindex="0"
                            type="button"
                          >
                            <span
                              class="MuiIconButton-label"
                            >
                              <svg
                                aria-hidden="true"
                                class="MuiSvgIcon-root makeStyles-navigation-32"
                                focusable="false"
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                />
                              </svg>
                            </span>
                            <span
                              class="MuiTouchRipple-root"
                            />
                          </button>
                        </div>
                      </div>
                      <span
                        class="sc-EHOje doXVdu"
                        data-tour-elem="badge"
                      >
                        10 of 12
                      </span>
                      <button
                        class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                      >
                        <svg
                          viewBox="0 0 9.1 9.1"
                        >
                          <path
                            d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                            fill="currentColor"
                          />
                        </svg>
                      </button>
                    </div>
                  </div>
                }
                onActivation={[Function]}
                onDeactivation={[Function]}
                persistentFocus={false}
                returnFocus={[Function]}
                shards={Array []}
                sideCar={
                  Object {
                    "assignMedium": [Function],
                    "assignSyncMedium": [Function],
                    "options": Object {
                      "async": true,
                      "ssr": false,
                    },
                    "read": [Function],
                    "useMedium": [Function],
                  }
                }
              />
            </SideEffect(FocusWatcher)>
            <div
              data-focus-lock-disabled={false}
              onBlur={[Function]}
              onFocus={[Function]}
            >
              <styled.div
                accentColor="#3f51b5"
                className="reactour__helper reactour__helper--is-open"
                current={8}
                defaultStyles={true}
                helperHeight={0}
                helperPosition="center"
                helperWidth={0}
                padding={10}
                role="dialog"
                rounded={5}
                style={
                  Object {
                    "backgroundColor": "#7986cb",
                    "borderRadius": "5px",
                    "color": "#fff",
                  }
                }
                tabIndex={-1}
                targetBottom={393}
                targetHeight={0}
                targetLeft={512}
                targetRight={521}
                targetTop={778}
                targetWidth={0}
                windowHeight={768}
                windowWidth={1024}
              >
                <StyledComponent
                  accentColor="#3f51b5"
                  className="reactour__helper reactour__helper--is-open"
                  current={8}
                  defaultStyles={true}
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-ifAKCX",
                        "isStatic": false,
                        "lastClassName": "jBzNhS",
                        "rules": Array [
                          "
  --reactour-accent: ",
                          [Function],
                          ";
  ",
                          [Function],
                          "
  position: fixed;
  transition: transform 0.3s;
  top: 0;
  left: 0;
  z-index: 1000000;

  transform: ",
                          [Function],
                          ";
",
                        ],
                      },
                      "displayName": "styled.div",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-ifAKCX",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={
                    Object {
                      "current": <div
                        class="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                        role="dialog"
                        style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                        tabindex="-1"
                      >
                        <div
                          class="MuiBox-root MuiBox-root-31"
                          id="stepNode"
                        >
                          <h6
                            class="MuiTypography-root MuiTypography-h6"
                          >
                            An example is the Loop Request which can be iterated multiple times. RoMi will assign the most suitable robot to perform the task at the point of request.
                          </h6>
                          <div
                            class="MuiBox-root MuiBox-root-33"
                          >
                            <button
                              class="MuiButtonBase-root MuiIconButton-root"
                              id="tour-back-btn"
                              tabindex="0"
                              type="button"
                            >
                              <span
                                class="MuiIconButton-label"
                              >
                                <svg
                                  aria-hidden="true"
                                  class="MuiSvgIcon-root makeStyles-navigation-32"
                                  focusable="false"
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                  />
                                </svg>
                              </span>
                              <span
                                class="MuiTouchRipple-root"
                              />
                            </button>
                            <button
                              class="MuiButtonBase-root MuiIconButton-root"
                              id="tour-next-btn"
                              tabindex="0"
                              type="button"
                            >
                              <span
                                class="MuiIconButton-label"
                              >
                                <svg
                                  aria-hidden="true"
                                  class="MuiSvgIcon-root makeStyles-navigation-32"
                                  focusable="false"
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                  />
                                </svg>
                              </span>
                              <span
                                class="MuiTouchRipple-root"
                              />
                            </button>
                          </div>
                        </div>
                        <span
                          class="sc-EHOje doXVdu"
                          data-tour-elem="badge"
                        >
                          10 of 12
                        </span>
                        <button
                          class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                        >
                          <svg
                            viewBox="0 0 9.1 9.1"
                          >
                            <path
                              d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                              fill="currentColor"
                            />
                          </svg>
                        </button>
                      </div>,
                    }
                  }
                  helperHeight={0}
                  helperPosition="center"
                  helperWidth={0}
                  padding={10}
                  role="dialog"
                  rounded={5}
                  style={
                    Object {
                      "backgroundColor": "#7986cb",
                      "borderRadius": "5px",
                      "color": "#fff",
                    }
                  }
                  tabIndex={-1}
                  targetBottom={393}
                  targetHeight={0}
                  targetLeft={512}
                  targetRight={521}
                  targetTop={778}
                  targetWidth={0}
                  windowHeight={768}
                  windowWidth={1024}
                >
                  <div
                    className="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                    role="dialog"
                    style={
                      Object {
                        "backgroundColor": "#7986cb",
                        "borderRadius": "5px",
                        "color": "#fff",
                      }
                    }
                    tabIndex={-1}
                  >
                    <Styled(MuiBox)
                      id="stepNode"
                    >
                      <div
                        className="MuiBox-root MuiBox-root-31"
                        id="stepNode"
                      >
                        <WithStyles(ForwardRef(Typography))
                          variant="h6"
                        >
                          <ForwardRef(Typography)
                            classes={
                              Object {
                                "alignCenter": "MuiTypography-alignCenter",
                                "alignJustify": "MuiTypography-alignJustify",
                                "alignLeft": "MuiTypography-alignLeft",
                                "alignRight": "MuiTypography-alignRight",
                                "body1": "MuiTypography-body1",
                                "body2": "MuiTypography-body2",
                                "button": "MuiTypography-button",
                                "caption": "MuiTypography-caption",
                                "colorError": "MuiTypography-colorError",
                                "colorInherit": "MuiTypography-colorInherit",
                                "colorPrimary": "MuiTypography-colorPrimary",
                                "colorSecondary": "MuiTypography-colorSecondary",
                                "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                "displayBlock": "MuiTypography-displayBlock",
                                "displayInline": "MuiTypography-displayInline",
                                "gutterBottom": "MuiTypography-gutterBottom",
                                "h1": "MuiTypography-h1",
                                "h2": "MuiTypography-h2",
                                "h3": "MuiTypography-h3",
                                "h4": "MuiTypography-h4",
                                "h5": "MuiTypography-h5",
                                "h6": "MuiTypography-h6",
                                "noWrap": "MuiTypography-noWrap",
                                "overline": "MuiTypography-overline",
                                "paragraph": "MuiTypography-paragraph",
                                "root": "MuiTypography-root",
                                "srOnly": "MuiTypography-srOnly",
                                "subtitle1": "MuiTypography-subtitle1",
                                "subtitle2": "MuiTypography-subtitle2",
                              }
                            }
                            variant="h6"
                          >
                            <h6
                              className="MuiTypography-root MuiTypography-h6"
                            >
                              The Commands Panel allows you to send different types of requests that will be handled by RoMi.
                            </h6>
                          </ForwardRef(Typography)>
                        </WithStyles(ForwardRef(Typography))>
                        <Memo()
                          goTo={[Function]}
                          handleBackClick={[Function]}
                          handleNextClick={[Function]}
                          step={9}
                        >
                          <Styled(MuiBox)>
                            <div
                              className="MuiBox-root MuiBox-root-33"
                            >
                              <WithStyles(ForwardRef(IconButton))
                                id="tour-back-btn"
                                onClick={[Function]}
                              >
                                <ForwardRef(IconButton)
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit",
                                      "colorPrimary": "MuiIconButton-colorPrimary",
                                      "colorSecondary": "MuiIconButton-colorSecondary",
                                      "disabled": "Mui-disabled",
                                      "edgeEnd": "MuiIconButton-edgeEnd",
                                      "edgeStart": "MuiIconButton-edgeStart",
                                      "label": "MuiIconButton-label",
                                      "root": "MuiIconButton-root",
                                      "sizeSmall": "MuiIconButton-sizeSmall",
                                    }
                                  }
                                  id="tour-back-btn"
                                  onClick={[Function]}
                                >
                                  <WithStyles(ForwardRef(ButtonBase))
                                    centerRipple={true}
                                    className="MuiIconButton-root"
                                    disabled={false}
                                    focusRipple={true}
                                    id="tour-back-btn"
                                    onClick={[Function]}
                                  >
                                    <ForwardRef(ButtonBase)
                                      centerRipple={true}
                                      className="MuiIconButton-root"
                                      classes={
                                        Object {
                                          "disabled": "Mui-disabled",
                                          "focusVisible": "Mui-focusVisible",
                                          "root": "MuiButtonBase-root",
                                        }
                                      }
                                      disabled={false}
                                      focusRipple={true}
                                      id="tour-back-btn"
                                      onClick={[Function]}
                                    >
                                      <button
                                        className="MuiButtonBase-root MuiIconButton-root"
                                        disabled={false}
                                        id="tour-back-btn"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragLeave={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex={0}
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label"
                                        >
                                          <ForwardRef
                                            className="makeStyles-navigation-32"
                                          >
                                            <WithStyles(ForwardRef(SvgIcon))
                                              className="makeStyles-navigation-32"
                                            >
                                              <ForwardRef(SvgIcon)
                                                className="makeStyles-navigation-32"
                                                classes={
                                                  Object {
                                                    "colorAction": "MuiSvgIcon-colorAction",
                                                    "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                    "colorError": "MuiSvgIcon-colorError",
                                                    "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                    "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                    "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                    "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                    "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                    "root": "MuiSvgIcon-root",
                                                  }
                                                }
                                              >
                                                <svg
                                                  aria-hidden={true}
                                                  className="MuiSvgIcon-root makeStyles-navigation-32"
                                                  focusable="false"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <path
                                                    d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                                  />
                                                </svg>
                                              </ForwardRef(SvgIcon)>
                                            </WithStyles(ForwardRef(SvgIcon))>
                                          </ForwardRef>
                                        </span>
                                        <WithStyles(memo)
                                          center={true}
                                        >
                                          <ForwardRef(TouchRipple)
                                            center={true}
                                            classes={
                                              Object {
                                                "child": "MuiTouchRipple-child",
                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                "ripple": "MuiTouchRipple-ripple",
                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                "root": "MuiTouchRipple-root",
                                              }
                                            }
                                          >
                                            <span
                                              className="MuiTouchRipple-root"
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                component={null}
                                                exit={true}
                                              />
                                            </span>
                                          </ForwardRef(TouchRipple)>
                                        </WithStyles(memo)>
                                      </button>
                                    </ForwardRef(ButtonBase)>
                                  </WithStyles(ForwardRef(ButtonBase))>
                                </ForwardRef(IconButton)>
                              </WithStyles(ForwardRef(IconButton))>
                              <WithStyles(ForwardRef(IconButton))
                                id="tour-next-btn"
                                onClick={[Function]}
                              >
                                <ForwardRef(IconButton)
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit",
                                      "colorPrimary": "MuiIconButton-colorPrimary",
                                      "colorSecondary": "MuiIconButton-colorSecondary",
                                      "disabled": "Mui-disabled",
                                      "edgeEnd": "MuiIconButton-edgeEnd",
                                      "edgeStart": "MuiIconButton-edgeStart",
                                      "label": "MuiIconButton-label",
                                      "root": "MuiIconButton-root",
                                      "sizeSmall": "MuiIconButton-sizeSmall",
                                    }
                                  }
                                  id="tour-next-btn"
                                  onClick={[Function]}
                                >
                                  <WithStyles(ForwardRef(ButtonBase))
                                    centerRipple={true}
                                    className="MuiIconButton-root"
                                    disabled={false}
                                    focusRipple={true}
                                    id="tour-next-btn"
                                    onClick={[Function]}
                                  >
                                    <ForwardRef(ButtonBase)
                                      centerRipple={true}
                                      className="MuiIconButton-root"
                                      classes={
                                        Object {
                                          "disabled": "Mui-disabled",
                                          "focusVisible": "Mui-focusVisible",
                                          "root": "MuiButtonBase-root",
                                        }
                                      }
                                      disabled={false}
                                      focusRipple={true}
                                      id="tour-next-btn"
                                      onClick={[Function]}
                                    >
                                      <button
                                        className="MuiButtonBase-root MuiIconButton-root"
                                        disabled={false}
                                        id="tour-next-btn"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragLeave={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex={0}
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label"
                                        >
                                          <ForwardRef
                                            className="makeStyles-navigation-32"
                                          >
                                            <WithStyles(ForwardRef(SvgIcon))
                                              className="makeStyles-navigation-32"
                                            >
                                              <ForwardRef(SvgIcon)
                                                className="makeStyles-navigation-32"
                                                classes={
                                                  Object {
                                                    "colorAction": "MuiSvgIcon-colorAction",
                                                    "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                    "colorError": "MuiSvgIcon-colorError",
                                                    "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                    "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                    "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                    "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                    "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                    "root": "MuiSvgIcon-root",
                                                  }
                                                }
                                              >
                                                <svg
                                                  aria-hidden={true}
                                                  className="MuiSvgIcon-root makeStyles-navigation-32"
                                                  focusable="false"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <path
                                                    d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                                  />
                                                </svg>
                                              </ForwardRef(SvgIcon)>
                                            </WithStyles(ForwardRef(SvgIcon))>
                                          </ForwardRef>
                                        </span>
                                        <WithStyles(memo)
                                          center={true}
                                        >
                                          <ForwardRef(TouchRipple)
                                            center={true}
                                            classes={
                                              Object {
                                                "child": "MuiTouchRipple-child",
                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                "ripple": "MuiTouchRipple-ripple",
                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                "root": "MuiTouchRipple-root",
                                              }
                                            }
                                          >
                                            <span
                                              className="MuiTouchRipple-root"
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                component={null}
                                                exit={true}
                                              />
                                            </span>
                                          </ForwardRef(TouchRipple)>
                                        </WithStyles(memo)>
                                      </button>
                                    </ForwardRef(ButtonBase)>
                                  </WithStyles(ForwardRef(ButtonBase))>
                                </ForwardRef(IconButton)>
                              </WithStyles(ForwardRef(IconButton))>
                            </div>
                          </Styled(MuiBox)>
                        </Memo()>
                      </div>
                    </Styled(MuiBox)>
                    <styled.span
                      accentColor="#3f51b5"
                      data-tour-elem="badge"
                    >
                      <StyledComponent
                        accentColor="#3f51b5"
                        data-tour-elem="badge"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-EHOje",
                              "isStatic": false,
                              "lastClassName": "doXVdu",
                              "rules": Array [
                                "
  position: absolute;
  font-family: monospace;
  background: var(--reactour-accent);
  background: ",
                                [Function],
                                ";
  height: 1.875em;
  line-height: 2;
  padding-left: 0.8125em;
  padding-right: 0.8125em;
  font-size: 1em;
  border-radius: 1.625em;
  color: white;
  text-align: center;
  box-shadow: 0 0.25em 0.5em rgba(0, 0, 0, 0.3);
  top: -0.8125em;
  left: -0.8125em;
",
                              ],
                            },
                            "displayName": "styled.span",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-EHOje",
                            "target": "span",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <span
                          className="sc-EHOje doXVdu"
                          data-tour-elem="badge"
                        >
                          9 of 12
                        </span>
                      </StyledComponent>
                    </styled.span>
                    <Styled(Close)
                      className="reactour__close"
                      onClick={[Function]}
                    >
                      <StyledComponent
                        className="reactour__close"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-bxivhb",
                              "isStatic": false,
                              "lastClassName": "eTpeTG",
                              "rules": Array [
                                "
  position: absolute;
  top: 22px;
  right: 22px;
  width: 9px;
  height: 9px;
  color: #5e5e5e;
  &:hover {
    color: #000;
  }
",
                              ],
                            },
                            "displayName": "Styled(Close)",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-bxivhb",
                            "target": [Function],
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        onClick={[Function]}
                      >
                        <Close
                          className="sc-bxivhb eTpeTG reactour__close"
                          onClick={[Function]}
                        >
                          <styled.button
                            className="sc-bxivhb eTpeTG reactour__close"
                            onClick={[Function]}
                          >
                            <StyledComponent
                              className="sc-bxivhb eTpeTG reactour__close"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-bdVaJa",
                                    "isStatic": false,
                                    "lastClassName": "cYQqRL",
                                    "rules": Array [
                                      "
  display: block;
  padding: 0;
  border: 0;
  background: none;
  font-size: 0;
  cursor: ",
                                      [Function],
                                      ";
",
                                    ],
                                  },
                                  "displayName": "styled.button",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-bdVaJa",
                                  "target": "button",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              onClick={[Function]}
                            >
                              <button
                                className="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                                onClick={[Function]}
                              >
                                <svg
                                  viewBox="0 0 9.1 9.1"
                                >
                                  <path
                                    d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                                    fill="currentColor"
                                  />
                                </svg>
                              </button>
                            </StyledComponent>
                          </styled.button>
                        </Close>
                      </StyledComponent>
                    </Styled(Close)>
                  </div>
                </StyledComponent>
              </styled.div>
            </div>
            <div
              data-focus-guard={true}
              style={
                Object {
                  "height": "0px",
                  "left": "1px",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "fixed",
                  "top": "1px",
                  "width": "1px",
                }
              }
              tabIndex={0}
            />
          </ForwardRef>
        </ForwardRef>
      </Portal>
    </Portal>
  </Tour>
</Memo()>
`;

exports[`Dashboard Tour renders main menu step (6/12) 1`] = `
<Memo()
  tourProps={
    Object {
      "OmniPanelViewIndex": Object {
        "0": "MainMenu",
        "1": "Doors",
        "2": "Lifts",
        "3": "Robots",
        "4": "Dispensers",
        "5": "Commands",
        "6": "Negotiations",
        "Commands": 5,
        "Dispensers": 4,
        "Doors": 1,
        "Lifts": 2,
        "MainMenu": 0,
        "Negotiations": 6,
        "Robots": 3,
      },
      "doorSpotlight": Object {
        "value": "main_door",
      },
      "setDoorSpotlight": [MockFunction],
      "setTourSettingsAndOmniPanel": [MockFunction] {
        "calls": Array [
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
      "setTourShowOmniPanel": [MockFunction] {
        "calls": Array [
          Array [
            0,
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
      "setTourState": [MockFunction],
      "tourState": true,
    }
  }
>
  <Tour
    accentColor="#3f51b5"
    badgeContent={[Function]}
    closeWithMask={false}
    disableFocusLock={false}
    disableInteraction={false}
    disableKeyboardNavigation={
      Array [
        "right",
        "left",
      ]
    }
    isOpen={true}
    maskSpace={10}
    onRequestClose={[Function]}
    rounded={5}
    scrollDuration={1}
    showButtons={false}
    showCloseButton={true}
    showNavigation={false}
    showNavigationNumber={false}
    showNumber={true}
    startAt={0}
    steps={
      Array [
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "[class=\\"leaflet-control-zoom leaflet-bar leaflet-control\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "[class= \\"leaflet-control-layers leaflet-control\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "[class=\\"leaflet-image-layer leaflet-zoom-animated\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[id=\\"toggle-omnipanel-btn\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-component=\\"MainMenu\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-item=\\"Doors\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-name=\\"main_door\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-item= \\"Commands\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-component=\\"LoopForm\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[id=\\"show-settings-btn\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": ".MuiDrawer-paper",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
      ]
    }
    updateDelay={1}
  >
    <Portal>
      <Portal
        containerInfo={
          <div
            id="___reactour"
          >
            <div
              class="sc-dnqmqq kWwJhA"
            >
              <svg
                height="768"
                width="1024"
                xmlns="http://www.w3.org/2000/svg"
              >
                <defs>
                  <mask
                    id="mask-main"
                  >
                    <rect
                      fill="white"
                      height="768"
                      width="1024"
                      x="0"
                      y="0"
                    />
                    <rect
                      fill="black"
                      height="20"
                      width="20"
                      x="502"
                      y="768"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="501"
                      y="767"
                    />
                    <circle
                      cx="507"
                      cy="773"
                      fill="black"
                      r="5"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="518"
                      y="767"
                    />
                    <circle
                      cx="517"
                      cy="773"
                      fill="black"
                      r="5"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="501"
                      y="784"
                    />
                    <circle
                      cx="507"
                      cy="783"
                      fill="black"
                      r="5"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="518"
                      y="784"
                    />
                    <circle
                      cx="517"
                      cy="783"
                      fill="black "
                      r="5"
                    />
                  </mask>
                  <clippath
                    id="clip-path"
                  >
                    <rect
                      height="768"
                      width="1024"
                      x="0"
                      y="0"
                    />
                    <rect
                      height="20"
                      width="502"
                      x="0"
                      y="768"
                    />
                    <rect
                      height="20"
                      width="522"
                      x="522"
                      y="768"
                    />
                    <rect
                      height="0"
                      width="1024"
                      x="0"
                      y="788"
                    />
                  </clippath>
                </defs>
                <rect
                  fill="currentColor"
                  height="768"
                  mask="url(#mask-main)"
                  width="1024"
                  x="0"
                  y="0"
                />
                <rect
                  clip-path="url(#clip-path)"
                  fill="currentColor"
                  height="768"
                  pointer-events="auto"
                  width="1024"
                  x="0"
                  y="0"
                />
                <rect
                  class="reactour__mask--disable-interaction undefined"
                  display="none"
                  fill="transparent"
                  height="20"
                  pointer-events="auto"
                  width="20"
                  x="502"
                  y="768"
                />
              </svg>
            </div>
            <div
              data-focus-guard="true"
              style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
              tabindex="0"
            />
            <div
              data-focus-guard="true"
              style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
              tabindex="1"
            />
            <div
              data-focus-lock-disabled="false"
            >
              <div
                class="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                role="dialog"
                style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                tabindex="-1"
              >
                <div
                  class="MuiBox-root MuiBox-root-19"
                  id="stepNode"
                >
                  <h6
                    class="MuiTypography-root MuiTypography-h6"
                  >
                    Each Panel contains a list of the available items and their corresponding states.
                  </h6>
                  <div
                    class="MuiBox-root MuiBox-root-21"
                  >
                    <button
                      class="MuiButtonBase-root MuiIconButton-root"
                      id="tour-back-btn"
                      tabindex="0"
                      type="button"
                    >
                      <span
                        class="MuiIconButton-label"
                      >
                        <svg
                          aria-hidden="true"
                          class="MuiSvgIcon-root makeStyles-navigation-20"
                          focusable="false"
                          viewBox="0 0 24 24"
                        >
                          <path
                            d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                          />
                        </svg>
                      </span>
                      <span
                        class="MuiTouchRipple-root"
                      />
                    </button>
                    <button
                      class="MuiButtonBase-root MuiIconButton-root"
                      id="tour-next-btn"
                      tabindex="0"
                      type="button"
                    >
                      <span
                        class="MuiIconButton-label"
                      >
                        <svg
                          aria-hidden="true"
                          class="MuiSvgIcon-root makeStyles-navigation-20"
                          focusable="false"
                          viewBox="0 0 24 24"
                        >
                          <path
                            d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                          />
                        </svg>
                      </span>
                      <span
                        class="MuiTouchRipple-root"
                      />
                    </button>
                  </div>
                </div>
                <span
                  class="sc-EHOje doXVdu"
                  data-tour-elem="badge"
                >
                  6 of 12
                </span>
                <button
                  class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                >
                  <svg
                    viewBox="0 0 9.1 9.1"
                  >
                    <path
                      d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                      fill="currentColor"
                    />
                  </svg>
                </button>
              </div>
            </div>
            <div
              data-focus-guard="true"
              style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
              tabindex="0"
            />
          </div>
        }
      >
        <GlobalStyleComponent />
        <ReactourResizeObserver
          refresh={[Function]}
          step={
            Object {
              "action": undefined,
              "content": [Function],
              "selector": "[id=\\"toggle-omnipanel-btn\\"]",
              "style": Object {
                "backgroundColor": "#7986cb",
                "borderRadius": "5px",
                "color": "#fff",
              },
            }
          }
        />
        <ReactourMutationObserver
          refresh={[Function]}
          step={
            Object {
              "action": undefined,
              "content": [Function],
              "selector": "[id=\\"toggle-omnipanel-btn\\"]",
              "style": Object {
                "backgroundColor": "#7986cb",
                "borderRadius": "5px",
                "color": "#fff",
              },
            }
          }
        />
        <SvgMask
          disableInteraction={false}
          disableInteractionClassName="reactour__mask--disable-interaction undefined"
          forwardRef={[Function]}
          onClick={[Function]}
          padding={10}
          rounded={5}
          targetHeight={0}
          targetLeft={512}
          targetTop={778}
          targetWidth={0}
          windowHeight={768}
          windowWidth={1024}
        >
          <styled.div
            onClick={[Function]}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-dnqmqq",
                    "isStatic": false,
                    "lastClassName": "kWwJhA",
                    "rules": Array [
                      "
  opacity: ",
                      [Function],
                      ";
  color: ",
                      [Function],
                      ";
  width: 100%;
  left: 0;
  top: 0;
  height: 100%;
  position: fixed;
  z-index: 99999;
  pointer-events: none;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-dnqmqq",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
            >
              <div
                className="sc-dnqmqq kWwJhA"
                onClick={[Function]}
              >
                <svg
                  height={768}
                  width={1024}
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <defs>
                    <mask
                      id="mask-main"
                    >
                      <rect
                        fill="white"
                        height={768}
                        width={1024}
                        x={0}
                        y={0}
                      />
                      <rect
                        fill="black"
                        height={20}
                        width={20}
                        x={502}
                        y={768}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={501}
                        y={767}
                      />
                      <circle
                        cx={507}
                        cy={773}
                        fill="black"
                        r={5}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={518}
                        y={767}
                      />
                      <circle
                        cx={517}
                        cy={773}
                        fill="black"
                        r={5}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={501}
                        y={784}
                      />
                      <circle
                        cx={507}
                        cy={783}
                        fill="black"
                        r={5}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={518}
                        y={784}
                      />
                      <circle
                        cx={517}
                        cy={783}
                        fill="black "
                        r={5}
                      />
                    </mask>
                    <clipPath
                      id="clip-path"
                    >
                      <rect
                        height={768}
                        width={1024}
                        x={0}
                        y={0}
                      />
                      <rect
                        height={20}
                        width={502}
                        x={0}
                        y={768}
                      />
                      <rect
                        height={20}
                        width={522}
                        x={522}
                        y={768}
                      />
                      <rect
                        height={0}
                        width={1024}
                        x={0}
                        y={788}
                      />
                    </clipPath>
                  </defs>
                  <rect
                    fill="currentColor"
                    height={768}
                    mask="url(#mask-main)"
                    width={1024}
                    x={0}
                    y={0}
                  />
                  <rect
                    clipPath="url(#clip-path)"
                    fill="currentColor"
                    height={768}
                    pointerEvents="auto"
                    width={1024}
                    x={0}
                    y={0}
                  />
                  <rect
                    className="reactour__mask--disable-interaction undefined"
                    display="none"
                    fill="transparent"
                    height={20}
                    pointerEvents="auto"
                    width={20}
                    x={502}
                    y={768}
                  />
                </svg>
              </div>
            </StyledComponent>
          </styled.div>
        </SvgMask>
        <ForwardRef
          disabled={false}
        >
          <ForwardRef
            as="div"
            autoFocus={true}
            disabled={false}
            lockProps={Object {}}
            noFocusGuards={false}
            persistentFocus={false}
            returnFocus={false}
            sideCar={[Function]}
          >
            <div
              data-focus-guard={true}
              key="guard-first"
              style={
                Object {
                  "height": "0px",
                  "left": "1px",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "fixed",
                  "top": "1px",
                  "width": "1px",
                }
              }
              tabIndex={0}
            />
            <div
              data-focus-guard={true}
              key="guard-nearest"
              style={
                Object {
                  "height": "0px",
                  "left": "1px",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "fixed",
                  "top": "1px",
                  "width": "1px",
                }
              }
              tabIndex={1}
            />
            <SideEffect(FocusWatcher)
              autoFocus={true}
              disabled={false}
              id={Object {}}
              observed={
                <div
                  data-focus-lock-disabled="false"
                >
                  <div
                    class="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                    role="dialog"
                    style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                    tabindex="-1"
                  >
                    <div
                      class="MuiBox-root MuiBox-root-19"
                      id="stepNode"
                    >
                      <h6
                        class="MuiTypography-root MuiTypography-h6"
                      >
                        Each Panel contains a list of the available items and their corresponding states.
                      </h6>
                      <div
                        class="MuiBox-root MuiBox-root-21"
                      >
                        <button
                          class="MuiButtonBase-root MuiIconButton-root"
                          id="tour-back-btn"
                          tabindex="0"
                          type="button"
                        >
                          <span
                            class="MuiIconButton-label"
                          >
                            <svg
                              aria-hidden="true"
                              class="MuiSvgIcon-root makeStyles-navigation-20"
                              focusable="false"
                              viewBox="0 0 24 24"
                            >
                              <path
                                d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                              />
                            </svg>
                          </span>
                          <span
                            class="MuiTouchRipple-root"
                          />
                        </button>
                        <button
                          class="MuiButtonBase-root MuiIconButton-root"
                          id="tour-next-btn"
                          tabindex="0"
                          type="button"
                        >
                          <span
                            class="MuiIconButton-label"
                          >
                            <svg
                              aria-hidden="true"
                              class="MuiSvgIcon-root makeStyles-navigation-20"
                              focusable="false"
                              viewBox="0 0 24 24"
                            >
                              <path
                                d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                              />
                            </svg>
                          </span>
                          <span
                            class="MuiTouchRipple-root"
                          />
                        </button>
                      </div>
                    </div>
                    <span
                      class="sc-EHOje doXVdu"
                      data-tour-elem="badge"
                    >
                      6 of 12
                    </span>
                    <button
                      class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                    >
                      <svg
                        viewBox="0 0 9.1 9.1"
                      >
                        <path
                          d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                          fill="currentColor"
                        />
                      </svg>
                    </button>
                  </div>
                </div>
              }
              onActivation={[Function]}
              onDeactivation={[Function]}
              persistentFocus={false}
              returnFocus={[Function]}
              shards={Array []}
              sideCar={
                Object {
                  "assignMedium": [Function],
                  "assignSyncMedium": [Function],
                  "options": Object {
                    "async": true,
                    "ssr": false,
                  },
                  "read": [Function],
                  "useMedium": [Function],
                }
              }
            >
              <FocusWatcher
                autoFocus={true}
                disabled={false}
                id={Object {}}
                observed={
                  <div
                    data-focus-lock-disabled="false"
                  >
                    <div
                      class="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                      role="dialog"
                      style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                      tabindex="-1"
                    >
                      <div
                        class="MuiBox-root MuiBox-root-19"
                        id="stepNode"
                      >
                        <h6
                          class="MuiTypography-root MuiTypography-h6"
                        >
                          Each Panel contains a list of the available items and their corresponding states.
                        </h6>
                        <div
                          class="MuiBox-root MuiBox-root-21"
                        >
                          <button
                            class="MuiButtonBase-root MuiIconButton-root"
                            id="tour-back-btn"
                            tabindex="0"
                            type="button"
                          >
                            <span
                              class="MuiIconButton-label"
                            >
                              <svg
                                aria-hidden="true"
                                class="MuiSvgIcon-root makeStyles-navigation-20"
                                focusable="false"
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                />
                              </svg>
                            </span>
                            <span
                              class="MuiTouchRipple-root"
                            />
                          </button>
                          <button
                            class="MuiButtonBase-root MuiIconButton-root"
                            id="tour-next-btn"
                            tabindex="0"
                            type="button"
                          >
                            <span
                              class="MuiIconButton-label"
                            >
                              <svg
                                aria-hidden="true"
                                class="MuiSvgIcon-root makeStyles-navigation-20"
                                focusable="false"
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                />
                              </svg>
                            </span>
                            <span
                              class="MuiTouchRipple-root"
                            />
                          </button>
                        </div>
                      </div>
                      <span
                        class="sc-EHOje doXVdu"
                        data-tour-elem="badge"
                      >
                        6 of 12
                      </span>
                      <button
                        class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                      >
                        <svg
                          viewBox="0 0 9.1 9.1"
                        >
                          <path
                            d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                            fill="currentColor"
                          />
                        </svg>
                      </button>
                    </div>
                  </div>
                }
                onActivation={[Function]}
                onDeactivation={[Function]}
                persistentFocus={false}
                returnFocus={[Function]}
                shards={Array []}
                sideCar={
                  Object {
                    "assignMedium": [Function],
                    "assignSyncMedium": [Function],
                    "options": Object {
                      "async": true,
                      "ssr": false,
                    },
                    "read": [Function],
                    "useMedium": [Function],
                  }
                }
              />
            </SideEffect(FocusWatcher)>
            <div
              data-focus-lock-disabled={false}
              onBlur={[Function]}
              onFocus={[Function]}
            >
              <styled.div
                accentColor="#3f51b5"
                className="reactour__helper reactour__helper--is-open"
                current={4}
                defaultStyles={true}
                helperHeight={0}
                helperPosition="center"
                helperWidth={0}
                padding={10}
                role="dialog"
                rounded={5}
                style={
                  Object {
                    "backgroundColor": "#7986cb",
                    "borderRadius": "5px",
                    "color": "#fff",
                  }
                }
                tabIndex={-1}
                targetBottom={393}
                targetHeight={0}
                targetLeft={512}
                targetRight={521}
                targetTop={778}
                targetWidth={0}
                windowHeight={768}
                windowWidth={1024}
              >
                <StyledComponent
                  accentColor="#3f51b5"
                  className="reactour__helper reactour__helper--is-open"
                  current={4}
                  defaultStyles={true}
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-ifAKCX",
                        "isStatic": false,
                        "lastClassName": "jBzNhS",
                        "rules": Array [
                          "
  --reactour-accent: ",
                          [Function],
                          ";
  ",
                          [Function],
                          "
  position: fixed;
  transition: transform 0.3s;
  top: 0;
  left: 0;
  z-index: 1000000;

  transform: ",
                          [Function],
                          ";
",
                        ],
                      },
                      "displayName": "styled.div",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-ifAKCX",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={
                    Object {
                      "current": <div
                        class="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                        role="dialog"
                        style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                        tabindex="-1"
                      >
                        <div
                          class="MuiBox-root MuiBox-root-19"
                          id="stepNode"
                        >
                          <h6
                            class="MuiTypography-root MuiTypography-h6"
                          >
                            Each Panel contains a list of the available items and their corresponding states.
                          </h6>
                          <div
                            class="MuiBox-root MuiBox-root-21"
                          >
                            <button
                              class="MuiButtonBase-root MuiIconButton-root"
                              id="tour-back-btn"
                              tabindex="0"
                              type="button"
                            >
                              <span
                                class="MuiIconButton-label"
                              >
                                <svg
                                  aria-hidden="true"
                                  class="MuiSvgIcon-root makeStyles-navigation-20"
                                  focusable="false"
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                  />
                                </svg>
                              </span>
                              <span
                                class="MuiTouchRipple-root"
                              />
                            </button>
                            <button
                              class="MuiButtonBase-root MuiIconButton-root"
                              id="tour-next-btn"
                              tabindex="0"
                              type="button"
                            >
                              <span
                                class="MuiIconButton-label"
                              >
                                <svg
                                  aria-hidden="true"
                                  class="MuiSvgIcon-root makeStyles-navigation-20"
                                  focusable="false"
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                  />
                                </svg>
                              </span>
                              <span
                                class="MuiTouchRipple-root"
                              />
                            </button>
                          </div>
                        </div>
                        <span
                          class="sc-EHOje doXVdu"
                          data-tour-elem="badge"
                        >
                          6 of 12
                        </span>
                        <button
                          class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                        >
                          <svg
                            viewBox="0 0 9.1 9.1"
                          >
                            <path
                              d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                              fill="currentColor"
                            />
                          </svg>
                        </button>
                      </div>,
                    }
                  }
                  helperHeight={0}
                  helperPosition="center"
                  helperWidth={0}
                  padding={10}
                  role="dialog"
                  rounded={5}
                  style={
                    Object {
                      "backgroundColor": "#7986cb",
                      "borderRadius": "5px",
                      "color": "#fff",
                    }
                  }
                  tabIndex={-1}
                  targetBottom={393}
                  targetHeight={0}
                  targetLeft={512}
                  targetRight={521}
                  targetTop={778}
                  targetWidth={0}
                  windowHeight={768}
                  windowWidth={1024}
                >
                  <div
                    className="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                    role="dialog"
                    style={
                      Object {
                        "backgroundColor": "#7986cb",
                        "borderRadius": "5px",
                        "color": "#fff",
                      }
                    }
                    tabIndex={-1}
                  >
                    <Styled(MuiBox)
                      id="stepNode"
                    >
                      <div
                        className="MuiBox-root MuiBox-root-19"
                        id="stepNode"
                      >
                        <WithStyles(ForwardRef(Typography))
                          variant="h6"
                        >
                          <ForwardRef(Typography)
                            classes={
                              Object {
                                "alignCenter": "MuiTypography-alignCenter",
                                "alignJustify": "MuiTypography-alignJustify",
                                "alignLeft": "MuiTypography-alignLeft",
                                "alignRight": "MuiTypography-alignRight",
                                "body1": "MuiTypography-body1",
                                "body2": "MuiTypography-body2",
                                "button": "MuiTypography-button",
                                "caption": "MuiTypography-caption",
                                "colorError": "MuiTypography-colorError",
                                "colorInherit": "MuiTypography-colorInherit",
                                "colorPrimary": "MuiTypography-colorPrimary",
                                "colorSecondary": "MuiTypography-colorSecondary",
                                "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                "displayBlock": "MuiTypography-displayBlock",
                                "displayInline": "MuiTypography-displayInline",
                                "gutterBottom": "MuiTypography-gutterBottom",
                                "h1": "MuiTypography-h1",
                                "h2": "MuiTypography-h2",
                                "h3": "MuiTypography-h3",
                                "h4": "MuiTypography-h4",
                                "h5": "MuiTypography-h5",
                                "h6": "MuiTypography-h6",
                                "noWrap": "MuiTypography-noWrap",
                                "overline": "MuiTypography-overline",
                                "paragraph": "MuiTypography-paragraph",
                                "root": "MuiTypography-root",
                                "srOnly": "MuiTypography-srOnly",
                                "subtitle1": "MuiTypography-subtitle1",
                                "subtitle2": "MuiTypography-subtitle2",
                              }
                            }
                            variant="h6"
                          >
                            <h6
                              className="MuiTypography-root MuiTypography-h6"
                            >
                              The Omnipanel Button shows the different panel options available in the dashboard. Clicking each item would list different information about it!
                            </h6>
                          </ForwardRef(Typography)>
                        </WithStyles(ForwardRef(Typography))>
                        <Memo()
                          goTo={[Function]}
                          handleNextClick={[Function]}
                          step={5}
                        >
                          <Styled(MuiBox)>
                            <div
                              className="MuiBox-root MuiBox-root-21"
                            >
                              <WithStyles(ForwardRef(IconButton))
                                id="tour-back-btn"
                                onClick={[Function]}
                              >
                                <ForwardRef(IconButton)
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit",
                                      "colorPrimary": "MuiIconButton-colorPrimary",
                                      "colorSecondary": "MuiIconButton-colorSecondary",
                                      "disabled": "Mui-disabled",
                                      "edgeEnd": "MuiIconButton-edgeEnd",
                                      "edgeStart": "MuiIconButton-edgeStart",
                                      "label": "MuiIconButton-label",
                                      "root": "MuiIconButton-root",
                                      "sizeSmall": "MuiIconButton-sizeSmall",
                                    }
                                  }
                                  id="tour-back-btn"
                                  onClick={[Function]}
                                >
                                  <WithStyles(ForwardRef(ButtonBase))
                                    centerRipple={true}
                                    className="MuiIconButton-root"
                                    disabled={false}
                                    focusRipple={true}
                                    id="tour-back-btn"
                                    onClick={[Function]}
                                  >
                                    <ForwardRef(ButtonBase)
                                      centerRipple={true}
                                      className="MuiIconButton-root"
                                      classes={
                                        Object {
                                          "disabled": "Mui-disabled",
                                          "focusVisible": "Mui-focusVisible",
                                          "root": "MuiButtonBase-root",
                                        }
                                      }
                                      disabled={false}
                                      focusRipple={true}
                                      id="tour-back-btn"
                                      onClick={[Function]}
                                    >
                                      <button
                                        className="MuiButtonBase-root MuiIconButton-root"
                                        disabled={false}
                                        id="tour-back-btn"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragLeave={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex={0}
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label"
                                        >
                                          <ForwardRef
                                            className="makeStyles-navigation-20"
                                          >
                                            <WithStyles(ForwardRef(SvgIcon))
                                              className="makeStyles-navigation-20"
                                            >
                                              <ForwardRef(SvgIcon)
                                                className="makeStyles-navigation-20"
                                                classes={
                                                  Object {
                                                    "colorAction": "MuiSvgIcon-colorAction",
                                                    "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                    "colorError": "MuiSvgIcon-colorError",
                                                    "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                    "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                    "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                    "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                    "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                    "root": "MuiSvgIcon-root",
                                                  }
                                                }
                                              >
                                                <svg
                                                  aria-hidden={true}
                                                  className="MuiSvgIcon-root makeStyles-navigation-20"
                                                  focusable="false"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <path
                                                    d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                                  />
                                                </svg>
                                              </ForwardRef(SvgIcon)>
                                            </WithStyles(ForwardRef(SvgIcon))>
                                          </ForwardRef>
                                        </span>
                                        <WithStyles(memo)
                                          center={true}
                                        >
                                          <ForwardRef(TouchRipple)
                                            center={true}
                                            classes={
                                              Object {
                                                "child": "MuiTouchRipple-child",
                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                "ripple": "MuiTouchRipple-ripple",
                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                "root": "MuiTouchRipple-root",
                                              }
                                            }
                                          >
                                            <span
                                              className="MuiTouchRipple-root"
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                component={null}
                                                exit={true}
                                              />
                                            </span>
                                          </ForwardRef(TouchRipple)>
                                        </WithStyles(memo)>
                                      </button>
                                    </ForwardRef(ButtonBase)>
                                  </WithStyles(ForwardRef(ButtonBase))>
                                </ForwardRef(IconButton)>
                              </WithStyles(ForwardRef(IconButton))>
                              <WithStyles(ForwardRef(IconButton))
                                id="tour-next-btn"
                                onClick={[Function]}
                              >
                                <ForwardRef(IconButton)
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit",
                                      "colorPrimary": "MuiIconButton-colorPrimary",
                                      "colorSecondary": "MuiIconButton-colorSecondary",
                                      "disabled": "Mui-disabled",
                                      "edgeEnd": "MuiIconButton-edgeEnd",
                                      "edgeStart": "MuiIconButton-edgeStart",
                                      "label": "MuiIconButton-label",
                                      "root": "MuiIconButton-root",
                                      "sizeSmall": "MuiIconButton-sizeSmall",
                                    }
                                  }
                                  id="tour-next-btn"
                                  onClick={[Function]}
                                >
                                  <WithStyles(ForwardRef(ButtonBase))
                                    centerRipple={true}
                                    className="MuiIconButton-root"
                                    disabled={false}
                                    focusRipple={true}
                                    id="tour-next-btn"
                                    onClick={[Function]}
                                  >
                                    <ForwardRef(ButtonBase)
                                      centerRipple={true}
                                      className="MuiIconButton-root"
                                      classes={
                                        Object {
                                          "disabled": "Mui-disabled",
                                          "focusVisible": "Mui-focusVisible",
                                          "root": "MuiButtonBase-root",
                                        }
                                      }
                                      disabled={false}
                                      focusRipple={true}
                                      id="tour-next-btn"
                                      onClick={[Function]}
                                    >
                                      <button
                                        className="MuiButtonBase-root MuiIconButton-root"
                                        disabled={false}
                                        id="tour-next-btn"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragLeave={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex={0}
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label"
                                        >
                                          <ForwardRef
                                            className="makeStyles-navigation-20"
                                          >
                                            <WithStyles(ForwardRef(SvgIcon))
                                              className="makeStyles-navigation-20"
                                            >
                                              <ForwardRef(SvgIcon)
                                                className="makeStyles-navigation-20"
                                                classes={
                                                  Object {
                                                    "colorAction": "MuiSvgIcon-colorAction",
                                                    "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                    "colorError": "MuiSvgIcon-colorError",
                                                    "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                    "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                    "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                    "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                    "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                    "root": "MuiSvgIcon-root",
                                                  }
                                                }
                                              >
                                                <svg
                                                  aria-hidden={true}
                                                  className="MuiSvgIcon-root makeStyles-navigation-20"
                                                  focusable="false"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <path
                                                    d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                                  />
                                                </svg>
                                              </ForwardRef(SvgIcon)>
                                            </WithStyles(ForwardRef(SvgIcon))>
                                          </ForwardRef>
                                        </span>
                                        <WithStyles(memo)
                                          center={true}
                                        >
                                          <ForwardRef(TouchRipple)
                                            center={true}
                                            classes={
                                              Object {
                                                "child": "MuiTouchRipple-child",
                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                "ripple": "MuiTouchRipple-ripple",
                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                "root": "MuiTouchRipple-root",
                                              }
                                            }
                                          >
                                            <span
                                              className="MuiTouchRipple-root"
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                component={null}
                                                exit={true}
                                              />
                                            </span>
                                          </ForwardRef(TouchRipple)>
                                        </WithStyles(memo)>
                                      </button>
                                    </ForwardRef(ButtonBase)>
                                  </WithStyles(ForwardRef(ButtonBase))>
                                </ForwardRef(IconButton)>
                              </WithStyles(ForwardRef(IconButton))>
                            </div>
                          </Styled(MuiBox)>
                        </Memo()>
                      </div>
                    </Styled(MuiBox)>
                    <styled.span
                      accentColor="#3f51b5"
                      data-tour-elem="badge"
                    >
                      <StyledComponent
                        accentColor="#3f51b5"
                        data-tour-elem="badge"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-EHOje",
                              "isStatic": false,
                              "lastClassName": "doXVdu",
                              "rules": Array [
                                "
  position: absolute;
  font-family: monospace;
  background: var(--reactour-accent);
  background: ",
                                [Function],
                                ";
  height: 1.875em;
  line-height: 2;
  padding-left: 0.8125em;
  padding-right: 0.8125em;
  font-size: 1em;
  border-radius: 1.625em;
  color: white;
  text-align: center;
  box-shadow: 0 0.25em 0.5em rgba(0, 0, 0, 0.3);
  top: -0.8125em;
  left: -0.8125em;
",
                              ],
                            },
                            "displayName": "styled.span",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-EHOje",
                            "target": "span",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <span
                          className="sc-EHOje doXVdu"
                          data-tour-elem="badge"
                        >
                          5 of 12
                        </span>
                      </StyledComponent>
                    </styled.span>
                    <Styled(Close)
                      className="reactour__close"
                      onClick={[Function]}
                    >
                      <StyledComponent
                        className="reactour__close"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-bxivhb",
                              "isStatic": false,
                              "lastClassName": "eTpeTG",
                              "rules": Array [
                                "
  position: absolute;
  top: 22px;
  right: 22px;
  width: 9px;
  height: 9px;
  color: #5e5e5e;
  &:hover {
    color: #000;
  }
",
                              ],
                            },
                            "displayName": "Styled(Close)",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-bxivhb",
                            "target": [Function],
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        onClick={[Function]}
                      >
                        <Close
                          className="sc-bxivhb eTpeTG reactour__close"
                          onClick={[Function]}
                        >
                          <styled.button
                            className="sc-bxivhb eTpeTG reactour__close"
                            onClick={[Function]}
                          >
                            <StyledComponent
                              className="sc-bxivhb eTpeTG reactour__close"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-bdVaJa",
                                    "isStatic": false,
                                    "lastClassName": "cYQqRL",
                                    "rules": Array [
                                      "
  display: block;
  padding: 0;
  border: 0;
  background: none;
  font-size: 0;
  cursor: ",
                                      [Function],
                                      ";
",
                                    ],
                                  },
                                  "displayName": "styled.button",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-bdVaJa",
                                  "target": "button",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              onClick={[Function]}
                            >
                              <button
                                className="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                                onClick={[Function]}
                              >
                                <svg
                                  viewBox="0 0 9.1 9.1"
                                >
                                  <path
                                    d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                                    fill="currentColor"
                                  />
                                </svg>
                              </button>
                            </StyledComponent>
                          </styled.button>
                        </Close>
                      </StyledComponent>
                    </Styled(Close)>
                  </div>
                </StyledComponent>
              </styled.div>
            </div>
            <div
              data-focus-guard={true}
              style={
                Object {
                  "height": "0px",
                  "left": "1px",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "fixed",
                  "top": "1px",
                  "width": "1px",
                }
              }
              tabIndex={0}
            />
          </ForwardRef>
        </ForwardRef>
      </Portal>
    </Portal>
  </Tour>
</Memo()>
`;

exports[`Dashboard Tour renders omnipanel button step (5/12) 1`] = `
<Memo()
  tourProps={
    Object {
      "OmniPanelViewIndex": Object {
        "0": "MainMenu",
        "1": "Doors",
        "2": "Lifts",
        "3": "Robots",
        "4": "Dispensers",
        "5": "Commands",
        "6": "Negotiations",
        "Commands": 5,
        "Dispensers": 4,
        "Doors": 1,
        "Lifts": 2,
        "MainMenu": 0,
        "Negotiations": 6,
        "Robots": 3,
      },
      "doorSpotlight": Object {
        "value": "main_door",
      },
      "setDoorSpotlight": [MockFunction],
      "setTourSettingsAndOmniPanel": [MockFunction] {
        "calls": Array [
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
      "setTourShowOmniPanel": [MockFunction],
      "setTourState": [MockFunction],
      "tourState": true,
    }
  }
>
  <Tour
    accentColor="#3f51b5"
    badgeContent={[Function]}
    closeWithMask={false}
    disableFocusLock={false}
    disableInteraction={false}
    disableKeyboardNavigation={
      Array [
        "right",
        "left",
      ]
    }
    isOpen={true}
    maskSpace={10}
    onRequestClose={[Function]}
    rounded={5}
    scrollDuration={1}
    showButtons={false}
    showCloseButton={true}
    showNavigation={false}
    showNavigationNumber={false}
    showNumber={true}
    startAt={0}
    steps={
      Array [
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "[class=\\"leaflet-control-zoom leaflet-bar leaflet-control\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "[class= \\"leaflet-control-layers leaflet-control\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "[class=\\"leaflet-image-layer leaflet-zoom-animated\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[id=\\"toggle-omnipanel-btn\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-component=\\"MainMenu\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-item=\\"Doors\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-name=\\"main_door\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-item= \\"Commands\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-component=\\"LoopForm\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[id=\\"show-settings-btn\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": ".MuiDrawer-paper",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
      ]
    }
    updateDelay={1}
  >
    <Portal>
      <Portal
        containerInfo={
          <div
            id="___reactour"
          >
            <div
              class="sc-dnqmqq kWwJhA"
            >
              <svg
                height="768"
                width="1024"
                xmlns="http://www.w3.org/2000/svg"
              >
                <defs>
                  <mask
                    id="mask-main"
                  >
                    <rect
                      fill="white"
                      height="768"
                      width="1024"
                      x="0"
                      y="0"
                    />
                    <rect
                      fill="black"
                      height="20"
                      width="20"
                      x="502"
                      y="768"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="501"
                      y="767"
                    />
                    <circle
                      cx="507"
                      cy="773"
                      fill="black"
                      r="5"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="518"
                      y="767"
                    />
                    <circle
                      cx="517"
                      cy="773"
                      fill="black"
                      r="5"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="501"
                      y="784"
                    />
                    <circle
                      cx="507"
                      cy="783"
                      fill="black"
                      r="5"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="518"
                      y="784"
                    />
                    <circle
                      cx="517"
                      cy="783"
                      fill="black "
                      r="5"
                    />
                  </mask>
                  <clippath
                    id="clip-path"
                  >
                    <rect
                      height="768"
                      width="1024"
                      x="0"
                      y="0"
                    />
                    <rect
                      height="20"
                      width="502"
                      x="0"
                      y="768"
                    />
                    <rect
                      height="20"
                      width="522"
                      x="522"
                      y="768"
                    />
                    <rect
                      height="0"
                      width="1024"
                      x="0"
                      y="788"
                    />
                  </clippath>
                </defs>
                <rect
                  fill="currentColor"
                  height="768"
                  mask="url(#mask-main)"
                  width="1024"
                  x="0"
                  y="0"
                />
                <rect
                  clip-path="url(#clip-path)"
                  fill="currentColor"
                  height="768"
                  pointer-events="auto"
                  width="1024"
                  x="0"
                  y="0"
                />
                <rect
                  class="reactour__mask--disable-interaction undefined"
                  display="none"
                  fill="transparent"
                  height="20"
                  pointer-events="auto"
                  width="20"
                  x="502"
                  y="768"
                />
              </svg>
            </div>
            <div
              data-focus-guard="true"
              style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
              tabindex="0"
            />
            <div
              data-focus-guard="true"
              style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
              tabindex="1"
            />
            <div
              data-focus-lock-disabled="false"
            >
              <div
                class="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                role="dialog"
                style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                tabindex="-1"
              >
                <div
                  class="MuiBox-root MuiBox-root-16"
                  id="stepNode"
                >
                  <h6
                    class="MuiTypography-root MuiTypography-h6"
                  >
                    The Omnipanel Button shows the different panel options available in the dashboard. Clicking each item would list different information about it!
                  </h6>
                  <div
                    class="MuiBox-root MuiBox-root-18"
                  >
                    <button
                      class="MuiButtonBase-root MuiIconButton-root"
                      id="tour-back-btn"
                      tabindex="0"
                      type="button"
                    >
                      <span
                        class="MuiIconButton-label"
                      >
                        <svg
                          aria-hidden="true"
                          class="MuiSvgIcon-root makeStyles-navigation-17"
                          focusable="false"
                          viewBox="0 0 24 24"
                        >
                          <path
                            d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                          />
                        </svg>
                      </span>
                      <span
                        class="MuiTouchRipple-root"
                      />
                    </button>
                    <button
                      class="MuiButtonBase-root MuiIconButton-root"
                      id="tour-next-btn"
                      tabindex="0"
                      type="button"
                    >
                      <span
                        class="MuiIconButton-label"
                      >
                        <svg
                          aria-hidden="true"
                          class="MuiSvgIcon-root makeStyles-navigation-17"
                          focusable="false"
                          viewBox="0 0 24 24"
                        >
                          <path
                            d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                          />
                        </svg>
                      </span>
                      <span
                        class="MuiTouchRipple-root"
                      />
                    </button>
                  </div>
                </div>
                <span
                  class="sc-EHOje doXVdu"
                  data-tour-elem="badge"
                >
                  5 of 12
                </span>
                <button
                  class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                >
                  <svg
                    viewBox="0 0 9.1 9.1"
                  >
                    <path
                      d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                      fill="currentColor"
                    />
                  </svg>
                </button>
              </div>
            </div>
            <div
              data-focus-guard="true"
              style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
              tabindex="0"
            />
          </div>
        }
      >
        <GlobalStyleComponent />
        <ReactourResizeObserver
          refresh={[Function]}
          step={
            Object {
              "action": [Function],
              "content": [Function],
              "selector": "[class=\\"leaflet-image-layer leaflet-zoom-animated\\"]",
              "style": Object {
                "backgroundColor": "#7986cb",
                "borderRadius": "5px",
                "color": "#fff",
              },
            }
          }
        />
        <ReactourMutationObserver
          refresh={[Function]}
          step={
            Object {
              "action": [Function],
              "content": [Function],
              "selector": "[class=\\"leaflet-image-layer leaflet-zoom-animated\\"]",
              "style": Object {
                "backgroundColor": "#7986cb",
                "borderRadius": "5px",
                "color": "#fff",
              },
            }
          }
        />
        <SvgMask
          disableInteraction={false}
          disableInteractionClassName="reactour__mask--disable-interaction undefined"
          forwardRef={[Function]}
          onClick={[Function]}
          padding={10}
          rounded={5}
          targetHeight={0}
          targetLeft={512}
          targetTop={778}
          targetWidth={0}
          windowHeight={768}
          windowWidth={1024}
        >
          <styled.div
            onClick={[Function]}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-dnqmqq",
                    "isStatic": false,
                    "lastClassName": "kWwJhA",
                    "rules": Array [
                      "
  opacity: ",
                      [Function],
                      ";
  color: ",
                      [Function],
                      ";
  width: 100%;
  left: 0;
  top: 0;
  height: 100%;
  position: fixed;
  z-index: 99999;
  pointer-events: none;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-dnqmqq",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
            >
              <div
                className="sc-dnqmqq kWwJhA"
                onClick={[Function]}
              >
                <svg
                  height={768}
                  width={1024}
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <defs>
                    <mask
                      id="mask-main"
                    >
                      <rect
                        fill="white"
                        height={768}
                        width={1024}
                        x={0}
                        y={0}
                      />
                      <rect
                        fill="black"
                        height={20}
                        width={20}
                        x={502}
                        y={768}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={501}
                        y={767}
                      />
                      <circle
                        cx={507}
                        cy={773}
                        fill="black"
                        r={5}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={518}
                        y={767}
                      />
                      <circle
                        cx={517}
                        cy={773}
                        fill="black"
                        r={5}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={501}
                        y={784}
                      />
                      <circle
                        cx={507}
                        cy={783}
                        fill="black"
                        r={5}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={518}
                        y={784}
                      />
                      <circle
                        cx={517}
                        cy={783}
                        fill="black "
                        r={5}
                      />
                    </mask>
                    <clipPath
                      id="clip-path"
                    >
                      <rect
                        height={768}
                        width={1024}
                        x={0}
                        y={0}
                      />
                      <rect
                        height={20}
                        width={502}
                        x={0}
                        y={768}
                      />
                      <rect
                        height={20}
                        width={522}
                        x={522}
                        y={768}
                      />
                      <rect
                        height={0}
                        width={1024}
                        x={0}
                        y={788}
                      />
                    </clipPath>
                  </defs>
                  <rect
                    fill="currentColor"
                    height={768}
                    mask="url(#mask-main)"
                    width={1024}
                    x={0}
                    y={0}
                  />
                  <rect
                    clipPath="url(#clip-path)"
                    fill="currentColor"
                    height={768}
                    pointerEvents="auto"
                    width={1024}
                    x={0}
                    y={0}
                  />
                  <rect
                    className="reactour__mask--disable-interaction undefined"
                    display="none"
                    fill="transparent"
                    height={20}
                    pointerEvents="auto"
                    width={20}
                    x={502}
                    y={768}
                  />
                </svg>
              </div>
            </StyledComponent>
          </styled.div>
        </SvgMask>
        <ForwardRef
          disabled={false}
        >
          <ForwardRef
            as="div"
            autoFocus={true}
            disabled={false}
            lockProps={Object {}}
            noFocusGuards={false}
            persistentFocus={false}
            returnFocus={false}
            sideCar={[Function]}
          >
            <div
              data-focus-guard={true}
              key="guard-first"
              style={
                Object {
                  "height": "0px",
                  "left": "1px",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "fixed",
                  "top": "1px",
                  "width": "1px",
                }
              }
              tabIndex={0}
            />
            <div
              data-focus-guard={true}
              key="guard-nearest"
              style={
                Object {
                  "height": "0px",
                  "left": "1px",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "fixed",
                  "top": "1px",
                  "width": "1px",
                }
              }
              tabIndex={1}
            />
            <SideEffect(FocusWatcher)
              autoFocus={true}
              disabled={false}
              id={Object {}}
              observed={
                <div
                  data-focus-lock-disabled="false"
                >
                  <div
                    class="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                    role="dialog"
                    style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                    tabindex="-1"
                  >
                    <div
                      class="MuiBox-root MuiBox-root-16"
                      id="stepNode"
                    >
                      <h6
                        class="MuiTypography-root MuiTypography-h6"
                      >
                        The Omnipanel Button shows the different panel options available in the dashboard. Clicking each item would list different information about it!
                      </h6>
                      <div
                        class="MuiBox-root MuiBox-root-18"
                      >
                        <button
                          class="MuiButtonBase-root MuiIconButton-root"
                          id="tour-back-btn"
                          tabindex="0"
                          type="button"
                        >
                          <span
                            class="MuiIconButton-label"
                          >
                            <svg
                              aria-hidden="true"
                              class="MuiSvgIcon-root makeStyles-navigation-17"
                              focusable="false"
                              viewBox="0 0 24 24"
                            >
                              <path
                                d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                              />
                            </svg>
                          </span>
                          <span
                            class="MuiTouchRipple-root"
                          />
                        </button>
                        <button
                          class="MuiButtonBase-root MuiIconButton-root"
                          id="tour-next-btn"
                          tabindex="0"
                          type="button"
                        >
                          <span
                            class="MuiIconButton-label"
                          >
                            <svg
                              aria-hidden="true"
                              class="MuiSvgIcon-root makeStyles-navigation-17"
                              focusable="false"
                              viewBox="0 0 24 24"
                            >
                              <path
                                d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                              />
                            </svg>
                          </span>
                          <span
                            class="MuiTouchRipple-root"
                          />
                        </button>
                      </div>
                    </div>
                    <span
                      class="sc-EHOje doXVdu"
                      data-tour-elem="badge"
                    >
                      5 of 12
                    </span>
                    <button
                      class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                    >
                      <svg
                        viewBox="0 0 9.1 9.1"
                      >
                        <path
                          d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                          fill="currentColor"
                        />
                      </svg>
                    </button>
                  </div>
                </div>
              }
              onActivation={[Function]}
              onDeactivation={[Function]}
              persistentFocus={false}
              returnFocus={[Function]}
              shards={Array []}
              sideCar={
                Object {
                  "assignMedium": [Function],
                  "assignSyncMedium": [Function],
                  "options": Object {
                    "async": true,
                    "ssr": false,
                  },
                  "read": [Function],
                  "useMedium": [Function],
                }
              }
            >
              <FocusWatcher
                autoFocus={true}
                disabled={false}
                id={Object {}}
                observed={
                  <div
                    data-focus-lock-disabled="false"
                  >
                    <div
                      class="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                      role="dialog"
                      style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                      tabindex="-1"
                    >
                      <div
                        class="MuiBox-root MuiBox-root-16"
                        id="stepNode"
                      >
                        <h6
                          class="MuiTypography-root MuiTypography-h6"
                        >
                          The Omnipanel Button shows the different panel options available in the dashboard. Clicking each item would list different information about it!
                        </h6>
                        <div
                          class="MuiBox-root MuiBox-root-18"
                        >
                          <button
                            class="MuiButtonBase-root MuiIconButton-root"
                            id="tour-back-btn"
                            tabindex="0"
                            type="button"
                          >
                            <span
                              class="MuiIconButton-label"
                            >
                              <svg
                                aria-hidden="true"
                                class="MuiSvgIcon-root makeStyles-navigation-17"
                                focusable="false"
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                />
                              </svg>
                            </span>
                            <span
                              class="MuiTouchRipple-root"
                            />
                          </button>
                          <button
                            class="MuiButtonBase-root MuiIconButton-root"
                            id="tour-next-btn"
                            tabindex="0"
                            type="button"
                          >
                            <span
                              class="MuiIconButton-label"
                            >
                              <svg
                                aria-hidden="true"
                                class="MuiSvgIcon-root makeStyles-navigation-17"
                                focusable="false"
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                />
                              </svg>
                            </span>
                            <span
                              class="MuiTouchRipple-root"
                            />
                          </button>
                        </div>
                      </div>
                      <span
                        class="sc-EHOje doXVdu"
                        data-tour-elem="badge"
                      >
                        5 of 12
                      </span>
                      <button
                        class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                      >
                        <svg
                          viewBox="0 0 9.1 9.1"
                        >
                          <path
                            d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                            fill="currentColor"
                          />
                        </svg>
                      </button>
                    </div>
                  </div>
                }
                onActivation={[Function]}
                onDeactivation={[Function]}
                persistentFocus={false}
                returnFocus={[Function]}
                shards={Array []}
                sideCar={
                  Object {
                    "assignMedium": [Function],
                    "assignSyncMedium": [Function],
                    "options": Object {
                      "async": true,
                      "ssr": false,
                    },
                    "read": [Function],
                    "useMedium": [Function],
                  }
                }
              />
            </SideEffect(FocusWatcher)>
            <div
              data-focus-lock-disabled={false}
              onBlur={[Function]}
              onFocus={[Function]}
            >
              <styled.div
                accentColor="#3f51b5"
                className="reactour__helper reactour__helper--is-open"
                current={3}
                defaultStyles={true}
                helperHeight={0}
                helperPosition="center"
                helperWidth={0}
                padding={10}
                role="dialog"
                rounded={5}
                style={
                  Object {
                    "backgroundColor": "#7986cb",
                    "borderRadius": "5px",
                    "color": "#fff",
                  }
                }
                tabIndex={-1}
                targetBottom={393}
                targetHeight={0}
                targetLeft={512}
                targetRight={521}
                targetTop={778}
                targetWidth={0}
                windowHeight={768}
                windowWidth={1024}
              >
                <StyledComponent
                  accentColor="#3f51b5"
                  className="reactour__helper reactour__helper--is-open"
                  current={3}
                  defaultStyles={true}
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-ifAKCX",
                        "isStatic": false,
                        "lastClassName": "jBzNhS",
                        "rules": Array [
                          "
  --reactour-accent: ",
                          [Function],
                          ";
  ",
                          [Function],
                          "
  position: fixed;
  transition: transform 0.3s;
  top: 0;
  left: 0;
  z-index: 1000000;

  transform: ",
                          [Function],
                          ";
",
                        ],
                      },
                      "displayName": "styled.div",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-ifAKCX",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={
                    Object {
                      "current": <div
                        class="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                        role="dialog"
                        style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                        tabindex="-1"
                      >
                        <div
                          class="MuiBox-root MuiBox-root-16"
                          id="stepNode"
                        >
                          <h6
                            class="MuiTypography-root MuiTypography-h6"
                          >
                            The Omnipanel Button shows the different panel options available in the dashboard. Clicking each item would list different information about it!
                          </h6>
                          <div
                            class="MuiBox-root MuiBox-root-18"
                          >
                            <button
                              class="MuiButtonBase-root MuiIconButton-root"
                              id="tour-back-btn"
                              tabindex="0"
                              type="button"
                            >
                              <span
                                class="MuiIconButton-label"
                              >
                                <svg
                                  aria-hidden="true"
                                  class="MuiSvgIcon-root makeStyles-navigation-17"
                                  focusable="false"
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                  />
                                </svg>
                              </span>
                              <span
                                class="MuiTouchRipple-root"
                              />
                            </button>
                            <button
                              class="MuiButtonBase-root MuiIconButton-root"
                              id="tour-next-btn"
                              tabindex="0"
                              type="button"
                            >
                              <span
                                class="MuiIconButton-label"
                              >
                                <svg
                                  aria-hidden="true"
                                  class="MuiSvgIcon-root makeStyles-navigation-17"
                                  focusable="false"
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                  />
                                </svg>
                              </span>
                              <span
                                class="MuiTouchRipple-root"
                              />
                            </button>
                          </div>
                        </div>
                        <span
                          class="sc-EHOje doXVdu"
                          data-tour-elem="badge"
                        >
                          5 of 12
                        </span>
                        <button
                          class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                        >
                          <svg
                            viewBox="0 0 9.1 9.1"
                          >
                            <path
                              d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                              fill="currentColor"
                            />
                          </svg>
                        </button>
                      </div>,
                    }
                  }
                  helperHeight={0}
                  helperPosition="center"
                  helperWidth={0}
                  padding={10}
                  role="dialog"
                  rounded={5}
                  style={
                    Object {
                      "backgroundColor": "#7986cb",
                      "borderRadius": "5px",
                      "color": "#fff",
                    }
                  }
                  tabIndex={-1}
                  targetBottom={393}
                  targetHeight={0}
                  targetLeft={512}
                  targetRight={521}
                  targetTop={778}
                  targetWidth={0}
                  windowHeight={768}
                  windowWidth={1024}
                >
                  <div
                    className="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                    role="dialog"
                    style={
                      Object {
                        "backgroundColor": "#7986cb",
                        "borderRadius": "5px",
                        "color": "#fff",
                      }
                    }
                    tabIndex={-1}
                  >
                    <Styled(MuiBox)
                      id="stepNode"
                    >
                      <div
                        className="MuiBox-root MuiBox-root-16"
                        id="stepNode"
                      >
                        <WithStyles(ForwardRef(Typography))
                          variant="h6"
                        >
                          <ForwardRef(Typography)
                            classes={
                              Object {
                                "alignCenter": "MuiTypography-alignCenter",
                                "alignJustify": "MuiTypography-alignJustify",
                                "alignLeft": "MuiTypography-alignLeft",
                                "alignRight": "MuiTypography-alignRight",
                                "body1": "MuiTypography-body1",
                                "body2": "MuiTypography-body2",
                                "button": "MuiTypography-button",
                                "caption": "MuiTypography-caption",
                                "colorError": "MuiTypography-colorError",
                                "colorInherit": "MuiTypography-colorInherit",
                                "colorPrimary": "MuiTypography-colorPrimary",
                                "colorSecondary": "MuiTypography-colorSecondary",
                                "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                "displayBlock": "MuiTypography-displayBlock",
                                "displayInline": "MuiTypography-displayInline",
                                "gutterBottom": "MuiTypography-gutterBottom",
                                "h1": "MuiTypography-h1",
                                "h2": "MuiTypography-h2",
                                "h3": "MuiTypography-h3",
                                "h4": "MuiTypography-h4",
                                "h5": "MuiTypography-h5",
                                "h6": "MuiTypography-h6",
                                "noWrap": "MuiTypography-noWrap",
                                "overline": "MuiTypography-overline",
                                "paragraph": "MuiTypography-paragraph",
                                "root": "MuiTypography-root",
                                "srOnly": "MuiTypography-srOnly",
                                "subtitle1": "MuiTypography-subtitle1",
                                "subtitle2": "MuiTypography-subtitle2",
                              }
                            }
                            variant="h6"
                          >
                            <h6
                              className="MuiTypography-root MuiTypography-h6"
                            >
                              Clicking individual components like doors, robots, lifts on the map will open up its corresponding information tab in the omnipanel.
                            </h6>
                          </ForwardRef(Typography)>
                        </WithStyles(ForwardRef(Typography))>
                        <Memo()
                          goTo={[Function]}
                          step={4}
                        >
                          <Styled(MuiBox)>
                            <div
                              className="MuiBox-root MuiBox-root-18"
                            >
                              <WithStyles(ForwardRef(IconButton))
                                id="tour-back-btn"
                                onClick={[Function]}
                              >
                                <ForwardRef(IconButton)
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit",
                                      "colorPrimary": "MuiIconButton-colorPrimary",
                                      "colorSecondary": "MuiIconButton-colorSecondary",
                                      "disabled": "Mui-disabled",
                                      "edgeEnd": "MuiIconButton-edgeEnd",
                                      "edgeStart": "MuiIconButton-edgeStart",
                                      "label": "MuiIconButton-label",
                                      "root": "MuiIconButton-root",
                                      "sizeSmall": "MuiIconButton-sizeSmall",
                                    }
                                  }
                                  id="tour-back-btn"
                                  onClick={[Function]}
                                >
                                  <WithStyles(ForwardRef(ButtonBase))
                                    centerRipple={true}
                                    className="MuiIconButton-root"
                                    disabled={false}
                                    focusRipple={true}
                                    id="tour-back-btn"
                                    onClick={[Function]}
                                  >
                                    <ForwardRef(ButtonBase)
                                      centerRipple={true}
                                      className="MuiIconButton-root"
                                      classes={
                                        Object {
                                          "disabled": "Mui-disabled",
                                          "focusVisible": "Mui-focusVisible",
                                          "root": "MuiButtonBase-root",
                                        }
                                      }
                                      disabled={false}
                                      focusRipple={true}
                                      id="tour-back-btn"
                                      onClick={[Function]}
                                    >
                                      <button
                                        className="MuiButtonBase-root MuiIconButton-root"
                                        disabled={false}
                                        id="tour-back-btn"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragLeave={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex={0}
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label"
                                        >
                                          <ForwardRef
                                            className="makeStyles-navigation-17"
                                          >
                                            <WithStyles(ForwardRef(SvgIcon))
                                              className="makeStyles-navigation-17"
                                            >
                                              <ForwardRef(SvgIcon)
                                                className="makeStyles-navigation-17"
                                                classes={
                                                  Object {
                                                    "colorAction": "MuiSvgIcon-colorAction",
                                                    "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                    "colorError": "MuiSvgIcon-colorError",
                                                    "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                    "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                    "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                    "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                    "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                    "root": "MuiSvgIcon-root",
                                                  }
                                                }
                                              >
                                                <svg
                                                  aria-hidden={true}
                                                  className="MuiSvgIcon-root makeStyles-navigation-17"
                                                  focusable="false"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <path
                                                    d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                                  />
                                                </svg>
                                              </ForwardRef(SvgIcon)>
                                            </WithStyles(ForwardRef(SvgIcon))>
                                          </ForwardRef>
                                        </span>
                                        <WithStyles(memo)
                                          center={true}
                                        >
                                          <ForwardRef(TouchRipple)
                                            center={true}
                                            classes={
                                              Object {
                                                "child": "MuiTouchRipple-child",
                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                "ripple": "MuiTouchRipple-ripple",
                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                "root": "MuiTouchRipple-root",
                                              }
                                            }
                                          >
                                            <span
                                              className="MuiTouchRipple-root"
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                component={null}
                                                exit={true}
                                              />
                                            </span>
                                          </ForwardRef(TouchRipple)>
                                        </WithStyles(memo)>
                                      </button>
                                    </ForwardRef(ButtonBase)>
                                  </WithStyles(ForwardRef(ButtonBase))>
                                </ForwardRef(IconButton)>
                              </WithStyles(ForwardRef(IconButton))>
                              <WithStyles(ForwardRef(IconButton))
                                id="tour-next-btn"
                                onClick={[Function]}
                              >
                                <ForwardRef(IconButton)
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit",
                                      "colorPrimary": "MuiIconButton-colorPrimary",
                                      "colorSecondary": "MuiIconButton-colorSecondary",
                                      "disabled": "Mui-disabled",
                                      "edgeEnd": "MuiIconButton-edgeEnd",
                                      "edgeStart": "MuiIconButton-edgeStart",
                                      "label": "MuiIconButton-label",
                                      "root": "MuiIconButton-root",
                                      "sizeSmall": "MuiIconButton-sizeSmall",
                                    }
                                  }
                                  id="tour-next-btn"
                                  onClick={[Function]}
                                >
                                  <WithStyles(ForwardRef(ButtonBase))
                                    centerRipple={true}
                                    className="MuiIconButton-root"
                                    disabled={false}
                                    focusRipple={true}
                                    id="tour-next-btn"
                                    onClick={[Function]}
                                  >
                                    <ForwardRef(ButtonBase)
                                      centerRipple={true}
                                      className="MuiIconButton-root"
                                      classes={
                                        Object {
                                          "disabled": "Mui-disabled",
                                          "focusVisible": "Mui-focusVisible",
                                          "root": "MuiButtonBase-root",
                                        }
                                      }
                                      disabled={false}
                                      focusRipple={true}
                                      id="tour-next-btn"
                                      onClick={[Function]}
                                    >
                                      <button
                                        className="MuiButtonBase-root MuiIconButton-root"
                                        disabled={false}
                                        id="tour-next-btn"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragLeave={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex={0}
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label"
                                        >
                                          <ForwardRef
                                            className="makeStyles-navigation-17"
                                          >
                                            <WithStyles(ForwardRef(SvgIcon))
                                              className="makeStyles-navigation-17"
                                            >
                                              <ForwardRef(SvgIcon)
                                                className="makeStyles-navigation-17"
                                                classes={
                                                  Object {
                                                    "colorAction": "MuiSvgIcon-colorAction",
                                                    "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                    "colorError": "MuiSvgIcon-colorError",
                                                    "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                    "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                    "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                    "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                    "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                    "root": "MuiSvgIcon-root",
                                                  }
                                                }
                                              >
                                                <svg
                                                  aria-hidden={true}
                                                  className="MuiSvgIcon-root makeStyles-navigation-17"
                                                  focusable="false"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <path
                                                    d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                                  />
                                                </svg>
                                              </ForwardRef(SvgIcon)>
                                            </WithStyles(ForwardRef(SvgIcon))>
                                          </ForwardRef>
                                        </span>
                                        <WithStyles(memo)
                                          center={true}
                                        >
                                          <ForwardRef(TouchRipple)
                                            center={true}
                                            classes={
                                              Object {
                                                "child": "MuiTouchRipple-child",
                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                "ripple": "MuiTouchRipple-ripple",
                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                "root": "MuiTouchRipple-root",
                                              }
                                            }
                                          >
                                            <span
                                              className="MuiTouchRipple-root"
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                component={null}
                                                exit={true}
                                              />
                                            </span>
                                          </ForwardRef(TouchRipple)>
                                        </WithStyles(memo)>
                                      </button>
                                    </ForwardRef(ButtonBase)>
                                  </WithStyles(ForwardRef(ButtonBase))>
                                </ForwardRef(IconButton)>
                              </WithStyles(ForwardRef(IconButton))>
                            </div>
                          </Styled(MuiBox)>
                        </Memo()>
                      </div>
                    </Styled(MuiBox)>
                    <styled.span
                      accentColor="#3f51b5"
                      data-tour-elem="badge"
                    >
                      <StyledComponent
                        accentColor="#3f51b5"
                        data-tour-elem="badge"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-EHOje",
                              "isStatic": false,
                              "lastClassName": "doXVdu",
                              "rules": Array [
                                "
  position: absolute;
  font-family: monospace;
  background: var(--reactour-accent);
  background: ",
                                [Function],
                                ";
  height: 1.875em;
  line-height: 2;
  padding-left: 0.8125em;
  padding-right: 0.8125em;
  font-size: 1em;
  border-radius: 1.625em;
  color: white;
  text-align: center;
  box-shadow: 0 0.25em 0.5em rgba(0, 0, 0, 0.3);
  top: -0.8125em;
  left: -0.8125em;
",
                              ],
                            },
                            "displayName": "styled.span",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-EHOje",
                            "target": "span",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <span
                          className="sc-EHOje doXVdu"
                          data-tour-elem="badge"
                        >
                          4 of 12
                        </span>
                      </StyledComponent>
                    </styled.span>
                    <Styled(Close)
                      className="reactour__close"
                      onClick={[Function]}
                    >
                      <StyledComponent
                        className="reactour__close"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-bxivhb",
                              "isStatic": false,
                              "lastClassName": "eTpeTG",
                              "rules": Array [
                                "
  position: absolute;
  top: 22px;
  right: 22px;
  width: 9px;
  height: 9px;
  color: #5e5e5e;
  &:hover {
    color: #000;
  }
",
                              ],
                            },
                            "displayName": "Styled(Close)",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-bxivhb",
                            "target": [Function],
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        onClick={[Function]}
                      >
                        <Close
                          className="sc-bxivhb eTpeTG reactour__close"
                          onClick={[Function]}
                        >
                          <styled.button
                            className="sc-bxivhb eTpeTG reactour__close"
                            onClick={[Function]}
                          >
                            <StyledComponent
                              className="sc-bxivhb eTpeTG reactour__close"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-bdVaJa",
                                    "isStatic": false,
                                    "lastClassName": "cYQqRL",
                                    "rules": Array [
                                      "
  display: block;
  padding: 0;
  border: 0;
  background: none;
  font-size: 0;
  cursor: ",
                                      [Function],
                                      ";
",
                                    ],
                                  },
                                  "displayName": "styled.button",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-bdVaJa",
                                  "target": "button",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              onClick={[Function]}
                            >
                              <button
                                className="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                                onClick={[Function]}
                              >
                                <svg
                                  viewBox="0 0 9.1 9.1"
                                >
                                  <path
                                    d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                                    fill="currentColor"
                                  />
                                </svg>
                              </button>
                            </StyledComponent>
                          </styled.button>
                        </Close>
                      </StyledComponent>
                    </Styled(Close)>
                  </div>
                </StyledComponent>
              </styled.div>
            </div>
            <div
              data-focus-guard={true}
              style={
                Object {
                  "height": "0px",
                  "left": "1px",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "fixed",
                  "top": "1px",
                  "width": "1px",
                }
              }
              tabIndex={0}
            />
          </ForwardRef>
        </ForwardRef>
      </Portal>
    </Portal>
  </Tour>
</Memo()>
`;

exports[`Dashboard Tour renders settings button step (11/12) 1`] = `
<Memo()
  tourProps={
    Object {
      "OmniPanelViewIndex": Object {
        "0": "MainMenu",
        "1": "Doors",
        "2": "Lifts",
        "3": "Robots",
        "4": "Dispensers",
        "5": "Commands",
        "6": "Negotiations",
        "Commands": 5,
        "Dispensers": 4,
        "Doors": 1,
        "Lifts": 2,
        "MainMenu": 0,
        "Negotiations": 6,
        "Robots": 3,
      },
      "doorSpotlight": Object {
        "value": "main_door",
      },
      "setDoorSpotlight": [MockFunction],
      "setTourSettingsAndOmniPanel": [MockFunction] {
        "calls": Array [
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
      "setTourShowOmniPanel": [MockFunction] {
        "calls": Array [
          Array [
            0,
          ],
          Array [
            0,
          ],
          Array [
            0,
          ],
          Array [
            1,
          ],
          Array [
            0,
          ],
          Array [
            1,
          ],
          Array [
            0,
          ],
          Array [
            0,
          ],
          Array [
            1,
          ],
          Array [
            0,
          ],
          Array [
            5,
          ],
          Array [
            0,
          ],
          Array [
            1,
          ],
          Array [
            0,
          ],
          Array [
            5,
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
      "setTourState": [MockFunction],
      "tourState": true,
    }
  }
>
  <Tour
    accentColor="#3f51b5"
    badgeContent={[Function]}
    closeWithMask={false}
    disableFocusLock={false}
    disableInteraction={false}
    disableKeyboardNavigation={
      Array [
        "right",
        "left",
      ]
    }
    isOpen={true}
    maskSpace={10}
    onRequestClose={[Function]}
    rounded={5}
    scrollDuration={1}
    showButtons={false}
    showCloseButton={true}
    showNavigation={false}
    showNavigationNumber={false}
    showNumber={true}
    startAt={0}
    steps={
      Array [
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "[class=\\"leaflet-control-zoom leaflet-bar leaflet-control\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "[class= \\"leaflet-control-layers leaflet-control\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "[class=\\"leaflet-image-layer leaflet-zoom-animated\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[id=\\"toggle-omnipanel-btn\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-component=\\"MainMenu\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-item=\\"Doors\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-name=\\"main_door\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-item= \\"Commands\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-component=\\"LoopForm\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[id=\\"show-settings-btn\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": ".MuiDrawer-paper",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
      ]
    }
    updateDelay={1}
  >
    <Portal>
      <Portal
        containerInfo={
          <div
            id="___reactour"
          >
            <div
              class="sc-dnqmqq kWwJhA"
            >
              <svg
                height="768"
                width="1024"
                xmlns="http://www.w3.org/2000/svg"
              >
                <defs>
                  <mask
                    id="mask-main"
                  >
                    <rect
                      fill="white"
                      height="768"
                      width="1024"
                      x="0"
                      y="0"
                    />
                    <rect
                      fill="black"
                      height="20"
                      width="20"
                      x="502"
                      y="768"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="501"
                      y="767"
                    />
                    <circle
                      cx="507"
                      cy="773"
                      fill="black"
                      r="5"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="518"
                      y="767"
                    />
                    <circle
                      cx="517"
                      cy="773"
                      fill="black"
                      r="5"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="501"
                      y="784"
                    />
                    <circle
                      cx="507"
                      cy="783"
                      fill="black"
                      r="5"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="518"
                      y="784"
                    />
                    <circle
                      cx="517"
                      cy="783"
                      fill="black "
                      r="5"
                    />
                  </mask>
                  <clippath
                    id="clip-path"
                  >
                    <rect
                      height="768"
                      width="1024"
                      x="0"
                      y="0"
                    />
                    <rect
                      height="20"
                      width="502"
                      x="0"
                      y="768"
                    />
                    <rect
                      height="20"
                      width="522"
                      x="522"
                      y="768"
                    />
                    <rect
                      height="0"
                      width="1024"
                      x="0"
                      y="788"
                    />
                  </clippath>
                </defs>
                <rect
                  fill="currentColor"
                  height="768"
                  mask="url(#mask-main)"
                  width="1024"
                  x="0"
                  y="0"
                />
                <rect
                  clip-path="url(#clip-path)"
                  fill="currentColor"
                  height="768"
                  pointer-events="auto"
                  width="1024"
                  x="0"
                  y="0"
                />
                <rect
                  class="reactour__mask--disable-interaction undefined"
                  display="none"
                  fill="transparent"
                  height="20"
                  pointer-events="auto"
                  width="20"
                  x="502"
                  y="768"
                />
              </svg>
            </div>
            <div
              data-focus-guard="true"
              style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
              tabindex="0"
            />
            <div
              data-focus-guard="true"
              style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
              tabindex="1"
            />
            <div
              data-focus-lock-disabled="false"
            >
              <div
                class="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                role="dialog"
                style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                tabindex="-1"
              >
                <div
                  class="MuiBox-root MuiBox-root-34"
                  id="stepNode"
                >
                  <h6
                    class="MuiTypography-root MuiTypography-h6"
                  >
                    The Settings Button opens up the drawer for different dashboard settings.
                  </h6>
                  <div
                    class="MuiBox-root MuiBox-root-36"
                  >
                    <button
                      class="MuiButtonBase-root MuiIconButton-root"
                      id="tour-back-btn"
                      tabindex="0"
                      type="button"
                    >
                      <span
                        class="MuiIconButton-label"
                      >
                        <svg
                          aria-hidden="true"
                          class="MuiSvgIcon-root makeStyles-navigation-35"
                          focusable="false"
                          viewBox="0 0 24 24"
                        >
                          <path
                            d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                          />
                        </svg>
                      </span>
                      <span
                        class="MuiTouchRipple-root"
                      />
                    </button>
                    <button
                      class="MuiButtonBase-root MuiIconButton-root"
                      id="tour-next-btn"
                      tabindex="0"
                      type="button"
                    >
                      <span
                        class="MuiIconButton-label"
                      >
                        <svg
                          aria-hidden="true"
                          class="MuiSvgIcon-root makeStyles-navigation-35"
                          focusable="false"
                          viewBox="0 0 24 24"
                        >
                          <path
                            d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                          />
                        </svg>
                      </span>
                      <span
                        class="MuiTouchRipple-root"
                      />
                    </button>
                  </div>
                </div>
                <span
                  class="sc-EHOje doXVdu"
                  data-tour-elem="badge"
                >
                  11 of 12
                </span>
                <button
                  class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                >
                  <svg
                    viewBox="0 0 9.1 9.1"
                  >
                    <path
                      d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                      fill="currentColor"
                    />
                  </svg>
                </button>
              </div>
            </div>
            <div
              data-focus-guard="true"
              style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
              tabindex="0"
            />
          </div>
        }
      >
        <GlobalStyleComponent />
        <ReactourResizeObserver
          refresh={[Function]}
          step={
            Object {
              "action": undefined,
              "content": [Function],
              "selector": "[data-component=\\"LoopForm\\"]",
              "style": Object {
                "backgroundColor": "#7986cb",
                "borderRadius": "5px",
                "color": "#fff",
              },
            }
          }
        />
        <ReactourMutationObserver
          refresh={[Function]}
          step={
            Object {
              "action": undefined,
              "content": [Function],
              "selector": "[data-component=\\"LoopForm\\"]",
              "style": Object {
                "backgroundColor": "#7986cb",
                "borderRadius": "5px",
                "color": "#fff",
              },
            }
          }
        />
        <SvgMask
          disableInteraction={false}
          disableInteractionClassName="reactour__mask--disable-interaction undefined"
          forwardRef={[Function]}
          onClick={[Function]}
          padding={10}
          rounded={5}
          targetHeight={0}
          targetLeft={512}
          targetTop={778}
          targetWidth={0}
          windowHeight={768}
          windowWidth={1024}
        >
          <styled.div
            onClick={[Function]}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-dnqmqq",
                    "isStatic": false,
                    "lastClassName": "kWwJhA",
                    "rules": Array [
                      "
  opacity: ",
                      [Function],
                      ";
  color: ",
                      [Function],
                      ";
  width: 100%;
  left: 0;
  top: 0;
  height: 100%;
  position: fixed;
  z-index: 99999;
  pointer-events: none;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-dnqmqq",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
            >
              <div
                className="sc-dnqmqq kWwJhA"
                onClick={[Function]}
              >
                <svg
                  height={768}
                  width={1024}
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <defs>
                    <mask
                      id="mask-main"
                    >
                      <rect
                        fill="white"
                        height={768}
                        width={1024}
                        x={0}
                        y={0}
                      />
                      <rect
                        fill="black"
                        height={20}
                        width={20}
                        x={502}
                        y={768}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={501}
                        y={767}
                      />
                      <circle
                        cx={507}
                        cy={773}
                        fill="black"
                        r={5}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={518}
                        y={767}
                      />
                      <circle
                        cx={517}
                        cy={773}
                        fill="black"
                        r={5}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={501}
                        y={784}
                      />
                      <circle
                        cx={507}
                        cy={783}
                        fill="black"
                        r={5}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={518}
                        y={784}
                      />
                      <circle
                        cx={517}
                        cy={783}
                        fill="black "
                        r={5}
                      />
                    </mask>
                    <clipPath
                      id="clip-path"
                    >
                      <rect
                        height={768}
                        width={1024}
                        x={0}
                        y={0}
                      />
                      <rect
                        height={20}
                        width={502}
                        x={0}
                        y={768}
                      />
                      <rect
                        height={20}
                        width={522}
                        x={522}
                        y={768}
                      />
                      <rect
                        height={0}
                        width={1024}
                        x={0}
                        y={788}
                      />
                    </clipPath>
                  </defs>
                  <rect
                    fill="currentColor"
                    height={768}
                    mask="url(#mask-main)"
                    width={1024}
                    x={0}
                    y={0}
                  />
                  <rect
                    clipPath="url(#clip-path)"
                    fill="currentColor"
                    height={768}
                    pointerEvents="auto"
                    width={1024}
                    x={0}
                    y={0}
                  />
                  <rect
                    className="reactour__mask--disable-interaction undefined"
                    display="none"
                    fill="transparent"
                    height={20}
                    pointerEvents="auto"
                    width={20}
                    x={502}
                    y={768}
                  />
                </svg>
              </div>
            </StyledComponent>
          </styled.div>
        </SvgMask>
        <ForwardRef
          disabled={false}
        >
          <ForwardRef
            as="div"
            autoFocus={true}
            disabled={false}
            lockProps={Object {}}
            noFocusGuards={false}
            persistentFocus={false}
            returnFocus={false}
            sideCar={[Function]}
          >
            <div
              data-focus-guard={true}
              key="guard-first"
              style={
                Object {
                  "height": "0px",
                  "left": "1px",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "fixed",
                  "top": "1px",
                  "width": "1px",
                }
              }
              tabIndex={0}
            />
            <div
              data-focus-guard={true}
              key="guard-nearest"
              style={
                Object {
                  "height": "0px",
                  "left": "1px",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "fixed",
                  "top": "1px",
                  "width": "1px",
                }
              }
              tabIndex={1}
            />
            <SideEffect(FocusWatcher)
              autoFocus={true}
              disabled={false}
              id={Object {}}
              observed={
                <div
                  data-focus-lock-disabled="false"
                >
                  <div
                    class="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                    role="dialog"
                    style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                    tabindex="-1"
                  >
                    <div
                      class="MuiBox-root MuiBox-root-34"
                      id="stepNode"
                    >
                      <h6
                        class="MuiTypography-root MuiTypography-h6"
                      >
                        The Settings Button opens up the drawer for different dashboard settings.
                      </h6>
                      <div
                        class="MuiBox-root MuiBox-root-36"
                      >
                        <button
                          class="MuiButtonBase-root MuiIconButton-root"
                          id="tour-back-btn"
                          tabindex="0"
                          type="button"
                        >
                          <span
                            class="MuiIconButton-label"
                          >
                            <svg
                              aria-hidden="true"
                              class="MuiSvgIcon-root makeStyles-navigation-35"
                              focusable="false"
                              viewBox="0 0 24 24"
                            >
                              <path
                                d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                              />
                            </svg>
                          </span>
                          <span
                            class="MuiTouchRipple-root"
                          />
                        </button>
                        <button
                          class="MuiButtonBase-root MuiIconButton-root"
                          id="tour-next-btn"
                          tabindex="0"
                          type="button"
                        >
                          <span
                            class="MuiIconButton-label"
                          >
                            <svg
                              aria-hidden="true"
                              class="MuiSvgIcon-root makeStyles-navigation-35"
                              focusable="false"
                              viewBox="0 0 24 24"
                            >
                              <path
                                d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                              />
                            </svg>
                          </span>
                          <span
                            class="MuiTouchRipple-root"
                          />
                        </button>
                      </div>
                    </div>
                    <span
                      class="sc-EHOje doXVdu"
                      data-tour-elem="badge"
                    >
                      11 of 12
                    </span>
                    <button
                      class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                    >
                      <svg
                        viewBox="0 0 9.1 9.1"
                      >
                        <path
                          d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                          fill="currentColor"
                        />
                      </svg>
                    </button>
                  </div>
                </div>
              }
              onActivation={[Function]}
              onDeactivation={[Function]}
              persistentFocus={false}
              returnFocus={[Function]}
              shards={Array []}
              sideCar={
                Object {
                  "assignMedium": [Function],
                  "assignSyncMedium": [Function],
                  "options": Object {
                    "async": true,
                    "ssr": false,
                  },
                  "read": [Function],
                  "useMedium": [Function],
                }
              }
            >
              <FocusWatcher
                autoFocus={true}
                disabled={false}
                id={Object {}}
                observed={
                  <div
                    data-focus-lock-disabled="false"
                  >
                    <div
                      class="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                      role="dialog"
                      style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                      tabindex="-1"
                    >
                      <div
                        class="MuiBox-root MuiBox-root-34"
                        id="stepNode"
                      >
                        <h6
                          class="MuiTypography-root MuiTypography-h6"
                        >
                          The Settings Button opens up the drawer for different dashboard settings.
                        </h6>
                        <div
                          class="MuiBox-root MuiBox-root-36"
                        >
                          <button
                            class="MuiButtonBase-root MuiIconButton-root"
                            id="tour-back-btn"
                            tabindex="0"
                            type="button"
                          >
                            <span
                              class="MuiIconButton-label"
                            >
                              <svg
                                aria-hidden="true"
                                class="MuiSvgIcon-root makeStyles-navigation-35"
                                focusable="false"
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                />
                              </svg>
                            </span>
                            <span
                              class="MuiTouchRipple-root"
                            />
                          </button>
                          <button
                            class="MuiButtonBase-root MuiIconButton-root"
                            id="tour-next-btn"
                            tabindex="0"
                            type="button"
                          >
                            <span
                              class="MuiIconButton-label"
                            >
                              <svg
                                aria-hidden="true"
                                class="MuiSvgIcon-root makeStyles-navigation-35"
                                focusable="false"
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                />
                              </svg>
                            </span>
                            <span
                              class="MuiTouchRipple-root"
                            />
                          </button>
                        </div>
                      </div>
                      <span
                        class="sc-EHOje doXVdu"
                        data-tour-elem="badge"
                      >
                        11 of 12
                      </span>
                      <button
                        class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                      >
                        <svg
                          viewBox="0 0 9.1 9.1"
                        >
                          <path
                            d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                            fill="currentColor"
                          />
                        </svg>
                      </button>
                    </div>
                  </div>
                }
                onActivation={[Function]}
                onDeactivation={[Function]}
                persistentFocus={false}
                returnFocus={[Function]}
                shards={Array []}
                sideCar={
                  Object {
                    "assignMedium": [Function],
                    "assignSyncMedium": [Function],
                    "options": Object {
                      "async": true,
                      "ssr": false,
                    },
                    "read": [Function],
                    "useMedium": [Function],
                  }
                }
              />
            </SideEffect(FocusWatcher)>
            <div
              data-focus-lock-disabled={false}
              onBlur={[Function]}
              onFocus={[Function]}
            >
              <styled.div
                accentColor="#3f51b5"
                className="reactour__helper reactour__helper--is-open"
                current={9}
                defaultStyles={true}
                helperHeight={0}
                helperPosition="center"
                helperWidth={0}
                padding={10}
                role="dialog"
                rounded={5}
                style={
                  Object {
                    "backgroundColor": "#7986cb",
                    "borderRadius": "5px",
                    "color": "#fff",
                  }
                }
                tabIndex={-1}
                targetBottom={393}
                targetHeight={0}
                targetLeft={512}
                targetRight={521}
                targetTop={778}
                targetWidth={0}
                windowHeight={768}
                windowWidth={1024}
              >
                <StyledComponent
                  accentColor="#3f51b5"
                  className="reactour__helper reactour__helper--is-open"
                  current={9}
                  defaultStyles={true}
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-ifAKCX",
                        "isStatic": false,
                        "lastClassName": "jBzNhS",
                        "rules": Array [
                          "
  --reactour-accent: ",
                          [Function],
                          ";
  ",
                          [Function],
                          "
  position: fixed;
  transition: transform 0.3s;
  top: 0;
  left: 0;
  z-index: 1000000;

  transform: ",
                          [Function],
                          ";
",
                        ],
                      },
                      "displayName": "styled.div",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-ifAKCX",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={
                    Object {
                      "current": <div
                        class="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                        role="dialog"
                        style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                        tabindex="-1"
                      >
                        <div
                          class="MuiBox-root MuiBox-root-34"
                          id="stepNode"
                        >
                          <h6
                            class="MuiTypography-root MuiTypography-h6"
                          >
                            The Settings Button opens up the drawer for different dashboard settings.
                          </h6>
                          <div
                            class="MuiBox-root MuiBox-root-36"
                          >
                            <button
                              class="MuiButtonBase-root MuiIconButton-root"
                              id="tour-back-btn"
                              tabindex="0"
                              type="button"
                            >
                              <span
                                class="MuiIconButton-label"
                              >
                                <svg
                                  aria-hidden="true"
                                  class="MuiSvgIcon-root makeStyles-navigation-35"
                                  focusable="false"
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                  />
                                </svg>
                              </span>
                              <span
                                class="MuiTouchRipple-root"
                              />
                            </button>
                            <button
                              class="MuiButtonBase-root MuiIconButton-root"
                              id="tour-next-btn"
                              tabindex="0"
                              type="button"
                            >
                              <span
                                class="MuiIconButton-label"
                              >
                                <svg
                                  aria-hidden="true"
                                  class="MuiSvgIcon-root makeStyles-navigation-35"
                                  focusable="false"
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                  />
                                </svg>
                              </span>
                              <span
                                class="MuiTouchRipple-root"
                              />
                            </button>
                          </div>
                        </div>
                        <span
                          class="sc-EHOje doXVdu"
                          data-tour-elem="badge"
                        >
                          11 of 12
                        </span>
                        <button
                          class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                        >
                          <svg
                            viewBox="0 0 9.1 9.1"
                          >
                            <path
                              d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                              fill="currentColor"
                            />
                          </svg>
                        </button>
                      </div>,
                    }
                  }
                  helperHeight={0}
                  helperPosition="center"
                  helperWidth={0}
                  padding={10}
                  role="dialog"
                  rounded={5}
                  style={
                    Object {
                      "backgroundColor": "#7986cb",
                      "borderRadius": "5px",
                      "color": "#fff",
                    }
                  }
                  tabIndex={-1}
                  targetBottom={393}
                  targetHeight={0}
                  targetLeft={512}
                  targetRight={521}
                  targetTop={778}
                  targetWidth={0}
                  windowHeight={768}
                  windowWidth={1024}
                >
                  <div
                    className="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                    role="dialog"
                    style={
                      Object {
                        "backgroundColor": "#7986cb",
                        "borderRadius": "5px",
                        "color": "#fff",
                      }
                    }
                    tabIndex={-1}
                  >
                    <Styled(MuiBox)
                      id="stepNode"
                    >
                      <div
                        className="MuiBox-root MuiBox-root-34"
                        id="stepNode"
                      >
                        <WithStyles(ForwardRef(Typography))
                          variant="h6"
                        >
                          <ForwardRef(Typography)
                            classes={
                              Object {
                                "alignCenter": "MuiTypography-alignCenter",
                                "alignJustify": "MuiTypography-alignJustify",
                                "alignLeft": "MuiTypography-alignLeft",
                                "alignRight": "MuiTypography-alignRight",
                                "body1": "MuiTypography-body1",
                                "body2": "MuiTypography-body2",
                                "button": "MuiTypography-button",
                                "caption": "MuiTypography-caption",
                                "colorError": "MuiTypography-colorError",
                                "colorInherit": "MuiTypography-colorInherit",
                                "colorPrimary": "MuiTypography-colorPrimary",
                                "colorSecondary": "MuiTypography-colorSecondary",
                                "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                "displayBlock": "MuiTypography-displayBlock",
                                "displayInline": "MuiTypography-displayInline",
                                "gutterBottom": "MuiTypography-gutterBottom",
                                "h1": "MuiTypography-h1",
                                "h2": "MuiTypography-h2",
                                "h3": "MuiTypography-h3",
                                "h4": "MuiTypography-h4",
                                "h5": "MuiTypography-h5",
                                "h6": "MuiTypography-h6",
                                "noWrap": "MuiTypography-noWrap",
                                "overline": "MuiTypography-overline",
                                "paragraph": "MuiTypography-paragraph",
                                "root": "MuiTypography-root",
                                "srOnly": "MuiTypography-srOnly",
                                "subtitle1": "MuiTypography-subtitle1",
                                "subtitle2": "MuiTypography-subtitle2",
                              }
                            }
                            variant="h6"
                          >
                            <h6
                              className="MuiTypography-root MuiTypography-h6"
                            >
                              An example is the Loop Request which can be iterated multiple times. RoMi will assign the most suitable robot to perform the task at the point of request.
                            </h6>
                          </ForwardRef(Typography)>
                        </WithStyles(ForwardRef(Typography))>
                        <Memo()
                          goTo={[Function]}
                          handleBackClick={[Function]}
                          handleNextClick={[Function]}
                          step={10}
                        >
                          <Styled(MuiBox)>
                            <div
                              className="MuiBox-root MuiBox-root-36"
                            >
                              <WithStyles(ForwardRef(IconButton))
                                id="tour-back-btn"
                                onClick={[Function]}
                              >
                                <ForwardRef(IconButton)
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit",
                                      "colorPrimary": "MuiIconButton-colorPrimary",
                                      "colorSecondary": "MuiIconButton-colorSecondary",
                                      "disabled": "Mui-disabled",
                                      "edgeEnd": "MuiIconButton-edgeEnd",
                                      "edgeStart": "MuiIconButton-edgeStart",
                                      "label": "MuiIconButton-label",
                                      "root": "MuiIconButton-root",
                                      "sizeSmall": "MuiIconButton-sizeSmall",
                                    }
                                  }
                                  id="tour-back-btn"
                                  onClick={[Function]}
                                >
                                  <WithStyles(ForwardRef(ButtonBase))
                                    centerRipple={true}
                                    className="MuiIconButton-root"
                                    disabled={false}
                                    focusRipple={true}
                                    id="tour-back-btn"
                                    onClick={[Function]}
                                  >
                                    <ForwardRef(ButtonBase)
                                      centerRipple={true}
                                      className="MuiIconButton-root"
                                      classes={
                                        Object {
                                          "disabled": "Mui-disabled",
                                          "focusVisible": "Mui-focusVisible",
                                          "root": "MuiButtonBase-root",
                                        }
                                      }
                                      disabled={false}
                                      focusRipple={true}
                                      id="tour-back-btn"
                                      onClick={[Function]}
                                    >
                                      <button
                                        className="MuiButtonBase-root MuiIconButton-root"
                                        disabled={false}
                                        id="tour-back-btn"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragLeave={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex={0}
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label"
                                        >
                                          <ForwardRef
                                            className="makeStyles-navigation-35"
                                          >
                                            <WithStyles(ForwardRef(SvgIcon))
                                              className="makeStyles-navigation-35"
                                            >
                                              <ForwardRef(SvgIcon)
                                                className="makeStyles-navigation-35"
                                                classes={
                                                  Object {
                                                    "colorAction": "MuiSvgIcon-colorAction",
                                                    "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                    "colorError": "MuiSvgIcon-colorError",
                                                    "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                    "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                    "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                    "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                    "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                    "root": "MuiSvgIcon-root",
                                                  }
                                                }
                                              >
                                                <svg
                                                  aria-hidden={true}
                                                  className="MuiSvgIcon-root makeStyles-navigation-35"
                                                  focusable="false"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <path
                                                    d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                                  />
                                                </svg>
                                              </ForwardRef(SvgIcon)>
                                            </WithStyles(ForwardRef(SvgIcon))>
                                          </ForwardRef>
                                        </span>
                                        <WithStyles(memo)
                                          center={true}
                                        >
                                          <ForwardRef(TouchRipple)
                                            center={true}
                                            classes={
                                              Object {
                                                "child": "MuiTouchRipple-child",
                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                "ripple": "MuiTouchRipple-ripple",
                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                "root": "MuiTouchRipple-root",
                                              }
                                            }
                                          >
                                            <span
                                              className="MuiTouchRipple-root"
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                component={null}
                                                exit={true}
                                              />
                                            </span>
                                          </ForwardRef(TouchRipple)>
                                        </WithStyles(memo)>
                                      </button>
                                    </ForwardRef(ButtonBase)>
                                  </WithStyles(ForwardRef(ButtonBase))>
                                </ForwardRef(IconButton)>
                              </WithStyles(ForwardRef(IconButton))>
                              <WithStyles(ForwardRef(IconButton))
                                id="tour-next-btn"
                                onClick={[Function]}
                              >
                                <ForwardRef(IconButton)
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit",
                                      "colorPrimary": "MuiIconButton-colorPrimary",
                                      "colorSecondary": "MuiIconButton-colorSecondary",
                                      "disabled": "Mui-disabled",
                                      "edgeEnd": "MuiIconButton-edgeEnd",
                                      "edgeStart": "MuiIconButton-edgeStart",
                                      "label": "MuiIconButton-label",
                                      "root": "MuiIconButton-root",
                                      "sizeSmall": "MuiIconButton-sizeSmall",
                                    }
                                  }
                                  id="tour-next-btn"
                                  onClick={[Function]}
                                >
                                  <WithStyles(ForwardRef(ButtonBase))
                                    centerRipple={true}
                                    className="MuiIconButton-root"
                                    disabled={false}
                                    focusRipple={true}
                                    id="tour-next-btn"
                                    onClick={[Function]}
                                  >
                                    <ForwardRef(ButtonBase)
                                      centerRipple={true}
                                      className="MuiIconButton-root"
                                      classes={
                                        Object {
                                          "disabled": "Mui-disabled",
                                          "focusVisible": "Mui-focusVisible",
                                          "root": "MuiButtonBase-root",
                                        }
                                      }
                                      disabled={false}
                                      focusRipple={true}
                                      id="tour-next-btn"
                                      onClick={[Function]}
                                    >
                                      <button
                                        className="MuiButtonBase-root MuiIconButton-root"
                                        disabled={false}
                                        id="tour-next-btn"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragLeave={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex={0}
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label"
                                        >
                                          <ForwardRef
                                            className="makeStyles-navigation-35"
                                          >
                                            <WithStyles(ForwardRef(SvgIcon))
                                              className="makeStyles-navigation-35"
                                            >
                                              <ForwardRef(SvgIcon)
                                                className="makeStyles-navigation-35"
                                                classes={
                                                  Object {
                                                    "colorAction": "MuiSvgIcon-colorAction",
                                                    "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                    "colorError": "MuiSvgIcon-colorError",
                                                    "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                    "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                    "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                    "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                    "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                    "root": "MuiSvgIcon-root",
                                                  }
                                                }
                                              >
                                                <svg
                                                  aria-hidden={true}
                                                  className="MuiSvgIcon-root makeStyles-navigation-35"
                                                  focusable="false"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <path
                                                    d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                                  />
                                                </svg>
                                              </ForwardRef(SvgIcon)>
                                            </WithStyles(ForwardRef(SvgIcon))>
                                          </ForwardRef>
                                        </span>
                                        <WithStyles(memo)
                                          center={true}
                                        >
                                          <ForwardRef(TouchRipple)
                                            center={true}
                                            classes={
                                              Object {
                                                "child": "MuiTouchRipple-child",
                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                "ripple": "MuiTouchRipple-ripple",
                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                "root": "MuiTouchRipple-root",
                                              }
                                            }
                                          >
                                            <span
                                              className="MuiTouchRipple-root"
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                component={null}
                                                exit={true}
                                              />
                                            </span>
                                          </ForwardRef(TouchRipple)>
                                        </WithStyles(memo)>
                                      </button>
                                    </ForwardRef(ButtonBase)>
                                  </WithStyles(ForwardRef(ButtonBase))>
                                </ForwardRef(IconButton)>
                              </WithStyles(ForwardRef(IconButton))>
                            </div>
                          </Styled(MuiBox)>
                        </Memo()>
                      </div>
                    </Styled(MuiBox)>
                    <styled.span
                      accentColor="#3f51b5"
                      data-tour-elem="badge"
                    >
                      <StyledComponent
                        accentColor="#3f51b5"
                        data-tour-elem="badge"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-EHOje",
                              "isStatic": false,
                              "lastClassName": "doXVdu",
                              "rules": Array [
                                "
  position: absolute;
  font-family: monospace;
  background: var(--reactour-accent);
  background: ",
                                [Function],
                                ";
  height: 1.875em;
  line-height: 2;
  padding-left: 0.8125em;
  padding-right: 0.8125em;
  font-size: 1em;
  border-radius: 1.625em;
  color: white;
  text-align: center;
  box-shadow: 0 0.25em 0.5em rgba(0, 0, 0, 0.3);
  top: -0.8125em;
  left: -0.8125em;
",
                              ],
                            },
                            "displayName": "styled.span",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-EHOje",
                            "target": "span",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <span
                          className="sc-EHOje doXVdu"
                          data-tour-elem="badge"
                        >
                          10 of 12
                        </span>
                      </StyledComponent>
                    </styled.span>
                    <Styled(Close)
                      className="reactour__close"
                      onClick={[Function]}
                    >
                      <StyledComponent
                        className="reactour__close"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-bxivhb",
                              "isStatic": false,
                              "lastClassName": "eTpeTG",
                              "rules": Array [
                                "
  position: absolute;
  top: 22px;
  right: 22px;
  width: 9px;
  height: 9px;
  color: #5e5e5e;
  &:hover {
    color: #000;
  }
",
                              ],
                            },
                            "displayName": "Styled(Close)",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-bxivhb",
                            "target": [Function],
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        onClick={[Function]}
                      >
                        <Close
                          className="sc-bxivhb eTpeTG reactour__close"
                          onClick={[Function]}
                        >
                          <styled.button
                            className="sc-bxivhb eTpeTG reactour__close"
                            onClick={[Function]}
                          >
                            <StyledComponent
                              className="sc-bxivhb eTpeTG reactour__close"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-bdVaJa",
                                    "isStatic": false,
                                    "lastClassName": "cYQqRL",
                                    "rules": Array [
                                      "
  display: block;
  padding: 0;
  border: 0;
  background: none;
  font-size: 0;
  cursor: ",
                                      [Function],
                                      ";
",
                                    ],
                                  },
                                  "displayName": "styled.button",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-bdVaJa",
                                  "target": "button",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              onClick={[Function]}
                            >
                              <button
                                className="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                                onClick={[Function]}
                              >
                                <svg
                                  viewBox="0 0 9.1 9.1"
                                >
                                  <path
                                    d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                                    fill="currentColor"
                                  />
                                </svg>
                              </button>
                            </StyledComponent>
                          </styled.button>
                        </Close>
                      </StyledComponent>
                    </Styled(Close)>
                  </div>
                </StyledComponent>
              </styled.div>
            </div>
            <div
              data-focus-guard={true}
              style={
                Object {
                  "height": "0px",
                  "left": "1px",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "fixed",
                  "top": "1px",
                  "width": "1px",
                }
              }
              tabIndex={0}
            />
          </ForwardRef>
        </ForwardRef>
      </Portal>
    </Portal>
  </Tour>
</Memo()>
`;

exports[`Dashboard Tour renders traj anims step (12/12) 1`] = `
<Memo()
  tourProps={
    Object {
      "OmniPanelViewIndex": Object {
        "0": "MainMenu",
        "1": "Doors",
        "2": "Lifts",
        "3": "Robots",
        "4": "Dispensers",
        "5": "Commands",
        "6": "Negotiations",
        "Commands": 5,
        "Dispensers": 4,
        "Doors": 1,
        "Lifts": 2,
        "MainMenu": 0,
        "Negotiations": 6,
        "Robots": 3,
      },
      "doorSpotlight": Object {
        "value": "main_door",
      },
      "setDoorSpotlight": [MockFunction],
      "setTourSettingsAndOmniPanel": [MockFunction] {
        "calls": Array [
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
          ],
          Array [
            true,
            false,
            true,
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
      "setTourShowOmniPanel": [MockFunction] {
        "calls": Array [
          Array [
            0,
          ],
          Array [
            0,
          ],
          Array [
            0,
          ],
          Array [
            1,
          ],
          Array [
            0,
          ],
          Array [
            1,
          ],
          Array [
            0,
          ],
          Array [
            0,
          ],
          Array [
            1,
          ],
          Array [
            0,
          ],
          Array [
            5,
          ],
          Array [
            0,
          ],
          Array [
            1,
          ],
          Array [
            0,
          ],
          Array [
            5,
          ],
          Array [
            0,
          ],
          Array [
            1,
          ],
          Array [
            0,
          ],
          Array [
            5,
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
      "setTourState": [MockFunction],
      "tourState": true,
    }
  }
>
  <Tour
    accentColor="#3f51b5"
    badgeContent={[Function]}
    closeWithMask={false}
    disableFocusLock={false}
    disableInteraction={false}
    disableKeyboardNavigation={
      Array [
        "right",
        "left",
      ]
    }
    isOpen={true}
    maskSpace={10}
    onRequestClose={[Function]}
    rounded={5}
    scrollDuration={1}
    showButtons={false}
    showCloseButton={true}
    showNavigation={false}
    showNavigationNumber={false}
    showNumber={true}
    startAt={0}
    steps={
      Array [
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "[class=\\"leaflet-control-zoom leaflet-bar leaflet-control\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "[class= \\"leaflet-control-layers leaflet-control\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "[class=\\"leaflet-image-layer leaflet-zoom-animated\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[id=\\"toggle-omnipanel-btn\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-component=\\"MainMenu\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-item=\\"Doors\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-name=\\"main_door\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-item= \\"Commands\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-component=\\"LoopForm\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[id=\\"show-settings-btn\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": ".MuiDrawer-paper",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
      ]
    }
    updateDelay={1}
  >
    <Portal>
      <Portal
        containerInfo={
          <div
            id="___reactour"
          >
            <div
              class="sc-dnqmqq kWwJhA"
            >
              <svg
                height="768"
                width="1024"
                xmlns="http://www.w3.org/2000/svg"
              >
                <defs>
                  <mask
                    id="mask-main"
                  >
                    <rect
                      fill="white"
                      height="768"
                      width="1024"
                      x="0"
                      y="0"
                    />
                    <rect
                      fill="black"
                      height="20"
                      width="20"
                      x="502"
                      y="768"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="501"
                      y="767"
                    />
                    <circle
                      cx="507"
                      cy="773"
                      fill="black"
                      r="5"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="518"
                      y="767"
                    />
                    <circle
                      cx="517"
                      cy="773"
                      fill="black"
                      r="5"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="501"
                      y="784"
                    />
                    <circle
                      cx="507"
                      cy="783"
                      fill="black"
                      r="5"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="518"
                      y="784"
                    />
                    <circle
                      cx="517"
                      cy="783"
                      fill="black "
                      r="5"
                    />
                  </mask>
                  <clippath
                    id="clip-path"
                  >
                    <rect
                      height="768"
                      width="1024"
                      x="0"
                      y="0"
                    />
                    <rect
                      height="20"
                      width="502"
                      x="0"
                      y="768"
                    />
                    <rect
                      height="20"
                      width="522"
                      x="522"
                      y="768"
                    />
                    <rect
                      height="0"
                      width="1024"
                      x="0"
                      y="788"
                    />
                  </clippath>
                </defs>
                <rect
                  fill="currentColor"
                  height="768"
                  mask="url(#mask-main)"
                  width="1024"
                  x="0"
                  y="0"
                />
                <rect
                  clip-path="url(#clip-path)"
                  fill="currentColor"
                  height="768"
                  pointer-events="auto"
                  width="1024"
                  x="0"
                  y="0"
                />
                <rect
                  class="reactour__mask--disable-interaction undefined"
                  display="none"
                  fill="transparent"
                  height="20"
                  pointer-events="auto"
                  width="20"
                  x="502"
                  y="768"
                />
              </svg>
            </div>
            <div
              data-focus-guard="true"
              style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
              tabindex="0"
            />
            <div
              data-focus-guard="true"
              style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
              tabindex="1"
            />
            <div
              data-focus-lock-disabled="false"
            >
              <div
                class="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                role="dialog"
                style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                tabindex="-1"
              >
                <div
                  class="MuiBox-root MuiBox-root-37"
                  id="stepNode"
                >
                  <h6
                    class="MuiTypography-root MuiTypography-h6"
                  >
                    Finally, Trajectory configurations can be changed using the options available. Look out for new features ahead!
                  </h6>
                  <div
                    class="MuiBox-root MuiBox-root-39"
                  >
                    <button
                      class="MuiButtonBase-root MuiIconButton-root"
                      id="tour-back-btn"
                      tabindex="0"
                      type="button"
                    >
                      <span
                        class="MuiIconButton-label"
                      >
                        <svg
                          aria-hidden="true"
                          class="MuiSvgIcon-root makeStyles-navigation-38"
                          focusable="false"
                          viewBox="0 0 24 24"
                        >
                          <path
                            d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                          />
                        </svg>
                      </span>
                      <span
                        class="MuiTouchRipple-root"
                      />
                    </button>
                    <button
                      class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                      id="tour-last-step-btn"
                      tabindex="0"
                      type="button"
                    >
                      <span
                        class="MuiButton-label"
                      >
                        Start Using Romi
                      </span>
                      <span
                        class="MuiTouchRipple-root"
                      />
                    </button>
                  </div>
                </div>
                <span
                  class="sc-EHOje doXVdu"
                  data-tour-elem="badge"
                >
                  12 of 12
                </span>
                <button
                  class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                >
                  <svg
                    viewBox="0 0 9.1 9.1"
                  >
                    <path
                      d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                      fill="currentColor"
                    />
                  </svg>
                </button>
              </div>
            </div>
            <div
              data-focus-guard="true"
              style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
              tabindex="0"
            />
          </div>
        }
      >
        <GlobalStyleComponent />
        <ReactourResizeObserver
          refresh={[Function]}
          step={
            Object {
              "action": undefined,
              "content": [Function],
              "selector": "[id=\\"show-settings-btn\\"]",
              "style": Object {
                "backgroundColor": "#7986cb",
                "borderRadius": "5px",
                "color": "#fff",
              },
            }
          }
        />
        <ReactourMutationObserver
          refresh={[Function]}
          step={
            Object {
              "action": undefined,
              "content": [Function],
              "selector": "[id=\\"show-settings-btn\\"]",
              "style": Object {
                "backgroundColor": "#7986cb",
                "borderRadius": "5px",
                "color": "#fff",
              },
            }
          }
        />
        <SvgMask
          disableInteraction={false}
          disableInteractionClassName="reactour__mask--disable-interaction undefined"
          forwardRef={[Function]}
          onClick={[Function]}
          padding={10}
          rounded={5}
          targetHeight={0}
          targetLeft={512}
          targetTop={778}
          targetWidth={0}
          windowHeight={768}
          windowWidth={1024}
        >
          <styled.div
            onClick={[Function]}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-dnqmqq",
                    "isStatic": false,
                    "lastClassName": "kWwJhA",
                    "rules": Array [
                      "
  opacity: ",
                      [Function],
                      ";
  color: ",
                      [Function],
                      ";
  width: 100%;
  left: 0;
  top: 0;
  height: 100%;
  position: fixed;
  z-index: 99999;
  pointer-events: none;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-dnqmqq",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
            >
              <div
                className="sc-dnqmqq kWwJhA"
                onClick={[Function]}
              >
                <svg
                  height={768}
                  width={1024}
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <defs>
                    <mask
                      id="mask-main"
                    >
                      <rect
                        fill="white"
                        height={768}
                        width={1024}
                        x={0}
                        y={0}
                      />
                      <rect
                        fill="black"
                        height={20}
                        width={20}
                        x={502}
                        y={768}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={501}
                        y={767}
                      />
                      <circle
                        cx={507}
                        cy={773}
                        fill="black"
                        r={5}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={518}
                        y={767}
                      />
                      <circle
                        cx={517}
                        cy={773}
                        fill="black"
                        r={5}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={501}
                        y={784}
                      />
                      <circle
                        cx={507}
                        cy={783}
                        fill="black"
                        r={5}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={518}
                        y={784}
                      />
                      <circle
                        cx={517}
                        cy={783}
                        fill="black "
                        r={5}
                      />
                    </mask>
                    <clipPath
                      id="clip-path"
                    >
                      <rect
                        height={768}
                        width={1024}
                        x={0}
                        y={0}
                      />
                      <rect
                        height={20}
                        width={502}
                        x={0}
                        y={768}
                      />
                      <rect
                        height={20}
                        width={522}
                        x={522}
                        y={768}
                      />
                      <rect
                        height={0}
                        width={1024}
                        x={0}
                        y={788}
                      />
                    </clipPath>
                  </defs>
                  <rect
                    fill="currentColor"
                    height={768}
                    mask="url(#mask-main)"
                    width={1024}
                    x={0}
                    y={0}
                  />
                  <rect
                    clipPath="url(#clip-path)"
                    fill="currentColor"
                    height={768}
                    pointerEvents="auto"
                    width={1024}
                    x={0}
                    y={0}
                  />
                  <rect
                    className="reactour__mask--disable-interaction undefined"
                    display="none"
                    fill="transparent"
                    height={20}
                    pointerEvents="auto"
                    width={20}
                    x={502}
                    y={768}
                  />
                </svg>
              </div>
            </StyledComponent>
          </styled.div>
        </SvgMask>
        <ForwardRef
          disabled={false}
        >
          <ForwardRef
            as="div"
            autoFocus={true}
            disabled={false}
            lockProps={Object {}}
            noFocusGuards={false}
            persistentFocus={false}
            returnFocus={false}
            sideCar={[Function]}
          >
            <div
              data-focus-guard={true}
              key="guard-first"
              style={
                Object {
                  "height": "0px",
                  "left": "1px",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "fixed",
                  "top": "1px",
                  "width": "1px",
                }
              }
              tabIndex={0}
            />
            <div
              data-focus-guard={true}
              key="guard-nearest"
              style={
                Object {
                  "height": "0px",
                  "left": "1px",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "fixed",
                  "top": "1px",
                  "width": "1px",
                }
              }
              tabIndex={1}
            />
            <SideEffect(FocusWatcher)
              autoFocus={true}
              disabled={false}
              id={Object {}}
              observed={
                <div
                  data-focus-lock-disabled="false"
                >
                  <div
                    class="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                    role="dialog"
                    style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                    tabindex="-1"
                  >
                    <div
                      class="MuiBox-root MuiBox-root-37"
                      id="stepNode"
                    >
                      <h6
                        class="MuiTypography-root MuiTypography-h6"
                      >
                        Finally, Trajectory configurations can be changed using the options available. Look out for new features ahead!
                      </h6>
                      <div
                        class="MuiBox-root MuiBox-root-39"
                      >
                        <button
                          class="MuiButtonBase-root MuiIconButton-root"
                          id="tour-back-btn"
                          tabindex="0"
                          type="button"
                        >
                          <span
                            class="MuiIconButton-label"
                          >
                            <svg
                              aria-hidden="true"
                              class="MuiSvgIcon-root makeStyles-navigation-38"
                              focusable="false"
                              viewBox="0 0 24 24"
                            >
                              <path
                                d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                              />
                            </svg>
                          </span>
                          <span
                            class="MuiTouchRipple-root"
                          />
                        </button>
                        <button
                          class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                          id="tour-last-step-btn"
                          tabindex="0"
                          type="button"
                        >
                          <span
                            class="MuiButton-label"
                          >
                            Start Using Romi
                          </span>
                          <span
                            class="MuiTouchRipple-root"
                          />
                        </button>
                      </div>
                    </div>
                    <span
                      class="sc-EHOje doXVdu"
                      data-tour-elem="badge"
                    >
                      12 of 12
                    </span>
                    <button
                      class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                    >
                      <svg
                        viewBox="0 0 9.1 9.1"
                      >
                        <path
                          d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                          fill="currentColor"
                        />
                      </svg>
                    </button>
                  </div>
                </div>
              }
              onActivation={[Function]}
              onDeactivation={[Function]}
              persistentFocus={false}
              returnFocus={[Function]}
              shards={Array []}
              sideCar={
                Object {
                  "assignMedium": [Function],
                  "assignSyncMedium": [Function],
                  "options": Object {
                    "async": true,
                    "ssr": false,
                  },
                  "read": [Function],
                  "useMedium": [Function],
                }
              }
            >
              <FocusWatcher
                autoFocus={true}
                disabled={false}
                id={Object {}}
                observed={
                  <div
                    data-focus-lock-disabled="false"
                  >
                    <div
                      class="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                      role="dialog"
                      style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                      tabindex="-1"
                    >
                      <div
                        class="MuiBox-root MuiBox-root-37"
                        id="stepNode"
                      >
                        <h6
                          class="MuiTypography-root MuiTypography-h6"
                        >
                          Finally, Trajectory configurations can be changed using the options available. Look out for new features ahead!
                        </h6>
                        <div
                          class="MuiBox-root MuiBox-root-39"
                        >
                          <button
                            class="MuiButtonBase-root MuiIconButton-root"
                            id="tour-back-btn"
                            tabindex="0"
                            type="button"
                          >
                            <span
                              class="MuiIconButton-label"
                            >
                              <svg
                                aria-hidden="true"
                                class="MuiSvgIcon-root makeStyles-navigation-38"
                                focusable="false"
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                />
                              </svg>
                            </span>
                            <span
                              class="MuiTouchRipple-root"
                            />
                          </button>
                          <button
                            class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                            id="tour-last-step-btn"
                            tabindex="0"
                            type="button"
                          >
                            <span
                              class="MuiButton-label"
                            >
                              Start Using Romi
                            </span>
                            <span
                              class="MuiTouchRipple-root"
                            />
                          </button>
                        </div>
                      </div>
                      <span
                        class="sc-EHOje doXVdu"
                        data-tour-elem="badge"
                      >
                        12 of 12
                      </span>
                      <button
                        class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                      >
                        <svg
                          viewBox="0 0 9.1 9.1"
                        >
                          <path
                            d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                            fill="currentColor"
                          />
                        </svg>
                      </button>
                    </div>
                  </div>
                }
                onActivation={[Function]}
                onDeactivation={[Function]}
                persistentFocus={false}
                returnFocus={[Function]}
                shards={Array []}
                sideCar={
                  Object {
                    "assignMedium": [Function],
                    "assignSyncMedium": [Function],
                    "options": Object {
                      "async": true,
                      "ssr": false,
                    },
                    "read": [Function],
                    "useMedium": [Function],
                  }
                }
              />
            </SideEffect(FocusWatcher)>
            <div
              data-focus-lock-disabled={false}
              onBlur={[Function]}
              onFocus={[Function]}
            >
              <styled.div
                accentColor="#3f51b5"
                className="reactour__helper reactour__helper--is-open"
                current={10}
                defaultStyles={true}
                helperHeight={0}
                helperPosition="center"
                helperWidth={0}
                padding={10}
                role="dialog"
                rounded={5}
                style={
                  Object {
                    "backgroundColor": "#7986cb",
                    "borderRadius": "5px",
                    "color": "#fff",
                  }
                }
                tabIndex={-1}
                targetBottom={393}
                targetHeight={0}
                targetLeft={512}
                targetRight={521}
                targetTop={778}
                targetWidth={0}
                windowHeight={768}
                windowWidth={1024}
              >
                <StyledComponent
                  accentColor="#3f51b5"
                  className="reactour__helper reactour__helper--is-open"
                  current={10}
                  defaultStyles={true}
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-ifAKCX",
                        "isStatic": false,
                        "lastClassName": "jBzNhS",
                        "rules": Array [
                          "
  --reactour-accent: ",
                          [Function],
                          ";
  ",
                          [Function],
                          "
  position: fixed;
  transition: transform 0.3s;
  top: 0;
  left: 0;
  z-index: 1000000;

  transform: ",
                          [Function],
                          ";
",
                        ],
                      },
                      "displayName": "styled.div",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-ifAKCX",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={
                    Object {
                      "current": <div
                        class="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                        role="dialog"
                        style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                        tabindex="-1"
                      >
                        <div
                          class="MuiBox-root MuiBox-root-37"
                          id="stepNode"
                        >
                          <h6
                            class="MuiTypography-root MuiTypography-h6"
                          >
                            Finally, Trajectory configurations can be changed using the options available. Look out for new features ahead!
                          </h6>
                          <div
                            class="MuiBox-root MuiBox-root-39"
                          >
                            <button
                              class="MuiButtonBase-root MuiIconButton-root"
                              id="tour-back-btn"
                              tabindex="0"
                              type="button"
                            >
                              <span
                                class="MuiIconButton-label"
                              >
                                <svg
                                  aria-hidden="true"
                                  class="MuiSvgIcon-root makeStyles-navigation-38"
                                  focusable="false"
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                  />
                                </svg>
                              </span>
                              <span
                                class="MuiTouchRipple-root"
                              />
                            </button>
                            <button
                              class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                              id="tour-last-step-btn"
                              tabindex="0"
                              type="button"
                            >
                              <span
                                class="MuiButton-label"
                              >
                                Start Using Romi
                              </span>
                              <span
                                class="MuiTouchRipple-root"
                              />
                            </button>
                          </div>
                        </div>
                        <span
                          class="sc-EHOje doXVdu"
                          data-tour-elem="badge"
                        >
                          12 of 12
                        </span>
                        <button
                          class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                        >
                          <svg
                            viewBox="0 0 9.1 9.1"
                          >
                            <path
                              d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                              fill="currentColor"
                            />
                          </svg>
                        </button>
                      </div>,
                    }
                  }
                  helperHeight={0}
                  helperPosition="center"
                  helperWidth={0}
                  padding={10}
                  role="dialog"
                  rounded={5}
                  style={
                    Object {
                      "backgroundColor": "#7986cb",
                      "borderRadius": "5px",
                      "color": "#fff",
                    }
                  }
                  tabIndex={-1}
                  targetBottom={393}
                  targetHeight={0}
                  targetLeft={512}
                  targetRight={521}
                  targetTop={778}
                  targetWidth={0}
                  windowHeight={768}
                  windowWidth={1024}
                >
                  <div
                    className="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                    role="dialog"
                    style={
                      Object {
                        "backgroundColor": "#7986cb",
                        "borderRadius": "5px",
                        "color": "#fff",
                      }
                    }
                    tabIndex={-1}
                  >
                    <Styled(MuiBox)
                      id="stepNode"
                    >
                      <div
                        className="MuiBox-root MuiBox-root-37"
                        id="stepNode"
                      >
                        <WithStyles(ForwardRef(Typography))
                          variant="h6"
                        >
                          <ForwardRef(Typography)
                            classes={
                              Object {
                                "alignCenter": "MuiTypography-alignCenter",
                                "alignJustify": "MuiTypography-alignJustify",
                                "alignLeft": "MuiTypography-alignLeft",
                                "alignRight": "MuiTypography-alignRight",
                                "body1": "MuiTypography-body1",
                                "body2": "MuiTypography-body2",
                                "button": "MuiTypography-button",
                                "caption": "MuiTypography-caption",
                                "colorError": "MuiTypography-colorError",
                                "colorInherit": "MuiTypography-colorInherit",
                                "colorPrimary": "MuiTypography-colorPrimary",
                                "colorSecondary": "MuiTypography-colorSecondary",
                                "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                "displayBlock": "MuiTypography-displayBlock",
                                "displayInline": "MuiTypography-displayInline",
                                "gutterBottom": "MuiTypography-gutterBottom",
                                "h1": "MuiTypography-h1",
                                "h2": "MuiTypography-h2",
                                "h3": "MuiTypography-h3",
                                "h4": "MuiTypography-h4",
                                "h5": "MuiTypography-h5",
                                "h6": "MuiTypography-h6",
                                "noWrap": "MuiTypography-noWrap",
                                "overline": "MuiTypography-overline",
                                "paragraph": "MuiTypography-paragraph",
                                "root": "MuiTypography-root",
                                "srOnly": "MuiTypography-srOnly",
                                "subtitle1": "MuiTypography-subtitle1",
                                "subtitle2": "MuiTypography-subtitle2",
                              }
                            }
                            variant="h6"
                          >
                            <h6
                              className="MuiTypography-root MuiTypography-h6"
                            >
                              The Settings Button opens up the drawer for different dashboard settings.
                            </h6>
                          </ForwardRef(Typography)>
                        </WithStyles(ForwardRef(Typography))>
                        <Memo()
                          goTo={[Function]}
                          handleBackClick={[Function]}
                          handleNextClick={[Function]}
                          step={11}
                        >
                          <Styled(MuiBox)>
                            <div
                              className="MuiBox-root MuiBox-root-39"
                            >
                              <WithStyles(ForwardRef(IconButton))
                                id="tour-back-btn"
                                onClick={[Function]}
                              >
                                <ForwardRef(IconButton)
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit",
                                      "colorPrimary": "MuiIconButton-colorPrimary",
                                      "colorSecondary": "MuiIconButton-colorSecondary",
                                      "disabled": "Mui-disabled",
                                      "edgeEnd": "MuiIconButton-edgeEnd",
                                      "edgeStart": "MuiIconButton-edgeStart",
                                      "label": "MuiIconButton-label",
                                      "root": "MuiIconButton-root",
                                      "sizeSmall": "MuiIconButton-sizeSmall",
                                    }
                                  }
                                  id="tour-back-btn"
                                  onClick={[Function]}
                                >
                                  <WithStyles(ForwardRef(ButtonBase))
                                    centerRipple={true}
                                    className="MuiIconButton-root"
                                    disabled={false}
                                    focusRipple={true}
                                    id="tour-back-btn"
                                    onClick={[Function]}
                                  >
                                    <ForwardRef(ButtonBase)
                                      centerRipple={true}
                                      className="MuiIconButton-root"
                                      classes={
                                        Object {
                                          "disabled": "Mui-disabled",
                                          "focusVisible": "Mui-focusVisible",
                                          "root": "MuiButtonBase-root",
                                        }
                                      }
                                      disabled={false}
                                      focusRipple={true}
                                      id="tour-back-btn"
                                      onClick={[Function]}
                                    >
                                      <button
                                        className="MuiButtonBase-root MuiIconButton-root"
                                        disabled={false}
                                        id="tour-back-btn"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragLeave={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex={0}
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label"
                                        >
                                          <ForwardRef
                                            className="makeStyles-navigation-38"
                                          >
                                            <WithStyles(ForwardRef(SvgIcon))
                                              className="makeStyles-navigation-38"
                                            >
                                              <ForwardRef(SvgIcon)
                                                className="makeStyles-navigation-38"
                                                classes={
                                                  Object {
                                                    "colorAction": "MuiSvgIcon-colorAction",
                                                    "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                    "colorError": "MuiSvgIcon-colorError",
                                                    "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                    "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                    "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                    "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                    "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                    "root": "MuiSvgIcon-root",
                                                  }
                                                }
                                              >
                                                <svg
                                                  aria-hidden={true}
                                                  className="MuiSvgIcon-root makeStyles-navigation-38"
                                                  focusable="false"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <path
                                                    d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                                  />
                                                </svg>
                                              </ForwardRef(SvgIcon)>
                                            </WithStyles(ForwardRef(SvgIcon))>
                                          </ForwardRef>
                                        </span>
                                        <WithStyles(memo)
                                          center={true}
                                        >
                                          <ForwardRef(TouchRipple)
                                            center={true}
                                            classes={
                                              Object {
                                                "child": "MuiTouchRipple-child",
                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                "ripple": "MuiTouchRipple-ripple",
                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                "root": "MuiTouchRipple-root",
                                              }
                                            }
                                          >
                                            <span
                                              className="MuiTouchRipple-root"
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                component={null}
                                                exit={true}
                                              />
                                            </span>
                                          </ForwardRef(TouchRipple)>
                                        </WithStyles(memo)>
                                      </button>
                                    </ForwardRef(ButtonBase)>
                                  </WithStyles(ForwardRef(ButtonBase))>
                                </ForwardRef(IconButton)>
                              </WithStyles(ForwardRef(IconButton))>
                              <WithStyles(ForwardRef(IconButton))
                                id="tour-next-btn"
                                onClick={[Function]}
                              >
                                <ForwardRef(IconButton)
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit",
                                      "colorPrimary": "MuiIconButton-colorPrimary",
                                      "colorSecondary": "MuiIconButton-colorSecondary",
                                      "disabled": "Mui-disabled",
                                      "edgeEnd": "MuiIconButton-edgeEnd",
                                      "edgeStart": "MuiIconButton-edgeStart",
                                      "label": "MuiIconButton-label",
                                      "root": "MuiIconButton-root",
                                      "sizeSmall": "MuiIconButton-sizeSmall",
                                    }
                                  }
                                  id="tour-next-btn"
                                  onClick={[Function]}
                                >
                                  <WithStyles(ForwardRef(ButtonBase))
                                    centerRipple={true}
                                    className="MuiIconButton-root"
                                    disabled={false}
                                    focusRipple={true}
                                    id="tour-next-btn"
                                    onClick={[Function]}
                                  >
                                    <ForwardRef(ButtonBase)
                                      centerRipple={true}
                                      className="MuiIconButton-root"
                                      classes={
                                        Object {
                                          "disabled": "Mui-disabled",
                                          "focusVisible": "Mui-focusVisible",
                                          "root": "MuiButtonBase-root",
                                        }
                                      }
                                      disabled={false}
                                      focusRipple={true}
                                      id="tour-next-btn"
                                      onClick={[Function]}
                                    >
                                      <button
                                        className="MuiButtonBase-root MuiIconButton-root"
                                        disabled={false}
                                        id="tour-next-btn"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragLeave={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex={0}
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label"
                                        >
                                          <ForwardRef
                                            className="makeStyles-navigation-38"
                                          >
                                            <WithStyles(ForwardRef(SvgIcon))
                                              className="makeStyles-navigation-38"
                                            >
                                              <ForwardRef(SvgIcon)
                                                className="makeStyles-navigation-38"
                                                classes={
                                                  Object {
                                                    "colorAction": "MuiSvgIcon-colorAction",
                                                    "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                    "colorError": "MuiSvgIcon-colorError",
                                                    "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                    "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                    "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                    "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                    "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                    "root": "MuiSvgIcon-root",
                                                  }
                                                }
                                              >
                                                <svg
                                                  aria-hidden={true}
                                                  className="MuiSvgIcon-root makeStyles-navigation-38"
                                                  focusable="false"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <path
                                                    d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                                  />
                                                </svg>
                                              </ForwardRef(SvgIcon)>
                                            </WithStyles(ForwardRef(SvgIcon))>
                                          </ForwardRef>
                                        </span>
                                        <WithStyles(memo)
                                          center={true}
                                        >
                                          <ForwardRef(TouchRipple)
                                            center={true}
                                            classes={
                                              Object {
                                                "child": "MuiTouchRipple-child",
                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                "ripple": "MuiTouchRipple-ripple",
                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                "root": "MuiTouchRipple-root",
                                              }
                                            }
                                          >
                                            <span
                                              className="MuiTouchRipple-root"
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                component={null}
                                                exit={true}
                                              />
                                            </span>
                                          </ForwardRef(TouchRipple)>
                                        </WithStyles(memo)>
                                      </button>
                                    </ForwardRef(ButtonBase)>
                                  </WithStyles(ForwardRef(ButtonBase))>
                                </ForwardRef(IconButton)>
                              </WithStyles(ForwardRef(IconButton))>
                            </div>
                          </Styled(MuiBox)>
                        </Memo()>
                      </div>
                    </Styled(MuiBox)>
                    <styled.span
                      accentColor="#3f51b5"
                      data-tour-elem="badge"
                    >
                      <StyledComponent
                        accentColor="#3f51b5"
                        data-tour-elem="badge"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-EHOje",
                              "isStatic": false,
                              "lastClassName": "doXVdu",
                              "rules": Array [
                                "
  position: absolute;
  font-family: monospace;
  background: var(--reactour-accent);
  background: ",
                                [Function],
                                ";
  height: 1.875em;
  line-height: 2;
  padding-left: 0.8125em;
  padding-right: 0.8125em;
  font-size: 1em;
  border-radius: 1.625em;
  color: white;
  text-align: center;
  box-shadow: 0 0.25em 0.5em rgba(0, 0, 0, 0.3);
  top: -0.8125em;
  left: -0.8125em;
",
                              ],
                            },
                            "displayName": "styled.span",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-EHOje",
                            "target": "span",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <span
                          className="sc-EHOje doXVdu"
                          data-tour-elem="badge"
                        >
                          11 of 12
                        </span>
                      </StyledComponent>
                    </styled.span>
                    <Styled(Close)
                      className="reactour__close"
                      onClick={[Function]}
                    >
                      <StyledComponent
                        className="reactour__close"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-bxivhb",
                              "isStatic": false,
                              "lastClassName": "eTpeTG",
                              "rules": Array [
                                "
  position: absolute;
  top: 22px;
  right: 22px;
  width: 9px;
  height: 9px;
  color: #5e5e5e;
  &:hover {
    color: #000;
  }
",
                              ],
                            },
                            "displayName": "Styled(Close)",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-bxivhb",
                            "target": [Function],
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        onClick={[Function]}
                      >
                        <Close
                          className="sc-bxivhb eTpeTG reactour__close"
                          onClick={[Function]}
                        >
                          <styled.button
                            className="sc-bxivhb eTpeTG reactour__close"
                            onClick={[Function]}
                          >
                            <StyledComponent
                              className="sc-bxivhb eTpeTG reactour__close"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-bdVaJa",
                                    "isStatic": false,
                                    "lastClassName": "cYQqRL",
                                    "rules": Array [
                                      "
  display: block;
  padding: 0;
  border: 0;
  background: none;
  font-size: 0;
  cursor: ",
                                      [Function],
                                      ";
",
                                    ],
                                  },
                                  "displayName": "styled.button",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-bdVaJa",
                                  "target": "button",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              onClick={[Function]}
                            >
                              <button
                                className="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                                onClick={[Function]}
                              >
                                <svg
                                  viewBox="0 0 9.1 9.1"
                                >
                                  <path
                                    d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                                    fill="currentColor"
                                  />
                                </svg>
                              </button>
                            </StyledComponent>
                          </styled.button>
                        </Close>
                      </StyledComponent>
                    </Styled(Close)>
                  </div>
                </StyledComponent>
              </styled.div>
            </div>
            <div
              data-focus-guard={true}
              style={
                Object {
                  "height": "0px",
                  "left": "1px",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "fixed",
                  "top": "1px",
                  "width": "1px",
                }
              }
              tabIndex={0}
            />
          </ForwardRef>
        </ForwardRef>
      </Portal>
    </Portal>
  </Tour>
</Memo()>
`;

exports[`Dashboard Tour renders without crashing 1`] = `
<Tour
  accentColor="#3f51b5"
  badgeContent={[Function]}
  closeWithMask={false}
  disableFocusLock={false}
  disableInteraction={false}
  disableKeyboardNavigation={
    Array [
      "right",
      "left",
    ]
  }
  isOpen={true}
  maskSpace={10}
  onRequestClose={[Function]}
  rounded={5}
  scrollDuration={1}
  showButtons={false}
  showCloseButton={true}
  showNavigation={false}
  showNavigationNumber={false}
  showNumber={true}
  startAt={0}
  steps={
    Array [
      Object {
        "action": [Function],
        "content": [Function],
        "selector": "",
        "style": Object {
          "backgroundColor": "#7986cb",
          "borderRadius": "5px",
          "color": "#fff",
        },
      },
      Object {
        "action": [Function],
        "content": [Function],
        "selector": "[class=\\"leaflet-control-zoom leaflet-bar leaflet-control\\"]",
        "style": Object {
          "backgroundColor": "#7986cb",
          "borderRadius": "5px",
          "color": "#fff",
        },
      },
      Object {
        "action": [Function],
        "content": [Function],
        "selector": "[class= \\"leaflet-control-layers leaflet-control\\"]",
        "style": Object {
          "backgroundColor": "#7986cb",
          "borderRadius": "5px",
          "color": "#fff",
        },
      },
      Object {
        "action": [Function],
        "content": [Function],
        "selector": "[class=\\"leaflet-image-layer leaflet-zoom-animated\\"]",
        "style": Object {
          "backgroundColor": "#7986cb",
          "borderRadius": "5px",
          "color": "#fff",
        },
      },
      Object {
        "action": undefined,
        "content": [Function],
        "selector": "[id=\\"toggle-omnipanel-btn\\"]",
        "style": Object {
          "backgroundColor": "#7986cb",
          "borderRadius": "5px",
          "color": "#fff",
        },
      },
      Object {
        "action": undefined,
        "content": [Function],
        "selector": "[data-component=\\"MainMenu\\"]",
        "style": Object {
          "backgroundColor": "#7986cb",
          "borderRadius": "5px",
          "color": "#fff",
        },
      },
      Object {
        "action": undefined,
        "content": [Function],
        "selector": "[data-item=\\"Doors\\"]",
        "style": Object {
          "backgroundColor": "#7986cb",
          "borderRadius": "5px",
          "color": "#fff",
        },
      },
      Object {
        "action": undefined,
        "content": [Function],
        "selector": "[data-name=\\"main_door\\"]",
        "style": Object {
          "backgroundColor": "#7986cb",
          "borderRadius": "5px",
          "color": "#fff",
        },
      },
      Object {
        "action": undefined,
        "content": [Function],
        "selector": "[data-item= \\"Commands\\"]",
        "style": Object {
          "backgroundColor": "#7986cb",
          "borderRadius": "5px",
          "color": "#fff",
        },
      },
      Object {
        "action": undefined,
        "content": [Function],
        "selector": "[data-component=\\"LoopForm\\"]",
        "style": Object {
          "backgroundColor": "#7986cb",
          "borderRadius": "5px",
          "color": "#fff",
        },
      },
      Object {
        "action": undefined,
        "content": [Function],
        "selector": "[id=\\"show-settings-btn\\"]",
        "style": Object {
          "backgroundColor": "#7986cb",
          "borderRadius": "5px",
          "color": "#fff",
        },
      },
      Object {
        "action": undefined,
        "content": [Function],
        "selector": ".MuiDrawer-paper",
        "style": Object {
          "backgroundColor": "#7986cb",
          "borderRadius": "5px",
          "color": "#fff",
        },
      },
    ]
  }
  updateDelay={1}
/>
`;

exports[`Dashboard Tour renders zoom button step (2/12) 1`] = `
<Memo()
  tourProps={
    Object {
      "OmniPanelViewIndex": Object {
        "0": "MainMenu",
        "1": "Doors",
        "2": "Lifts",
        "3": "Robots",
        "4": "Dispensers",
        "5": "Commands",
        "6": "Negotiations",
        "Commands": 5,
        "Dispensers": 4,
        "Doors": 1,
        "Lifts": 2,
        "MainMenu": 0,
        "Negotiations": 6,
        "Robots": 3,
      },
      "doorSpotlight": Object {
        "value": "main_door",
      },
      "setDoorSpotlight": [MockFunction],
      "setTourSettingsAndOmniPanel": [MockFunction] {
        "calls": Array [
          Array [
            false,
            false,
            true,
          ],
          Array [
            false,
            false,
            true,
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
      "setTourShowOmniPanel": [MockFunction],
      "setTourState": [MockFunction],
      "tourState": true,
    }
  }
>
  <Tour
    accentColor="#3f51b5"
    badgeContent={[Function]}
    closeWithMask={false}
    disableFocusLock={false}
    disableInteraction={false}
    disableKeyboardNavigation={
      Array [
        "right",
        "left",
      ]
    }
    isOpen={true}
    maskSpace={10}
    onRequestClose={[Function]}
    rounded={5}
    scrollDuration={1}
    showButtons={false}
    showCloseButton={true}
    showNavigation={false}
    showNavigationNumber={false}
    showNumber={true}
    startAt={0}
    steps={
      Array [
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "[class=\\"leaflet-control-zoom leaflet-bar leaflet-control\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "[class= \\"leaflet-control-layers leaflet-control\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": [Function],
          "content": [Function],
          "selector": "[class=\\"leaflet-image-layer leaflet-zoom-animated\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[id=\\"toggle-omnipanel-btn\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-component=\\"MainMenu\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-item=\\"Doors\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-name=\\"main_door\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-item= \\"Commands\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[data-component=\\"LoopForm\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": "[id=\\"show-settings-btn\\"]",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
        Object {
          "action": undefined,
          "content": [Function],
          "selector": ".MuiDrawer-paper",
          "style": Object {
            "backgroundColor": "#7986cb",
            "borderRadius": "5px",
            "color": "#fff",
          },
        },
      ]
    }
    updateDelay={1}
  >
    <Portal>
      <Portal
        containerInfo={
          <div
            id="___reactour"
          >
            <div
              class="sc-dnqmqq kWwJhA"
            >
              <svg
                height="768"
                width="1024"
                xmlns="http://www.w3.org/2000/svg"
              >
                <defs>
                  <mask
                    id="mask-main"
                  >
                    <rect
                      fill="white"
                      height="768"
                      width="1024"
                      x="0"
                      y="0"
                    />
                    <rect
                      fill="black"
                      height="20"
                      width="20"
                      x="502"
                      y="768"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="501"
                      y="767"
                    />
                    <circle
                      cx="507"
                      cy="773"
                      fill="black"
                      r="5"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="518"
                      y="767"
                    />
                    <circle
                      cx="517"
                      cy="773"
                      fill="black"
                      r="5"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="501"
                      y="784"
                    />
                    <circle
                      cx="507"
                      cy="783"
                      fill="black"
                      r="5"
                    />
                    <rect
                      fill="white"
                      height="5"
                      width="5"
                      x="518"
                      y="784"
                    />
                    <circle
                      cx="517"
                      cy="783"
                      fill="black "
                      r="5"
                    />
                  </mask>
                  <clippath
                    id="clip-path"
                  >
                    <rect
                      height="768"
                      width="1024"
                      x="0"
                      y="0"
                    />
                    <rect
                      height="20"
                      width="502"
                      x="0"
                      y="768"
                    />
                    <rect
                      height="20"
                      width="522"
                      x="522"
                      y="768"
                    />
                    <rect
                      height="0"
                      width="1024"
                      x="0"
                      y="788"
                    />
                  </clippath>
                </defs>
                <rect
                  fill="currentColor"
                  height="768"
                  mask="url(#mask-main)"
                  width="1024"
                  x="0"
                  y="0"
                />
                <rect
                  clip-path="url(#clip-path)"
                  fill="currentColor"
                  height="768"
                  pointer-events="auto"
                  width="1024"
                  x="0"
                  y="0"
                />
                <rect
                  class="reactour__mask--disable-interaction undefined"
                  display="none"
                  fill="transparent"
                  height="20"
                  pointer-events="auto"
                  width="20"
                  x="502"
                  y="768"
                />
              </svg>
            </div>
            <div
              data-focus-guard="true"
              style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
              tabindex="0"
            />
            <div
              data-focus-guard="true"
              style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
              tabindex="1"
            />
            <div
              data-focus-lock-disabled="false"
            >
              <div
                class="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                role="dialog"
                style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                tabindex="-1"
              >
                <div
                  class="MuiBox-root MuiBox-root-7"
                  id="stepNode"
                >
                  <h6
                    class="MuiTypography-root MuiTypography-h6"
                  >
                    Click on the zoom buttons to change the view of the floor plan. Alternatively, the scroll button on your mouse would work too!
                  </h6>
                  <div
                    class="MuiBox-root MuiBox-root-9"
                  >
                    <button
                      class="MuiButtonBase-root MuiIconButton-root"
                      id="tour-back-btn"
                      tabindex="0"
                      type="button"
                    >
                      <span
                        class="MuiIconButton-label"
                      >
                        <svg
                          aria-hidden="true"
                          class="MuiSvgIcon-root makeStyles-navigation-8"
                          focusable="false"
                          viewBox="0 0 24 24"
                        >
                          <path
                            d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                          />
                        </svg>
                      </span>
                      <span
                        class="MuiTouchRipple-root"
                      />
                    </button>
                    <button
                      class="MuiButtonBase-root MuiIconButton-root"
                      id="tour-next-btn"
                      tabindex="0"
                      type="button"
                    >
                      <span
                        class="MuiIconButton-label"
                      >
                        <svg
                          aria-hidden="true"
                          class="MuiSvgIcon-root makeStyles-navigation-8"
                          focusable="false"
                          viewBox="0 0 24 24"
                        >
                          <path
                            d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                          />
                        </svg>
                      </span>
                      <span
                        class="MuiTouchRipple-root"
                      />
                    </button>
                  </div>
                </div>
                <span
                  class="sc-EHOje doXVdu"
                  data-tour-elem="badge"
                >
                  2 of 12
                </span>
                <button
                  class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                >
                  <svg
                    viewBox="0 0 9.1 9.1"
                  >
                    <path
                      d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                      fill="currentColor"
                    />
                  </svg>
                </button>
              </div>
            </div>
            <div
              data-focus-guard="true"
              style="width: 1px; height: 0px; padding: 0px; overflow: hidden; position: fixed; top: 1px; left: 1px;"
              tabindex="0"
            />
          </div>
        }
      >
        <GlobalStyleComponent />
        <ReactourResizeObserver
          refresh={[Function]}
          step={
            Object {
              "action": [Function],
              "content": [Function],
              "selector": "",
              "style": Object {
                "backgroundColor": "#7986cb",
                "borderRadius": "5px",
                "color": "#fff",
              },
            }
          }
        />
        <ReactourMutationObserver
          refresh={[Function]}
          step={
            Object {
              "action": [Function],
              "content": [Function],
              "selector": "",
              "style": Object {
                "backgroundColor": "#7986cb",
                "borderRadius": "5px",
                "color": "#fff",
              },
            }
          }
        />
        <SvgMask
          disableInteraction={false}
          disableInteractionClassName="reactour__mask--disable-interaction undefined"
          forwardRef={[Function]}
          onClick={[Function]}
          padding={10}
          rounded={5}
          targetHeight={0}
          targetLeft={0}
          targetTop={0}
          targetWidth={0}
          windowHeight={0}
          windowWidth={0}
        >
          <styled.div
            onClick={[Function]}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-dnqmqq",
                    "isStatic": false,
                    "lastClassName": "kWwJhA",
                    "rules": Array [
                      "
  opacity: ",
                      [Function],
                      ";
  color: ",
                      [Function],
                      ";
  width: 100%;
  left: 0;
  top: 0;
  height: 100%;
  position: fixed;
  z-index: 99999;
  pointer-events: none;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-dnqmqq",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
            >
              <div
                className="sc-dnqmqq kWwJhA"
                onClick={[Function]}
              >
                <svg
                  height={0}
                  width={0}
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <defs>
                    <mask
                      id="mask-main"
                    >
                      <rect
                        fill="white"
                        height={0}
                        width={0}
                        x={0}
                        y={0}
                      />
                      <rect
                        fill="black"
                        height={20}
                        width={20}
                        x={0}
                        y={0}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={-1}
                        y={-1}
                      />
                      <circle
                        cx={5}
                        cy={5}
                        fill="black"
                        r={5}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={16}
                        y={-1}
                      />
                      <circle
                        cx={15}
                        cy={5}
                        fill="black"
                        r={5}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={-1}
                        y={16}
                      />
                      <circle
                        cx={5}
                        cy={15}
                        fill="black"
                        r={5}
                      />
                      <rect
                        fill="white"
                        height={5}
                        width={5}
                        x={16}
                        y={16}
                      />
                      <circle
                        cx={15}
                        cy={15}
                        fill="black "
                        r={5}
                      />
                    </mask>
                    <clipPath
                      id="clip-path"
                    >
                      <rect
                        height={0}
                        width={0}
                        x={0}
                        y={0}
                      />
                      <rect
                        height={20}
                        width={0}
                        x={0}
                        y={0}
                      />
                      <rect
                        height={20}
                        width={0}
                        x={10}
                        y={0}
                      />
                      <rect
                        height={0}
                        width={0}
                        x={0}
                        y={10}
                      />
                    </clipPath>
                  </defs>
                  <rect
                    fill="currentColor"
                    height={0}
                    mask="url(#mask-main)"
                    width={0}
                    x={0}
                    y={0}
                  />
                  <rect
                    clipPath="url(#clip-path)"
                    fill="currentColor"
                    height={0}
                    pointerEvents="auto"
                    width={0}
                    x={0}
                    y={0}
                  />
                  <rect
                    className="reactour__mask--disable-interaction undefined"
                    display="none"
                    fill="transparent"
                    height={20}
                    pointerEvents="auto"
                    width={20}
                    x={0}
                    y={0}
                  />
                </svg>
              </div>
            </StyledComponent>
          </styled.div>
        </SvgMask>
        <ForwardRef
          disabled={false}
        >
          <ForwardRef
            as="div"
            autoFocus={true}
            disabled={false}
            lockProps={Object {}}
            noFocusGuards={false}
            persistentFocus={false}
            returnFocus={false}
            sideCar={[Function]}
          >
            <div
              data-focus-guard={true}
              key="guard-first"
              style={
                Object {
                  "height": "0px",
                  "left": "1px",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "fixed",
                  "top": "1px",
                  "width": "1px",
                }
              }
              tabIndex={0}
            />
            <div
              data-focus-guard={true}
              key="guard-nearest"
              style={
                Object {
                  "height": "0px",
                  "left": "1px",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "fixed",
                  "top": "1px",
                  "width": "1px",
                }
              }
              tabIndex={1}
            />
            <SideEffect(FocusWatcher)
              autoFocus={true}
              disabled={false}
              id={Object {}}
              observed={
                <div
                  data-focus-lock-disabled="false"
                >
                  <div
                    class="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                    role="dialog"
                    style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                    tabindex="-1"
                  >
                    <div
                      class="MuiBox-root MuiBox-root-7"
                      id="stepNode"
                    >
                      <h6
                        class="MuiTypography-root MuiTypography-h6"
                      >
                        Click on the zoom buttons to change the view of the floor plan. Alternatively, the scroll button on your mouse would work too!
                      </h6>
                      <div
                        class="MuiBox-root MuiBox-root-9"
                      >
                        <button
                          class="MuiButtonBase-root MuiIconButton-root"
                          id="tour-back-btn"
                          tabindex="0"
                          type="button"
                        >
                          <span
                            class="MuiIconButton-label"
                          >
                            <svg
                              aria-hidden="true"
                              class="MuiSvgIcon-root makeStyles-navigation-8"
                              focusable="false"
                              viewBox="0 0 24 24"
                            >
                              <path
                                d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                              />
                            </svg>
                          </span>
                          <span
                            class="MuiTouchRipple-root"
                          />
                        </button>
                        <button
                          class="MuiButtonBase-root MuiIconButton-root"
                          id="tour-next-btn"
                          tabindex="0"
                          type="button"
                        >
                          <span
                            class="MuiIconButton-label"
                          >
                            <svg
                              aria-hidden="true"
                              class="MuiSvgIcon-root makeStyles-navigation-8"
                              focusable="false"
                              viewBox="0 0 24 24"
                            >
                              <path
                                d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                              />
                            </svg>
                          </span>
                          <span
                            class="MuiTouchRipple-root"
                          />
                        </button>
                      </div>
                    </div>
                    <span
                      class="sc-EHOje doXVdu"
                      data-tour-elem="badge"
                    >
                      2 of 12
                    </span>
                    <button
                      class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                    >
                      <svg
                        viewBox="0 0 9.1 9.1"
                      >
                        <path
                          d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                          fill="currentColor"
                        />
                      </svg>
                    </button>
                  </div>
                </div>
              }
              onActivation={[Function]}
              onDeactivation={[Function]}
              persistentFocus={false}
              returnFocus={[Function]}
              shards={Array []}
              sideCar={
                Object {
                  "assignMedium": [Function],
                  "assignSyncMedium": [Function],
                  "options": Object {
                    "async": true,
                    "ssr": false,
                  },
                  "read": [Function],
                  "useMedium": [Function],
                }
              }
            >
              <FocusWatcher
                autoFocus={true}
                disabled={false}
                id={Object {}}
                observed={
                  <div
                    data-focus-lock-disabled="false"
                  >
                    <div
                      class="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                      role="dialog"
                      style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                      tabindex="-1"
                    >
                      <div
                        class="MuiBox-root MuiBox-root-7"
                        id="stepNode"
                      >
                        <h6
                          class="MuiTypography-root MuiTypography-h6"
                        >
                          Click on the zoom buttons to change the view of the floor plan. Alternatively, the scroll button on your mouse would work too!
                        </h6>
                        <div
                          class="MuiBox-root MuiBox-root-9"
                        >
                          <button
                            class="MuiButtonBase-root MuiIconButton-root"
                            id="tour-back-btn"
                            tabindex="0"
                            type="button"
                          >
                            <span
                              class="MuiIconButton-label"
                            >
                              <svg
                                aria-hidden="true"
                                class="MuiSvgIcon-root makeStyles-navigation-8"
                                focusable="false"
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                />
                              </svg>
                            </span>
                            <span
                              class="MuiTouchRipple-root"
                            />
                          </button>
                          <button
                            class="MuiButtonBase-root MuiIconButton-root"
                            id="tour-next-btn"
                            tabindex="0"
                            type="button"
                          >
                            <span
                              class="MuiIconButton-label"
                            >
                              <svg
                                aria-hidden="true"
                                class="MuiSvgIcon-root makeStyles-navigation-8"
                                focusable="false"
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                />
                              </svg>
                            </span>
                            <span
                              class="MuiTouchRipple-root"
                            />
                          </button>
                        </div>
                      </div>
                      <span
                        class="sc-EHOje doXVdu"
                        data-tour-elem="badge"
                      >
                        2 of 12
                      </span>
                      <button
                        class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                      >
                        <svg
                          viewBox="0 0 9.1 9.1"
                        >
                          <path
                            d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                            fill="currentColor"
                          />
                        </svg>
                      </button>
                    </div>
                  </div>
                }
                onActivation={[Function]}
                onDeactivation={[Function]}
                persistentFocus={false}
                returnFocus={[Function]}
                shards={Array []}
                sideCar={
                  Object {
                    "assignMedium": [Function],
                    "assignSyncMedium": [Function],
                    "options": Object {
                      "async": true,
                      "ssr": false,
                    },
                    "read": [Function],
                    "useMedium": [Function],
                  }
                }
              />
            </SideEffect(FocusWatcher)>
            <div
              data-focus-lock-disabled={false}
              onBlur={[Function]}
              onFocus={[Function]}
            >
              <styled.div
                accentColor="#3f51b5"
                className="reactour__helper reactour__helper--is-open"
                current={0}
                defaultStyles={true}
                padding={10}
                role="dialog"
                rounded={5}
                style={
                  Object {
                    "backgroundColor": "#7986cb",
                    "borderRadius": "5px",
                    "color": "#fff",
                  }
                }
                tabIndex={-1}
                targetBottom={0}
                targetHeight={0}
                targetLeft={0}
                targetRight={0}
                targetTop={0}
                targetWidth={0}
                windowHeight={0}
                windowWidth={0}
              >
                <StyledComponent
                  accentColor="#3f51b5"
                  className="reactour__helper reactour__helper--is-open"
                  current={0}
                  defaultStyles={true}
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-ifAKCX",
                        "isStatic": false,
                        "lastClassName": "jBzNhS",
                        "rules": Array [
                          "
  --reactour-accent: ",
                          [Function],
                          ";
  ",
                          [Function],
                          "
  position: fixed;
  transition: transform 0.3s;
  top: 0;
  left: 0;
  z-index: 1000000;

  transform: ",
                          [Function],
                          ";
",
                        ],
                      },
                      "displayName": "styled.div",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-ifAKCX",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={
                    Object {
                      "current": <div
                        class="sc-ifAKCX jBzNhS reactour__helper reactour__helper--is-open"
                        role="dialog"
                        style="background-color: rgb(121, 134, 203); color: rgb(255, 255, 255); border-radius: 5px;"
                        tabindex="-1"
                      >
                        <div
                          class="MuiBox-root MuiBox-root-7"
                          id="stepNode"
                        >
                          <h6
                            class="MuiTypography-root MuiTypography-h6"
                          >
                            Click on the zoom buttons to change the view of the floor plan. Alternatively, the scroll button on your mouse would work too!
                          </h6>
                          <div
                            class="MuiBox-root MuiBox-root-9"
                          >
                            <button
                              class="MuiButtonBase-root MuiIconButton-root"
                              id="tour-back-btn"
                              tabindex="0"
                              type="button"
                            >
                              <span
                                class="MuiIconButton-label"
                              >
                                <svg
                                  aria-hidden="true"
                                  class="MuiSvgIcon-root makeStyles-navigation-8"
                                  focusable="false"
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                  />
                                </svg>
                              </span>
                              <span
                                class="MuiTouchRipple-root"
                              />
                            </button>
                            <button
                              class="MuiButtonBase-root MuiIconButton-root"
                              id="tour-next-btn"
                              tabindex="0"
                              type="button"
                            >
                              <span
                                class="MuiIconButton-label"
                              >
                                <svg
                                  aria-hidden="true"
                                  class="MuiSvgIcon-root makeStyles-navigation-8"
                                  focusable="false"
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                  />
                                </svg>
                              </span>
                              <span
                                class="MuiTouchRipple-root"
                              />
                            </button>
                          </div>
                        </div>
                        <span
                          class="sc-EHOje doXVdu"
                          data-tour-elem="badge"
                        >
                          2 of 12
                        </span>
                        <button
                          class="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                        >
                          <svg
                            viewBox="0 0 9.1 9.1"
                          >
                            <path
                              d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                              fill="currentColor"
                            />
                          </svg>
                        </button>
                      </div>,
                    }
                  }
                  padding={10}
                  role="dialog"
                  rounded={5}
                  style={
                    Object {
                      "backgroundColor": "#7986cb",
                      "borderRadius": "5px",
                      "color": "#fff",
                    }
                  }
                  tabIndex={-1}
                  targetBottom={0}
                  targetHeight={0}
                  targetLeft={0}
                  targetRight={0}
                  targetTop={0}
                  targetWidth={0}
                  windowHeight={0}
                  windowWidth={0}
                >
                  <div
                    className="sc-ifAKCX dYTwIk reactour__helper reactour__helper--is-open"
                    role="dialog"
                    style={
                      Object {
                        "backgroundColor": "#7986cb",
                        "borderRadius": "5px",
                        "color": "#fff",
                      }
                    }
                    tabIndex={-1}
                  >
                    <Styled(MuiBox)
                      id="stepNode"
                    >
                      <div
                        className="MuiBox-root MuiBox-root-7"
                        id="stepNode"
                      >
                        <WithStyles(ForwardRef(Typography))
                          variant="h6"
                        >
                          <ForwardRef(Typography)
                            classes={
                              Object {
                                "alignCenter": "MuiTypography-alignCenter",
                                "alignJustify": "MuiTypography-alignJustify",
                                "alignLeft": "MuiTypography-alignLeft",
                                "alignRight": "MuiTypography-alignRight",
                                "body1": "MuiTypography-body1",
                                "body2": "MuiTypography-body2",
                                "button": "MuiTypography-button",
                                "caption": "MuiTypography-caption",
                                "colorError": "MuiTypography-colorError",
                                "colorInherit": "MuiTypography-colorInherit",
                                "colorPrimary": "MuiTypography-colorPrimary",
                                "colorSecondary": "MuiTypography-colorSecondary",
                                "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                "displayBlock": "MuiTypography-displayBlock",
                                "displayInline": "MuiTypography-displayInline",
                                "gutterBottom": "MuiTypography-gutterBottom",
                                "h1": "MuiTypography-h1",
                                "h2": "MuiTypography-h2",
                                "h3": "MuiTypography-h3",
                                "h4": "MuiTypography-h4",
                                "h5": "MuiTypography-h5",
                                "h6": "MuiTypography-h6",
                                "noWrap": "MuiTypography-noWrap",
                                "overline": "MuiTypography-overline",
                                "paragraph": "MuiTypography-paragraph",
                                "root": "MuiTypography-root",
                                "srOnly": "MuiTypography-srOnly",
                                "subtitle1": "MuiTypography-subtitle1",
                                "subtitle2": "MuiTypography-subtitle2",
                              }
                            }
                            variant="h6"
                          >
                            <h6
                              className="MuiTypography-root MuiTypography-h6"
                            >
                              Welcome to RoMi dashboard
                            </h6>
                          </ForwardRef(Typography)>
                        </WithStyles(ForwardRef(Typography))>
                        <Memo()
                          goTo={[Function]}
                          step={1}
                        >
                          <Styled(MuiBox)>
                            <div
                              className="MuiBox-root MuiBox-root-9"
                            >
                              <WithStyles(ForwardRef(IconButton))
                                id="tour-next-btn"
                                onClick={[Function]}
                              >
                                <ForwardRef(IconButton)
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit",
                                      "colorPrimary": "MuiIconButton-colorPrimary",
                                      "colorSecondary": "MuiIconButton-colorSecondary",
                                      "disabled": "Mui-disabled",
                                      "edgeEnd": "MuiIconButton-edgeEnd",
                                      "edgeStart": "MuiIconButton-edgeStart",
                                      "label": "MuiIconButton-label",
                                      "root": "MuiIconButton-root",
                                      "sizeSmall": "MuiIconButton-sizeSmall",
                                    }
                                  }
                                  id="tour-next-btn"
                                  onClick={[Function]}
                                >
                                  <WithStyles(ForwardRef(ButtonBase))
                                    centerRipple={true}
                                    className="MuiIconButton-root"
                                    disabled={false}
                                    focusRipple={true}
                                    id="tour-next-btn"
                                    onClick={[Function]}
                                  >
                                    <ForwardRef(ButtonBase)
                                      centerRipple={true}
                                      className="MuiIconButton-root"
                                      classes={
                                        Object {
                                          "disabled": "Mui-disabled",
                                          "focusVisible": "Mui-focusVisible",
                                          "root": "MuiButtonBase-root",
                                        }
                                      }
                                      disabled={false}
                                      focusRipple={true}
                                      id="tour-next-btn"
                                      onClick={[Function]}
                                    >
                                      <button
                                        className="MuiButtonBase-root MuiIconButton-root"
                                        disabled={false}
                                        id="tour-next-btn"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragLeave={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex={0}
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label"
                                        >
                                          <ForwardRef
                                            className="makeStyles-navigation-8"
                                          >
                                            <WithStyles(ForwardRef(SvgIcon))
                                              className="makeStyles-navigation-8"
                                            >
                                              <ForwardRef(SvgIcon)
                                                className="makeStyles-navigation-8"
                                                classes={
                                                  Object {
                                                    "colorAction": "MuiSvgIcon-colorAction",
                                                    "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                    "colorError": "MuiSvgIcon-colorError",
                                                    "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                    "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                    "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                    "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                    "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                    "root": "MuiSvgIcon-root",
                                                  }
                                                }
                                              >
                                                <svg
                                                  aria-hidden={true}
                                                  className="MuiSvgIcon-root makeStyles-navigation-8"
                                                  focusable="false"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <path
                                                    d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                                  />
                                                </svg>
                                              </ForwardRef(SvgIcon)>
                                            </WithStyles(ForwardRef(SvgIcon))>
                                          </ForwardRef>
                                        </span>
                                        <WithStyles(memo)
                                          center={true}
                                        >
                                          <ForwardRef(TouchRipple)
                                            center={true}
                                            classes={
                                              Object {
                                                "child": "MuiTouchRipple-child",
                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                "ripple": "MuiTouchRipple-ripple",
                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                "root": "MuiTouchRipple-root",
                                              }
                                            }
                                          >
                                            <span
                                              className="MuiTouchRipple-root"
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                component={null}
                                                exit={true}
                                              />
                                            </span>
                                          </ForwardRef(TouchRipple)>
                                        </WithStyles(memo)>
                                      </button>
                                    </ForwardRef(ButtonBase)>
                                  </WithStyles(ForwardRef(ButtonBase))>
                                </ForwardRef(IconButton)>
                              </WithStyles(ForwardRef(IconButton))>
                            </div>
                          </Styled(MuiBox)>
                        </Memo()>
                      </div>
                    </Styled(MuiBox)>
                    <styled.span
                      accentColor="#3f51b5"
                      data-tour-elem="badge"
                    >
                      <StyledComponent
                        accentColor="#3f51b5"
                        data-tour-elem="badge"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-EHOje",
                              "isStatic": false,
                              "lastClassName": "doXVdu",
                              "rules": Array [
                                "
  position: absolute;
  font-family: monospace;
  background: var(--reactour-accent);
  background: ",
                                [Function],
                                ";
  height: 1.875em;
  line-height: 2;
  padding-left: 0.8125em;
  padding-right: 0.8125em;
  font-size: 1em;
  border-radius: 1.625em;
  color: white;
  text-align: center;
  box-shadow: 0 0.25em 0.5em rgba(0, 0, 0, 0.3);
  top: -0.8125em;
  left: -0.8125em;
",
                              ],
                            },
                            "displayName": "styled.span",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-EHOje",
                            "target": "span",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <span
                          className="sc-EHOje doXVdu"
                          data-tour-elem="badge"
                        >
                          1 of 12
                        </span>
                      </StyledComponent>
                    </styled.span>
                    <Styled(Close)
                      className="reactour__close"
                      onClick={[Function]}
                    >
                      <StyledComponent
                        className="reactour__close"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-bxivhb",
                              "isStatic": false,
                              "lastClassName": "eTpeTG",
                              "rules": Array [
                                "
  position: absolute;
  top: 22px;
  right: 22px;
  width: 9px;
  height: 9px;
  color: #5e5e5e;
  &:hover {
    color: #000;
  }
",
                              ],
                            },
                            "displayName": "Styled(Close)",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-bxivhb",
                            "target": [Function],
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        onClick={[Function]}
                      >
                        <Close
                          className="sc-bxivhb eTpeTG reactour__close"
                          onClick={[Function]}
                        >
                          <styled.button
                            className="sc-bxivhb eTpeTG reactour__close"
                            onClick={[Function]}
                          >
                            <StyledComponent
                              className="sc-bxivhb eTpeTG reactour__close"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-bdVaJa",
                                    "isStatic": false,
                                    "lastClassName": "cYQqRL",
                                    "rules": Array [
                                      "
  display: block;
  padding: 0;
  border: 0;
  background: none;
  font-size: 0;
  cursor: ",
                                      [Function],
                                      ";
",
                                    ],
                                  },
                                  "displayName": "styled.button",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-bdVaJa",
                                  "target": "button",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              onClick={[Function]}
                            >
                              <button
                                className="sc-bdVaJa cYQqRL sc-bxivhb eTpeTG reactour__close"
                                onClick={[Function]}
                              >
                                <svg
                                  viewBox="0 0 9.1 9.1"
                                >
                                  <path
                                    d="M5.9 4.5l2.8-2.8c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4.5 3.1 1.7.3C1.3-.1.7-.1.3.3c-.4.4-.4 1 0 1.4l2.8 2.8L.3 7.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3s.5-.1.7-.3L4.5 6l2.8 2.8c.3.2.5.3.8.3s.5-.1.7-.3c.4-.4.4-1 0-1.4L5.9 4.5z"
                                    fill="currentColor"
                                  />
                                </svg>
                              </button>
                            </StyledComponent>
                          </styled.button>
                        </Close>
                      </StyledComponent>
                    </Styled(Close)>
                  </div>
                </StyledComponent>
              </styled.div>
            </div>
            <div
              data-focus-guard={true}
              style={
                Object {
                  "height": "0px",
                  "left": "1px",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "fixed",
                  "top": "1px",
                  "width": "1px",
                }
              }
              tabIndex={0}
            />
          </ForwardRef>
        </ForwardRef>
      </Portal>
    </Portal>
  </Tour>
</Memo()>
`;
